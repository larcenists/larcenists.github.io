<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" font-family="serif,Symbol,ZapfDingbats" font-size="12pt" text-align="left" line-height="normal" font-selection-strategy="character-by-character" line-height-shift-adjustment="disregard-shifts" language="en"><fo:layout-master-set><fo:simple-page-master master-name="blank" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body display-align="center" margin-bottom="0.5in" margin-top="0.5in"/><fo:region-before region-name="xsl-region-before-blank" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-blank" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-first" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-odd" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-even" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="blank-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in"/><fo:region-before region-name="xsl-region-before-blank" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-blank" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-first-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-odd-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-even-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-first-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-odd-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-even-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-first-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-odd-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-even-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-first-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-odd-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-even-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-first-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-odd-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-even-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in - -12pt" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-first-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-odd-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-left="0.5in" margin-right="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-even-draft" page-width="210mm" page-height="297mm" margin-top="0.5in" margin-bottom="0.25in" margin-right="0.5in" margin-left="0.5in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:page-sequence-master master-name="titlepage"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="titlepage-first" page-position="first"/><fo:conditional-page-master-reference master-reference="titlepage-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="titlepage-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="lot"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="lot-first" page-position="first"/><fo:conditional-page-master-reference master-reference="lot-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="lot-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="front"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="front-first" page-position="first"/><fo:conditional-page-master-reference master-reference="front-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="front-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="body"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="body-first" page-position="first"/><fo:conditional-page-master-reference master-reference="body-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="body-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="back"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="back-first" page-position="first"/><fo:conditional-page-master-reference master-reference="back-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="back-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="index"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="index-first" page-position="first"/><fo:conditional-page-master-reference master-reference="index-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="index-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="titlepage-draft"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank-draft" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="titlepage-first-draft" page-position="first"/><fo:conditional-page-master-reference master-reference="titlepage-odd-draft" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="titlepage-odd-draft"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="lot-draft"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank-draft" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="lot-first-draft" page-position="first"/><fo:conditional-page-master-reference master-reference="lot-odd-draft" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="lot-odd-draft"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="front-draft"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank-draft" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="front-first-draft" page-position="first"/><fo:conditional-page-master-reference master-reference="front-odd-draft" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="front-odd-draft"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="body-draft"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank-draft" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="body-first-draft" page-position="first"/><fo:conditional-page-master-reference master-reference="body-odd-draft" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="body-odd-draft"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="back-draft"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank-draft" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="back-first-draft" page-position="first"/><fo:conditional-page-master-reference master-reference="back-odd-draft" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="back-odd-draft"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="index-draft"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank-draft" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="index-first-draft" page-position="first"/><fo:conditional-page-master-reference master-reference="index-odd-draft" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="index-odd-draft"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master></fo:layout-master-set><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="id2443598"><fox:label>Larceny User Manual</fox:label></fox:outline><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="toc...id2443598"><fox:label>Table of Contents</fox:label></fox:outline><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="LarcenyChapter"><fox:label>1. Larceny</fox:label></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="LarcenyChapter"/><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="InstallationChapter"><fox:label>2. Installing Larceny</fox:label><fox:outline internal-destination="VarietiesSection"><fox:label>2.1. Varieties of Larceny</fox:label></fox:outline><fox:destination internal-destination="VarietiesSection"/><fox:outline internal-destination="DownloadingSection"><fox:label>2.2. Downloading</fox:label></fox:outline><fox:destination internal-destination="DownloadingSection"/><fox:outline internal-destination="InstallationSection"><fox:label>2.3. Installing the programs</fox:label></fox:outline><fox:destination internal-destination="InstallationSection"/><fox:outline internal-destination="CompilingStdLibSection"><fox:label>2.4. Compiling the R6RS standard libraries</fox:label></fox:outline><fox:destination internal-destination="CompilingStdLibSection"/></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="InstallationChapter"/><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="RunningChapter"><fox:label>3. Running Larceny</fox:label><fox:outline internal-destination="R5rsSection"><fox:label>3.1. R5RS mode</fox:label></fox:outline><fox:destination internal-destination="R5rsSection"/><fox:outline internal-destination="Err5rsSection"><fox:label>3.2. ERR5RS mode</fox:label><fox:outline internal-destination="Err5rsAutomaticLoadingSection"><fox:label>3.2.1. Automatic loading</fox:label></fox:outline><fox:destination internal-destination="Err5rsAutomaticLoadingSection"/><fox:outline internal-destination="Err5rsDynamicLoadingSection"><fox:label>3.2.2. Dynamic loading</fox:label></fox:outline><fox:destination internal-destination="Err5rsDynamicLoadingSection"/><fox:outline internal-destination="Err5rsPreDefinedSection"><fox:label>3.2.3. Predefined libraries</fox:label></fox:outline><fox:destination internal-destination="Err5rsPreDefinedSection"/><fox:outline internal-destination="ERR5RSLibraryPathSection"><fox:label>3.2.4. Library path</fox:label></fox:outline><fox:destination internal-destination="ERR5RSLibraryPathSection"/><fox:outline internal-destination="ERR5RSprimitivesSection"><fox:label>3.2.5. Importing Larceny's standard procedures</fox:label></fox:outline><fox:destination internal-destination="ERR5RSprimitivesSection"/></fox:outline><fox:destination internal-destination="Err5rsSection"/><fox:outline internal-destination="R6rsSection"><fox:label>3.3. R6RS mode</fox:label><fox:outline internal-destination="R6rsPreDefinedSection"><fox:label>3.3.1. Predefined libraries</fox:label></fox:outline><fox:destination internal-destination="R6rsPreDefinedSection"/><fox:outline internal-destination="R6RSLibraryPathSection"><fox:label>3.3.2. Library path</fox:label></fox:outline><fox:destination internal-destination="R6RSLibraryPathSection"/><fox:outline internal-destination="R6RSLibraryVariableSection"><fox:label>3.3.3. Library environment variable</fox:label></fox:outline><fox:destination internal-destination="R6RSLibraryVariableSection"/><fox:outline internal-destination="DefiningLibrariesSection"><fox:label>3.3.4. Defining libraries</fox:label></fox:outline><fox:destination internal-destination="DefiningLibrariesSection"/><fox:outline internal-destination="id2573891"><fox:label>3.3.5. Importing procedures from Larceny's underlying R5RS system</fox:label></fox:outline><fox:destination internal-destination="id2573891"/></fox:outline><fox:destination internal-destination="R6rsSection"/><fox:outline internal-destination="SchemeScriptsSection"><fox:label>3.4. Scheme scripts</fox:label></fox:outline><fox:destination internal-destination="SchemeScriptsSection"/><fox:outline internal-destination="R5rsScriptSection"><fox:label>3.5. R5RS scripting</fox:label></fox:outline><fox:destination internal-destination="R5rsScriptSection"/><fox:outline internal-destination="ErrorsSection"><fox:label>3.6. Errors</fox:label></fox:outline><fox:destination internal-destination="ErrorsSection"/><fox:outline internal-destination="id2574214"><fox:label>3.7. Troubleshooting</fox:label><fox:outline internal-destination="id2574219"><fox:label>3.7.1. Errors when starting Larceny</fox:label></fox:outline><fox:destination internal-destination="id2574219"/><fox:outline internal-destination="id2574288"><fox:label>3.7.2. Errors when compiling the ERR5RS/R6RS runtime</fox:label></fox:outline><fox:destination internal-destination="id2574288"/><fox:outline internal-destination="AutoLoadErrorsSection"><fox:label>3.7.3. Autoloading errors</fox:label></fox:outline><fox:destination internal-destination="AutoLoadErrorsSection"/><fox:outline internal-destination="CrashesSection"><fox:label>3.7.4. Crashes</fox:label></fox:outline><fox:destination internal-destination="CrashesSection"/></fox:outline><fox:destination internal-destination="id2574214"/><fox:outline internal-destination="PerformanceSection"><fox:label>3.8. Performance</fox:label></fox:outline><fox:destination internal-destination="PerformanceSection"/></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="RunningChapter"/><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="LexicalChapter"><fox:label>4. Lexical syntax</fox:label><fox:outline internal-destination="FlagsSection"><fox:label>4.1. Flags</fox:label></fox:outline><fox:destination internal-destination="FlagsSection"/><fox:outline internal-destination="CaseFoldingSection"><fox:label>4.2. Case-sensitivity</fox:label></fox:outline><fox:destination internal-destination="CaseFoldingSection"/><fox:outline internal-destination="LexicalExtensionsSection"><fox:label>4.3. Lexical extensions</fox:label></fox:outline><fox:destination internal-destination="LexicalExtensionsSection"/><fox:outline internal-destination="LexicalParametersSection"><fox:label>4.4. Lexical parameters</fox:label><fox:destination internal-destination="case-sensitive?"/><fox:destination internal-destination="read-larceny-weirdness?"/><fox:destination internal-destination="read-traditional-weirdness?"/></fox:outline><fox:destination internal-destination="LexicalParametersSection"/></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="LexicalChapter"/><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="NamingChapter"><fox:label>5. File naming conventions</fox:label><fox:outline internal-destination="SuffixSection"><fox:label>5.1. Suffixes</fox:label></fox:outline><fox:destination internal-destination="SuffixSection"/><fox:outline internal-destination="DirectorySection"><fox:label>5.2. Directories</fox:label></fox:outline><fox:destination internal-destination="DirectorySection"/><fox:outline internal-destination="LibraryResolutionSection"><fox:label>5.3. Resolving references to libraries</fox:label></fox:outline><fox:destination internal-destination="LibraryResolutionSection"/><fox:outline internal-destination="LibraryTranslationSection"><fox:label>5.4. Mapping library names to files (ERR5RS/R6RS)</fox:label></fox:outline><fox:destination internal-destination="LibraryTranslationSection"/><fox:outline internal-destination="RequireLibraryTranslationSection"><fox:label>5.5. Mapping library names to files (R5RS)</fox:label><fox:destination internal-destination="require"/><fox:destination internal-destination="current-require-path"/></fox:outline><fox:destination internal-destination="RequireLibraryTranslationSection"/></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="NamingChapter"/><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="CompilingChapter"><fox:label>6. Compiling files and libraries</fox:label><fox:outline internal-destination="CompilingErr5rsSection"><fox:label>6.1. Compiling ERR5RS/R6RS libraries</fox:label></fox:outline><fox:destination internal-destination="CompilingErr5rsSection"/><fox:outline internal-destination="CompilingR5rsSection"><fox:label>6.2. Compiling R5RS source files</fox:label><fox:destination internal-destination="compile-file"/></fox:outline><fox:destination internal-destination="CompilingR5rsSection"/></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="CompilingChapter"/><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="Err5rsChapter"><fox:label>7. ERR5RS standard libraries</fox:label><fox:outline internal-destination="Err5rsLoadSection"><fox:label>7.1. Load</fox:label><fox:destination internal-destination="load"/></fox:outline><fox:destination internal-destination="Err5rsLoadSection"/><fox:outline internal-destination="Err5rsRecordsSection"><fox:label>7.2. Records</fox:label><fox:outline internal-destination="Err5rsRecordsProceduralSection"><fox:label>7.2.1. Procedural layer</fox:label><fox:destination internal-destination="make-rtd"/><fox:destination internal-destination="rtd?"/><fox:destination internal-destination="rtd-constructor"/><fox:destination internal-destination="rtd-predicate"/><fox:destination internal-destination="rtd-accessor"/><fox:destination internal-destination="rtd-mutator"/></fox:outline><fox:destination internal-destination="Err5rsRecordsProceduralSection"/><fox:outline internal-destination="Err5rsRecordsInspectionSection"><fox:label>7.2.2. Inspection layer</fox:label><fox:destination internal-destination="record?"/><fox:destination internal-destination="record-rtd"/><fox:destination internal-destination="rtd-name"/><fox:destination internal-destination="rtd-parent"/><fox:destination internal-destination="rtd-field-names"/><fox:destination internal-destination="rtd-all-field-names"/><fox:destination internal-destination="rtd-field-mutable?"/></fox:outline><fox:destination internal-destination="Err5rsRecordsInspectionSection"/><fox:outline internal-destination="Err5rsRecordsSyntacticSection"><fox:label>7.2.3. Syntactic layer</fox:label></fox:outline><fox:destination internal-destination="Err5rsRecordsSyntacticSection"/><fox:outline internal-destination="RecordIdentitySection"><fox:label>7.2.4. Record identity</fox:label></fox:outline><fox:destination internal-destination="RecordIdentitySection"/></fox:outline><fox:destination internal-destination="Err5rsRecordsSection"/></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="Err5rsChapter"/><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="R6rsChapter"><fox:label>8. R6RS standard libraries</fox:label><fox:outline internal-destination="R6rsBaseSection"><fox:label>8.1. Base library</fox:label></fox:outline><fox:destination internal-destination="R6rsBaseSection"/><fox:outline internal-destination="R6rsUnicodeSection"><fox:label>8.2. Unicode</fox:label></fox:outline><fox:destination internal-destination="R6rsUnicodeSection"/><fox:outline internal-destination="R6rsBytevectorsSection"><fox:label>8.3. Bytevectors</fox:label></fox:outline><fox:destination internal-destination="R6rsBytevectorsSection"/><fox:outline internal-destination="R6rsListsSection"><fox:label>8.4. Lists</fox:label></fox:outline><fox:destination internal-destination="R6rsListsSection"/><fox:outline internal-destination="R6rsSortingSection"><fox:label>8.5. Sorting</fox:label></fox:outline><fox:destination internal-destination="R6rsSortingSection"/><fox:outline internal-destination="R6rsControlSection"><fox:label>8.6. Control</fox:label></fox:outline><fox:destination internal-destination="R6rsControlSection"/><fox:outline internal-destination="R6rsRecordsSection"><fox:label>8.7. Records</fox:label></fox:outline><fox:destination internal-destination="R6rsRecordsSection"/><fox:outline internal-destination="R6rsConditionsSection"><fox:label>8.8. Exceptions and conditions</fox:label></fox:outline><fox:destination internal-destination="R6rsConditionsSection"/><fox:outline internal-destination="R6rsIoSection"><fox:label>8.9. Input and output</fox:label></fox:outline><fox:destination internal-destination="R6rsIoSection"/><fox:outline internal-destination="R6rsProgramsSection"><fox:label>8.10. Programs</fox:label></fox:outline><fox:destination internal-destination="R6rsProgramsSection"/><fox:outline internal-destination="R6rsArithmeticSection"><fox:label>8.11. Arithmetic</fox:label></fox:outline><fox:destination internal-destination="R6rsArithmeticSection"/><fox:outline internal-destination="R6rsSyntaxCaseSection"><fox:label>8.12. Syntax-case</fox:label></fox:outline><fox:destination internal-destination="R6rsSyntaxCaseSection"/><fox:outline internal-destination="R6rsHashtablesSection"><fox:label>8.13. Hashtables</fox:label></fox:outline><fox:destination internal-destination="R6rsHashtablesSection"/><fox:outline internal-destination="R6rsEnumerationsSection"><fox:label>8.14. Enumeration sets</fox:label></fox:outline><fox:destination internal-destination="R6rsEnumerationsSection"/><fox:outline internal-destination="R6rsEvalSection"><fox:label>8.15. Eval</fox:label></fox:outline><fox:destination internal-destination="R6rsEvalSection"/><fox:outline internal-destination="R6rsMutableStringsSection"><fox:label>8.16. Mutable pairs and strings</fox:label></fox:outline><fox:destination internal-destination="R6rsMutableStringsSection"/><fox:outline internal-destination="R6rsR5rsSection"><fox:label>8.17. R5RS</fox:label></fox:outline><fox:destination internal-destination="R6rsR5rsSection"/></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="R6rsChapter"/><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="LarcenyErr5rsLibrariesChapter"><fox:label>9. Larceny's ERR5RS/R6RS libraries</fox:label><fox:outline internal-destination="LarcenyLoadSection"><fox:label>9.1. Load</fox:label></fox:outline><fox:destination internal-destination="LarcenyLoadSection"/><fox:outline internal-destination="LarcenyCompilerSection"><fox:label>9.2. Compiler</fox:label><fox:destination internal-destination="compile-library"/><fox:destination internal-destination="compile-stale-libraries"/><fox:destination internal-destination="compiler-switches"/></fox:outline><fox:destination internal-destination="LarcenyCompilerSection"/><fox:outline internal-destination="LarcenyBenchmarkingSection"><fox:label>9.3. Benchmarking</fox:label></fox:outline><fox:destination internal-destination="LarcenyBenchmarkingSection"/><fox:outline internal-destination="RecordsPrinterSection"><fox:label>9.4. Records printer</fox:label><fox:destination internal-destination="rtd-printer"/><fox:destination internal-destination="rtd-printer-set!"/></fox:outline><fox:destination internal-destination="RecordsPrinterSection"/></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="LarcenyErr5rsLibrariesChapter"/><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="LarcenyR5rsLibrariesChapter"><fox:label>10. Larceny's R5RS libraries</fox:label><fox:outline internal-destination="id2579583"><fox:label>10.1. Strings</fox:label></fox:outline><fox:destination internal-destination="id2579583"/><fox:outline internal-destination="id2579630"><fox:label>10.2. Bytevectors</fox:label><fox:destination internal-destination="make-bytevector"/></fox:outline><fox:destination internal-destination="id2579630"/><fox:outline internal-destination="id2579961"><fox:label>10.3. Vectors</fox:label><fox:destination internal-destination="vector-copy"/></fox:outline><fox:destination internal-destination="id2579961"/><fox:outline internal-destination="id2580080"><fox:label>10.4. Procedures</fox:label><fox:destination internal-destination="procedure-copy"/><fox:destination internal-destination="procedure-arity"/><fox:destination internal-destination="procedure-documentation-string"/><fox:destination internal-destination="procedure-name"/><fox:destination internal-destination="procedure-source-file"/><fox:destination internal-destination="procedure-source-position"/><fox:destination internal-destination="procedure-expression"/><fox:destination internal-destination="procedure-environment"/></fox:outline><fox:destination internal-destination="id2580080"/><fox:outline internal-destination="id2580626"><fox:label>10.5. Pairs and Lists</fox:label><fox:destination internal-destination="append!"/><fox:destination internal-destination="every?"/><fox:destination internal-destination="last-pair"/><fox:destination internal-destination="list-copy"/><fox:destination internal-destination="remove"/><fox:destination internal-destination="remq"/><fox:destination internal-destination="remv"/><fox:destination internal-destination="remp"/><fox:destination internal-destination="remove!"/><fox:destination internal-destination="remq!"/><fox:destination internal-destination="remv!"/><fox:destination internal-destination="remp!"/><fox:destination internal-destination="reverse!"/><fox:destination internal-destination="some?"/></fox:outline><fox:destination internal-destination="id2580626"/><fox:outline internal-destination="id2581276"><fox:label>10.6. Sorting</fox:label></fox:outline><fox:destination internal-destination="id2581276"/><fox:outline internal-destination="id2581377"><fox:label>10.7. Records</fox:label><fox:outline internal-destination="id2581455"><fox:label>10.7.1. Specification</fox:label><fox:destination internal-destination="make-record-type"/><fox:destination internal-destination="record-constructor"/><fox:destination internal-destination="record-predicate"/><fox:destination internal-destination="record-accessor"/><fox:destination internal-destination="record-updater"/><fox:destination internal-destination="record-type-descriptor"/><fox:destination internal-destination="record-type-name"/><fox:destination internal-destination="record-type-field-names"/><fox:destination internal-destination="record-type-parent"/><fox:destination internal-destination="record-type-extends?"/></fox:outline><fox:destination internal-destination="id2581455"/><fox:outline internal-destination="id2582048"><fox:label>10.7.2. Implementation</fox:label></fox:outline><fox:destination internal-destination="id2582048"/></fox:outline><fox:destination internal-destination="id2581377"/><fox:outline internal-destination="id2582069"><fox:label>10.8. Input, Output, and Files</fox:label><fox:destination internal-destination="close-open-files"/><fox:destination internal-destination="console-input-port"/><fox:destination internal-destination="console-output-port"/><fox:destination internal-destination="console-input-port-factory"/><fox:destination internal-destination="console-output-port-factory"/><fox:destination internal-destination="current-input-port"/><fox:destination internal-destination="current-output-port"/><fox:destination internal-destination="delete-file"/><fox:destination internal-destination="eof-object"/><fox:destination internal-destination="file-exists?"/><fox:destination internal-destination="file-modification-time"/><fox:destination internal-destination="flush-output-port"/><fox:destination internal-destination="get-output-string"/><fox:destination internal-destination="open-input-string"/><fox:destination internal-destination="open-output-string"/><fox:destination internal-destination="port?"/><fox:destination internal-destination="port-name"/><fox:destination internal-destination="port-position"/><fox:destination internal-destination="rename-file"/><fox:destination internal-destination="reset-output-string"/><fox:destination internal-destination="with-input-from-port"/><fox:destination internal-destination="with-output-to-port"/></fox:outline><fox:destination internal-destination="id2582069"/><fox:outline internal-destination="id2583079"><fox:label>10.9. Operating System Interface</fox:label><fox:destination internal-destination="command-line-arguments"/><fox:destination internal-destination="dump-heap"/><fox:destination internal-destination="dump-interactive-heap"/><fox:destination internal-destination="getenv"/><fox:destination internal-destination="system"/></fox:outline><fox:destination internal-destination="id2583079"/><fox:outline internal-destination="FixnumPrimitives"><fox:label>10.10. Fixnum primitives</fox:label><fox:destination internal-destination="fixnum?"/><fox:destination internal-destination="fx+"/><fox:destination internal-destination="fx-"/><fox:destination internal-destination="fx&#x2014;"/><fox:destination internal-destination="fx*"/><fox:destination internal-destination="fx="/><fox:destination internal-destination="fx&lt;"/><fox:destination internal-destination="fx&lt;="/><fox:destination internal-destination="fx&gt;"/><fox:destination internal-destination="fx&gt;="/><fox:destination internal-destination="fxnegative?"/><fox:destination internal-destination="fxpositive?"/><fox:destination internal-destination="fxzero?"/><fox:destination internal-destination="fxlogand"/><fox:destination internal-destination="fxlogior"/><fox:destination internal-destination="fxlognot"/><fox:destination internal-destination="fxlogxor"/><fox:destination internal-destination="fxlsh"/><fox:destination internal-destination="most-positive-fixnum"/><fox:destination internal-destination="most-negative-fixnum"/><fox:destination internal-destination="fxrsha"/><fox:destination internal-destination="fxrshl"/></fox:outline><fox:destination internal-destination="FixnumPrimitives"/><fox:outline internal-destination="id2584491"><fox:label>10.11. Numbers</fox:label><fox:destination internal-destination="random"/></fox:outline><fox:destination internal-destination="id2584491"/><fox:outline internal-destination="id2584675"><fox:label>10.12. Hashtables and hash functions</fox:label><fox:outline internal-destination="id2584728"><fox:label>10.12.1. Hash tables</fox:label><fox:destination internal-destination="make-oldstyle-hashtable"/><fox:destination internal-destination="hashtable-contains?"/><fox:destination internal-destination="hashtable-fetch"/><fox:destination internal-destination="hashtable-get"/><fox:destination internal-destination="hashtable-put!"/><fox:destination internal-destination="hashtable-remove!"/><fox:destination internal-destination="hashtable-clear!"/><fox:destination internal-destination="hashtable-size"/><fox:destination internal-destination="hashtable-for-each"/><fox:destination internal-destination="hashtable-map"/><fox:destination internal-destination="hashtable-copy"/></fox:outline><fox:destination internal-destination="id2584728"/><fox:outline internal-destination="id2585405"><fox:label>10.12.2. Hash functions</fox:label><fox:destination internal-destination="equal-hash"/><fox:destination internal-destination="object-hash"/><fox:destination internal-destination="string-hash"/><fox:destination internal-destination="symbol-hash"/></fox:outline><fox:destination internal-destination="id2585405"/></fox:outline><fox:destination internal-destination="id2584675"/><fox:outline internal-destination="id2585639"><fox:label>10.13. Parameters</fox:label><fox:destination internal-destination="make-parameter"/><fox:outline internal-destination="id2585754"><fox:label>10.13.1. Larceny parameters</fox:label></fox:outline><fox:destination internal-destination="id2585754"/></fox:outline><fox:destination internal-destination="id2585639"/><fox:outline internal-destination="id2586016"><fox:label>10.14. Property Lists</fox:label><fox:destination internal-destination="putprop"/><fox:destination internal-destination="getprop"/><fox:destination internal-destination="remprop"/></fox:outline><fox:destination internal-destination="id2586016"/><fox:outline internal-destination="id2586210"><fox:label>10.15. Symbols</fox:label><fox:destination internal-destination="gensym"/><fox:destination internal-destination="oblist"/><fox:destination internal-destination="oblist-set!"/></fox:outline><fox:destination internal-destination="id2586210"/><fox:outline internal-destination="id2586385"><fox:label>10.16. System Control and Performance Measurement</fox:label><fox:destination internal-destination="collect"/><fox:destination internal-destination="gc-counter"/><fox:destination internal-destination="major-gc-counter"/><fox:destination internal-destination="gcctl"/><fox:destination internal-destination="sro"/><fox:destination internal-destination="stats-dump-on"/><fox:destination internal-destination="stats-dump-off"/><fox:destination internal-destination="system-features"/><fox:destination internal-destination="display-memstats"/><fox:destination internal-destination="memstats"/><fox:destination internal-destination="run-with-stats"/><fox:destination internal-destination="run-benchmark"/></fox:outline><fox:destination internal-destination="id2586385"/><fox:outline internal-destination="id2587497"><fox:label>10.17. SRFI Support</fox:label></fox:outline><fox:destination internal-destination="id2587497"/><fox:outline internal-destination="id2587565"><fox:label>10.18. SLIB support</fox:label></fox:outline><fox:destination internal-destination="id2587565"/><fox:outline internal-destination="id2587606"><fox:label>10.19. Foreign-Function Interface to C</fox:label><fox:outline internal-destination="id2587651"><fox:label>10.19.1. Introducing the FFI</fox:label></fox:outline><fox:destination internal-destination="id2587651"/><fox:outline internal-destination="id2522308"><fox:label>10.19.2. The space of foreign values</fox:label></fox:outline><fox:destination internal-destination="id2522308"/><fox:outline internal-destination="id2588382"><fox:label>10.19.3. Marshalling via ffi-attributes</fox:label><fox:outline internal-destination="id2588529"><fox:label>10.19.3.1. Primitive Attribute Types</fox:label></fox:outline><fox:destination internal-destination="id2588529"/><fox:outline internal-destination="id2589139"><fox:label>10.19.3.2. Extending the Core Attribute Registry</fox:label><fox:destination internal-destination="ffi-add-attribute-core-entry!"/></fox:outline><fox:destination internal-destination="id2589139"/><fox:outline internal-destination="id2589316"><fox:label>10.19.3.3. Attribute Type Constructors</fox:label></fox:outline><fox:destination internal-destination="id2589316"/><fox:outline internal-destination="id2589507"><fox:label>10.19.3.4. void* Type Hierarchies</fox:label><fox:destination internal-destination="void*-&gt;address"/><fox:destination internal-destination="void*?"/><fox:destination internal-destination="void*-byte-ref"/><fox:destination internal-destination="void*-byte-set!"/><fox:destination internal-destination="void*-word-ref"/><fox:destination internal-destination="void*-word-set!"/><fox:destination internal-destination="void*-void*-ref"/><fox:destination internal-destination="void*-void*-set!"/><fox:destination internal-destination="void*-double-ref"/><fox:destination internal-destination="void*-double-set!"/></fox:outline><fox:destination internal-destination="id2589507"/></fox:outline><fox:destination internal-destination="id2588382"/><fox:outline internal-destination="id2590022"><fox:label>10.19.4. Creating loadable modules</fox:label><fox:outline internal-destination="id2590043"><fox:label>10.19.4.1. SunOS 4</fox:label></fox:outline><fox:destination internal-destination="id2590043"/><fox:outline internal-destination="id2590097"><fox:label>10.19.4.2. SunOS 5</fox:label></fox:outline><fox:destination internal-destination="id2590097"/></fox:outline><fox:destination internal-destination="id2590022"/><fox:outline internal-destination="id2590130"><fox:label>10.19.5. The Interface</fox:label><fox:outline internal-destination="id2590136"><fox:label>10.19.5.1. Procedures</fox:label><fox:destination internal-destination="foreign-file"/><fox:destination internal-destination="foreign-procedure"/><fox:destination internal-destination="foreign-null-pointer"/><fox:destination internal-destination="foreign-null-pointer?"/></fox:outline><fox:destination internal-destination="id2590136"/></fox:outline><fox:destination internal-destination="id2590130"/><fox:outline internal-destination="id2590405"><fox:label>10.19.6. Foreign Data Access</fox:label><fox:outline internal-destination="id2590411"><fox:label>10.19.6.1. Raw memory access</fox:label><fox:destination internal-destination="peek-bytes"/><fox:destination internal-destination="poke-bytes"/></fox:outline><fox:destination internal-destination="id2590411"/><fox:outline internal-destination="id2590598"><fox:label>10.19.6.2. Foreign data sizes</fox:label></fox:outline><fox:destination internal-destination="id2590598"/><fox:outline internal-destination="id2590666"><fox:label>10.19.6.3. Decoding foreign data</fox:label></fox:outline><fox:destination internal-destination="id2590666"/></fox:outline><fox:destination internal-destination="id2590405"/><fox:outline internal-destination="id2591417"><fox:label>10.19.7. Heap dumping and the FFI</fox:label></fox:outline><fox:destination internal-destination="id2591417"/><fox:outline internal-destination="id2591467"><fox:label>10.19.8. Examples</fox:label><fox:outline internal-destination="id2591472"><fox:label>10.19.8.1. Change directory</fox:label></fox:outline><fox:destination internal-destination="id2591472"/><fox:outline internal-destination="id2591500"><fox:label>10.19.8.2. Print Working Directory</fox:label></fox:outline><fox:destination internal-destination="id2591500"/><fox:outline internal-destination="id2591532"><fox:label>10.19.8.3. Quicksort</fox:label></fox:outline><fox:destination internal-destination="id2591532"/><fox:outline internal-destination="id2591601"><fox:label>10.19.8.4. Other examples</fox:label></fox:outline><fox:destination internal-destination="id2591601"/></fox:outline><fox:destination internal-destination="id2591467"/><fox:outline internal-destination="id2591616"><fox:label>10.19.9. Higher level layers</fox:label><fox:outline internal-destination="id2591643"><fox:label>10.19.9.1. foreign-ctools</fox:label></fox:outline><fox:destination internal-destination="id2591643"/><fox:outline internal-destination="id2592028"><fox:label>10.19.9.2. foreign-sugar</fox:label></fox:outline><fox:destination internal-destination="id2592028"/><fox:outline internal-destination="id2592108"><fox:label>10.19.9.3. foreign-stdlib</fox:label><fox:destination internal-destination="stdlib/malloc"/><fox:destination internal-destination="stdlib/free"/><fox:destination internal-destination="ffi-install-void*-subtype"/><fox:destination internal-destination="establish-void*-subhierarchy!"/><fox:destination internal-destination="string-&gt;char*"/><fox:destination internal-destination="char*-strlen"/><fox:destination internal-destination="char*-&gt;string"/><fox:destination internal-destination="CallWithCharStar"/><fox:destination internal-destination="CallWithCharStarStar"/><fox:destination internal-destination="CallWithIntStar"/><fox:destination internal-destination="CallWithShortStar"/><fox:destination internal-destination="CallWithDoubleStar"/></fox:outline><fox:destination internal-destination="id2592108"/><fox:outline internal-destination="id2592779"><fox:label>10.19.9.4. foreign-cstructs</fox:label></fox:outline><fox:destination internal-destination="id2592779"/><fox:outline internal-destination="id2592855"><fox:label>10.19.9.5. foreign-cenums</fox:label></fox:outline><fox:destination internal-destination="id2592855"/></fox:outline><fox:destination internal-destination="id2591616"/></fox:outline><fox:destination internal-destination="id2587606"/></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="LarcenyR5rsLibrariesChapter"/><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="id2593047"><fox:label>11. Debugging</fox:label><fox:outline internal-destination="id2593060"><fox:label>11.1. Entering the debugger</fox:label></fox:outline><fox:destination internal-destination="id2593060"/><fox:outline internal-destination="id2593090"><fox:label>11.2. Debugger commands</fox:label></fox:outline><fox:destination internal-destination="id2593090"/><fox:outline internal-destination="id2593290"><fox:label>11.3. Breakpoints</fox:label><fox:destination internal-destination="larceny-break"/><fox:destination internal-destination="break-entry"/><fox:destination internal-destination="unbreak"/></fox:outline><fox:destination internal-destination="id2593290"/><fox:outline internal-destination="id2593437"><fox:label>11.4. Tracing</fox:label><fox:destination internal-destination="trace-entry"/><fox:destination internal-destination="trace-exit"/><fox:destination internal-destination="trace"/><fox:destination internal-destination="untrace"/></fox:outline><fox:destination internal-destination="id2593437"/><fox:outline internal-destination="id2593647"><fox:label>11.5. Other functionality</fox:label><fox:destination internal-destination="break-handler"/></fox:outline><fox:destination internal-destination="id2593647"/></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="id2593047"/><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="Standards"><fox:label>12. Standards</fox:label><fox:outline internal-destination="id2593694"><fox:label>12.1. Scheme standards</fox:label></fox:outline><fox:destination internal-destination="id2593694"/><fox:outline internal-destination="id2593768"><fox:label>12.2. Other relevant standards</fox:label></fox:outline><fox:destination internal-destination="id2593768"/></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="Standards"/><fox:outline xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="id2593831"><fox:label>Index</fox:label></fox:outline><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="id2593831"/><fox:destination xmlns:fox="http://xml.apache.org/fop/extensions" internal-destination="id2443598"/><fo:page-sequence xmlns:axf="http://www.antennahouse.com/names/XSL/Extensions" hyphenate="false" master-reference="body" language="en" format="1" initial-page-number="1" force-page-count="no-force" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2"><fo:static-content flow-name="xsl-region-before-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="-12pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="left" display-align="before"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="-12pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="left" display-align="before"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before"><fo:block><fo:block>Larceny User Manual</fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="-12pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="left" display-align="before"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before"><fo:block><fo:block>Larceny User Manual</fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="-12pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="left" display-align="before"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-footnote-separator"><fo:block><fo:leader color="black" leader-pattern="rule" leader-length="1in"/></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="-12pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="left" display-align="after"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="after"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="-12pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="left" display-align="after"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="after"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="-12pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="left" display-align="after"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="after"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="-12pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="left" display-align="after"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="after"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body"><fo:block id="id2443598"><fo:block font-family="sans-serif,Symbol,ZapfDingbats"><fo:block start-indent="0pt" text-align="center"><fo:block keep-with-next.within-column="always" font-size="24.8832pt" font-weight="bold"><fo:block keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" hyphenate="false" text-align="center" start-indent="-12pt" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2">Larceny User Manual</fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="toc...id2443598" space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em"><fo:block><fo:block><fo:block space-before.minimum="1em" space-before.optimum="1.5em" space-before.maximum="2em" space-after="0.5em" margin-left="-12pt" start-indent="0pt" font-size="17.28pt" font-weight="bold" font-family="sans-serif,Symbol,ZapfDingbats">Table of Contents</fo:block></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="LarcenyChapter">1. Larceny</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="LarcenyChapter"><fo:page-number-citation ref-id="LarcenyChapter"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="InstallationChapter">2. Installing Larceny</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="InstallationChapter"><fo:page-number-citation ref-id="InstallationChapter"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id2443598.InstallationChapter" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="VarietiesSection">2.1. Varieties of Larceny</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="VarietiesSection"><fo:page-number-citation ref-id="VarietiesSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="DownloadingSection">2.2. Downloading</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="DownloadingSection"><fo:page-number-citation ref-id="DownloadingSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="InstallationSection">2.3. Installing the programs</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="InstallationSection"><fo:page-number-citation ref-id="InstallationSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="CompilingStdLibSection">2.4. Compiling the R6RS standard libraries</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="CompilingStdLibSection"><fo:page-number-citation ref-id="CompilingStdLibSection"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="RunningChapter">3. Running Larceny</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="RunningChapter"><fo:page-number-citation ref-id="RunningChapter"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id2443598.RunningChapter" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R5rsSection">3.1. R5RS mode</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R5rsSection"><fo:page-number-citation ref-id="R5rsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="Err5rsSection">3.2. ERR5RS mode</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="Err5rsSection"><fo:page-number-citation ref-id="Err5rsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsSection">3.3. R6RS mode</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsSection"><fo:page-number-citation ref-id="R6rsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="SchemeScriptsSection">3.4. Scheme scripts</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="SchemeScriptsSection"><fo:page-number-citation ref-id="SchemeScriptsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R5rsScriptSection">3.5. R5RS scripting</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R5rsScriptSection"><fo:page-number-citation ref-id="R5rsScriptSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="ErrorsSection">3.6. Errors</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="ErrorsSection"><fo:page-number-citation ref-id="ErrorsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2574214">3.7. Troubleshooting</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2574214"><fo:page-number-citation ref-id="id2574214"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="PerformanceSection">3.8. Performance</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="PerformanceSection"><fo:page-number-citation ref-id="PerformanceSection"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="LexicalChapter">4. Lexical syntax</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="LexicalChapter"><fo:page-number-citation ref-id="LexicalChapter"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id2443598.LexicalChapter" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="FlagsSection">4.1. Flags</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="FlagsSection"><fo:page-number-citation ref-id="FlagsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="CaseFoldingSection">4.2. Case-sensitivity</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="CaseFoldingSection"><fo:page-number-citation ref-id="CaseFoldingSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="LexicalExtensionsSection">4.3. Lexical extensions</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="LexicalExtensionsSection"><fo:page-number-citation ref-id="LexicalExtensionsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="LexicalParametersSection">4.4. Lexical parameters</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="LexicalParametersSection"><fo:page-number-citation ref-id="LexicalParametersSection"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="NamingChapter">5. File naming conventions</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="NamingChapter"><fo:page-number-citation ref-id="NamingChapter"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id2443598.NamingChapter" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="SuffixSection">5.1. Suffixes</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="SuffixSection"><fo:page-number-citation ref-id="SuffixSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="DirectorySection">5.2. Directories</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="DirectorySection"><fo:page-number-citation ref-id="DirectorySection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="LibraryResolutionSection">5.3. Resolving references to libraries</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="LibraryResolutionSection"><fo:page-number-citation ref-id="LibraryResolutionSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="LibraryTranslationSection">5.4. Mapping library names to files (ERR5RS/R6RS)</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="LibraryTranslationSection"><fo:page-number-citation ref-id="LibraryTranslationSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="RequireLibraryTranslationSection">5.5. Mapping library names to files (R5RS)</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="RequireLibraryTranslationSection"><fo:page-number-citation ref-id="RequireLibraryTranslationSection"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="CompilingChapter">6. Compiling files and libraries</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="CompilingChapter"><fo:page-number-citation ref-id="CompilingChapter"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id2443598.CompilingChapter" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="CompilingErr5rsSection">6.1. Compiling ERR5RS/R6RS libraries</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="CompilingErr5rsSection"><fo:page-number-citation ref-id="CompilingErr5rsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="CompilingR5rsSection">6.2. Compiling R5RS source files</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="CompilingR5rsSection"><fo:page-number-citation ref-id="CompilingR5rsSection"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="Err5rsChapter">7. ERR5RS standard libraries</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="Err5rsChapter"><fo:page-number-citation ref-id="Err5rsChapter"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id2443598.Err5rsChapter" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="Err5rsLoadSection">7.1. Load</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="Err5rsLoadSection"><fo:page-number-citation ref-id="Err5rsLoadSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="Err5rsRecordsSection">7.2. Records</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="Err5rsRecordsSection"><fo:page-number-citation ref-id="Err5rsRecordsSection"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsChapter">8. R6RS standard libraries</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsChapter"><fo:page-number-citation ref-id="R6rsChapter"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id2443598.R6rsChapter" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsBaseSection">8.1. Base library</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsBaseSection"><fo:page-number-citation ref-id="R6rsBaseSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsUnicodeSection">8.2. Unicode</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsUnicodeSection"><fo:page-number-citation ref-id="R6rsUnicodeSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsBytevectorsSection">8.3. Bytevectors</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsBytevectorsSection"><fo:page-number-citation ref-id="R6rsBytevectorsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsListsSection">8.4. Lists</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsListsSection"><fo:page-number-citation ref-id="R6rsListsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsSortingSection">8.5. Sorting</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsSortingSection"><fo:page-number-citation ref-id="R6rsSortingSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsControlSection">8.6. Control</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsControlSection"><fo:page-number-citation ref-id="R6rsControlSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsRecordsSection">8.7. Records</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsRecordsSection"><fo:page-number-citation ref-id="R6rsRecordsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsConditionsSection">8.8. Exceptions and conditions</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsConditionsSection"><fo:page-number-citation ref-id="R6rsConditionsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsIoSection">8.9. Input and output</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsIoSection"><fo:page-number-citation ref-id="R6rsIoSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsProgramsSection">8.10. Programs</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsProgramsSection"><fo:page-number-citation ref-id="R6rsProgramsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsArithmeticSection">8.11. Arithmetic</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsArithmeticSection"><fo:page-number-citation ref-id="R6rsArithmeticSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsSyntaxCaseSection">8.12. Syntax-case</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsSyntaxCaseSection"><fo:page-number-citation ref-id="R6rsSyntaxCaseSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsHashtablesSection">8.13. Hashtables</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsHashtablesSection"><fo:page-number-citation ref-id="R6rsHashtablesSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsEnumerationsSection">8.14. Enumeration sets</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsEnumerationsSection"><fo:page-number-citation ref-id="R6rsEnumerationsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsEvalSection">8.15. Eval</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsEvalSection"><fo:page-number-citation ref-id="R6rsEvalSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsMutableStringsSection">8.16. Mutable pairs and strings</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsMutableStringsSection"><fo:page-number-citation ref-id="R6rsMutableStringsSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="R6rsR5rsSection">8.17. R5RS</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="R6rsR5rsSection"><fo:page-number-citation ref-id="R6rsR5rsSection"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="LarcenyErr5rsLibrariesChapter">9. Larceny's ERR5RS/R6RS libraries</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="LarcenyErr5rsLibrariesChapter"><fo:page-number-citation ref-id="LarcenyErr5rsLibrariesChapter"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id2443598.LarcenyErr5rsLibrariesChapter" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="LarcenyLoadSection">9.1. Load</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="LarcenyLoadSection"><fo:page-number-citation ref-id="LarcenyLoadSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="LarcenyCompilerSection">9.2. Compiler</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="LarcenyCompilerSection"><fo:page-number-citation ref-id="LarcenyCompilerSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="LarcenyBenchmarkingSection">9.3. Benchmarking</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="LarcenyBenchmarkingSection"><fo:page-number-citation ref-id="LarcenyBenchmarkingSection"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="RecordsPrinterSection">9.4. Records printer</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="RecordsPrinterSection"><fo:page-number-citation ref-id="RecordsPrinterSection"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="LarcenyR5rsLibrariesChapter">10. Larceny's R5RS libraries</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="LarcenyR5rsLibrariesChapter"><fo:page-number-citation ref-id="LarcenyR5rsLibrariesChapter"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id2443598.LarcenyR5rsLibrariesChapter" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2579583">10.1. Strings</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2579583"><fo:page-number-citation ref-id="id2579583"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2579630">10.2. Bytevectors</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2579630"><fo:page-number-citation ref-id="id2579630"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2579961">10.3. Vectors</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2579961"><fo:page-number-citation ref-id="id2579961"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2580080">10.4. Procedures</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2580080"><fo:page-number-citation ref-id="id2580080"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2580626">10.5. Pairs and Lists</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2580626"><fo:page-number-citation ref-id="id2580626"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2581276">10.6. Sorting</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2581276"><fo:page-number-citation ref-id="id2581276"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2581377">10.7. Records</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2581377"><fo:page-number-citation ref-id="id2581377"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2582069">10.8. Input, Output, and Files</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2582069"><fo:page-number-citation ref-id="id2582069"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2583079">10.9. Operating System Interface</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2583079"><fo:page-number-citation ref-id="id2583079"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="FixnumPrimitives">10.10. Fixnum primitives</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="FixnumPrimitives"><fo:page-number-citation ref-id="FixnumPrimitives"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2584491">10.11. Numbers</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2584491"><fo:page-number-citation ref-id="id2584491"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2584675">10.12. Hashtables and hash functions</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2584675"><fo:page-number-citation ref-id="id2584675"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2585639">10.13. Parameters</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2585639"><fo:page-number-citation ref-id="id2585639"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2586016">10.14. Property Lists</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2586016"><fo:page-number-citation ref-id="id2586016"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2586210">10.15. Symbols</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2586210"><fo:page-number-citation ref-id="id2586210"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2586385">10.16. System Control and Performance Measurement</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2586385"><fo:page-number-citation ref-id="id2586385"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2587497">10.17. SRFI Support</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2587497"><fo:page-number-citation ref-id="id2587497"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2587565">10.18. SLIB support</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2587565"><fo:page-number-citation ref-id="id2587565"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2587606">10.19. Foreign-Function Interface to C</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2587606"><fo:page-number-citation ref-id="id2587606"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2593047">11. Debugging</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2593047"><fo:page-number-citation ref-id="id2593047"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id2443598.id2593047" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2593060">11.1. Entering the debugger</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2593060"><fo:page-number-citation ref-id="id2593060"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2593090">11.2. Debugger commands</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2593090"><fo:page-number-citation ref-id="id2593090"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2593290">11.3. Breakpoints</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2593290"><fo:page-number-citation ref-id="id2593290"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2593437">11.4. Tracing</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2593437"><fo:page-number-citation ref-id="id2593437"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2593647">11.5. Other functionality</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2593647"><fo:page-number-citation ref-id="id2593647"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="Standards">12. Standards</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="Standards"><fo:page-number-citation ref-id="Standards"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.id2443598.Standards" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2593694">12.1. Scheme standards</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2593694"><fo:page-number-citation ref-id="id2593694"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2593768">12.2. Other relevant standards</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2593768"><fo:page-number-citation ref-id="id2593768"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="id2593831">Index</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader leader-pattern="dots" leader-pattern-width="3pt" leader-alignment="reference-area" keep-with-next.within-line="always"/> <fo:basic-link internal-destination="id2593831"><fo:page-number-citation ref-id="id2593831"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block id="LarcenyChapter"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Larceny</fo:marker><fo:block font-size="24.8832pt">1. Larceny</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny
implements the Scheme programming language
as defined by
<fo:basic-link internal-destination="Standards"><fo:inline>IEEE Standard 1178-1990</fo:inline></fo:basic-link>,
the
<fo:basic-link internal-destination="Standards"><fo:inline>Revised<fo:inline font-size="75%" vertical-align="super">5</fo:inline> Report</fo:inline></fo:basic-link>,
the
<fo:basic-link internal-destination="Standards"><fo:inline>Revised<fo:inline font-size="75%" vertical-align="super">6</fo:inline> Report</fo:inline></fo:basic-link>,
and
<fo:basic-link internal-destination="Standards"><fo:inline>ERR5RS</fo:inline></fo:basic-link>.
Those language standards serve as Larceny's primary documentation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This manual describes aspects of Larceny that are not described
by the IEEE standard, the Revised Reports, or ERR5RS.
For the most current version of this manual, please see
<fo:basic-link external-destination="http://larceny.ccs.neu.edu/doc">Larceny's online documentation page</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://larceny.ccs.neu.edu/doc">http://larceny.ccs.neu.edu/doc</fo:basic-link>]</fo:inline>.
For links to the Common Larceny User Manual and the Larceny
mailing list, please visit
<fo:basic-link external-destination="http://larceny.ccs.neu.edu/">Larceny's main web page</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://larceny.ccs.neu.edu/">http://larceny.ccs.neu.edu/</fo:basic-link>]</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To report bugs, please send email to the Larceny
developers at <fo:inline font-size="10pt" font-family="monospace">&lt;larceny@ccs.neu.edu&gt;</fo:inline>, or submit a
bug ticket using Larceny's
<fo:basic-link external-destination="http://larceny.ccs.neu.edu/trac/">Trac system</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://larceny.ccs.neu.edu/trac/">http://larceny.ccs.neu.edu/trac/</fo:basic-link>]</fo:inline>.</fo:block></fo:block><fo:block id="InstallationChapter"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Installing Larceny</fo:marker><fo:block font-size="24.8832pt">2. Installing Larceny</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="VarietiesSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Varieties of Larceny</fo:marker><fo:block font-size="20.736pt">2.1. Varieties of Larceny</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are three main varieties of Larceny.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Native Larceny is the fastest and most convenient variety
of Larceny.  It compiles directly to native machine code
for Intel x86-32 or SPARC microprocessors running Windows,
Linux, MacOS X, or Solaris operating systems.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Petit Larceny compiles to C instead of machine code.  It
runs on most Unix machines, including PowerPC Macintoshes
with MacOS X.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Common Larceny compiles to JIT-compiled IL on Microsoft's
Common Language Runtime (CLR) or Mono.  It provides access
to the .NET libraries from Scheme.</fo:block></fo:block><fo:block id="DownloadingSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Downloading</fo:marker><fo:block font-size="20.736pt">2.2. Downloading</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The current versions of Larceny are available for
download at
<fo:basic-link external-destination="http://larceny.ccs.neu.edu/">Larceny's main web page</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://larceny.ccs.neu.edu/">http://larceny.ccs.neu.edu/</fo:basic-link>]</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Twobit and Larceny are distributed in two forms: as a precompiled
binary, or as source code that can be used to reconstruct
any of the precompiled binary distributions.
Unless you intend to modify Larceny yourself, you do not
need to download the source code.</fo:block></fo:block><fo:block id="InstallationSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Installing the programs</fo:marker><fo:block font-size="20.736pt">2.3. Installing the programs</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you are installing or running Common Larceny, please
consult the
<fo:basic-link external-destination="http://larceny.ccs.neu.edu">Common Larceny User Manual</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://larceny.ccs.neu.edu">http://larceny.ccs.neu.edu</fo:basic-link>]</fo:inline>
instead of becoming confused by the instructions in this
manual.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Unpack the distribution files with an appropriate command such
as one of the following:</fo:block><fo:block id="id2523188" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">tar -xzf larceny-X.Y-bin-native-sparc-solaris.tar.gz
tar -xzf larceny-X.Y-bin-native-ia32-macosx.tar.gz
tar -xzf larceny-X.Y-bin-native-ia32-linux86.tar.gz
tar -xzf larceny-X.Y-bin-native-ia32-win32.tar.gz
tar -xzf larceny-X.Y-bin-petit-stdc-macosx.tar.gz
tar -xzf larceny-X.Y-src.tar.gz</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">That will create a directory with a similar name (but without
the <fo:inline font-size="10pt" font-family="monospace">.tar.gz</fo:inline> suffix) in your current working directory.
That is the Larceny root directory, which you may rename
to something shorter, such as <fo:inline font-size="10pt" font-family="monospace">larceny</fo:inline>; the rest of this
section will refer to it by that name.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Assuming you have unpacked a binary distribution, the <fo:inline font-size="10pt" font-family="monospace">larceny</fo:inline>
directory will contain the following files:</fo:block><fo:block id="id2523238" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">larceny.bin         Run-time system
larceny.heap        Heap image with all libraries, FFI, and compiler
larceny             Shell script that runs larceny.heap
scheme-script       Shell script that runs Scheme scripts
compile-stale       Scheme script that compiles ERR5RS/R6RS libraries
startup.sch         Pathnames for the require and autoload features</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you unpacked a binary distribution, then you should be able to
run it immediately by making the <fo:inline font-size="10pt" font-family="monospace">larceny</fo:inline> directory your current
working directory and invoking <fo:inline font-size="10pt" font-family="monospace">./larceny</fo:inline> or perhaps just <fo:inline font-size="10pt" font-family="monospace">larceny</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you unpacked the source code there will be many other files and
directories, but <fo:inline font-size="10pt" font-family="monospace">larceny.bin</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">larceny.heap</fo:inline> will not be present.</fo:block><fo:block id="id2523300" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Tip</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can reconstruct the <fo:inline font-size="10pt" font-family="monospace">larceny.bin</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">larceny.heap</fo:inline> files from their
source code, but that process requires a working version of Larceny
or PLT Scheme v37x; unless you're porting Larceny or Petit Larceny to a
brand new target architecture, it's easier to obtain those
files from a binary distribution of Larceny.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You may add the <fo:inline font-size="10pt" font-family="monospace">larceny</fo:inline> directory to your standard path,
or you may install Larceny into a directory that is already
part of your standard path.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Suppose, for example, that you want to install Larceny
in <fo:inline font-size="10pt" font-family="monospace">/usr/local/bin</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">/usr/local/lib/larceny</fo:inline>.
Copy <fo:inline font-size="10pt" font-family="monospace">larceny</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">scheme-script</fo:inline> to <fo:inline font-size="10pt" font-family="monospace">/usr/local/bin</fo:inline>
and edit the definition of <fo:inline font-size="10pt" font-family="monospace">LARCENY_PATH</fo:inline> at the head
of each file to point to the correct directory:</fo:block><fo:block id="id2523382" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">LARCENY_PATH=/usr/local/lib/larceny</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Then move the entire <fo:inline font-size="10pt" font-family="monospace">larceny</fo:inline> directory to <fo:inline font-size="10pt" font-family="monospace">/usr/local/lib/larceny</fo:inline>,
or copy <fo:inline font-size="10pt" font-family="monospace">larceny.bin</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">larceny.heap</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">startup.sch</fo:inline>, and the <fo:inline font-size="10pt" font-family="monospace">lib</fo:inline>
directory to <fo:inline font-size="10pt" font-family="monospace">/usr/local/lib/larceny</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You should now be able to run Larceny from any directory
by typing "<fo:inline font-size="10pt" font-family="monospace">larceny</fo:inline>" at a prompt.</fo:block></fo:block><fo:block id="CompilingStdLibSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Compiling the R6RS standard libraries</fo:marker><fo:block font-size="20.736pt">2.4. Compiling the R6RS standard libraries</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Before you can run Larceny in ERR5RS or R6RS modes, you may
have to compile the ERR5RS/R6RS runtime and standard libraries.
This step is definitely required if you are using Petit Larceny
or building any variety of Larceny from source code.
With the prebuilt native varieties of Larceny, however, this step
should not be necessary unless you change one of the files in
<fo:inline font-size="10pt" font-family="monospace">lib/R6RS</fo:inline> or <fo:inline font-size="10pt" font-family="monospace">lib/SRFI</fo:inline>.</fo:block><fo:block id="id2523595" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Tip</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the <fo:inline font-size="10pt" font-family="monospace">lib/R6RS</fo:inline> directory and its subdirectories are read-only,
then the standard libraries will not be touched, modified, or
recompiled by accident.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Compiling the ERR5RS/R6RS runtime and standard libraries is
accomplished as follows:</fo:block><fo:block id="id2523618" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    $ ./larceny
    Larceny v0.96 "Fluoridation" (...)
    &gt; (require 'r6rsmode)
    &gt; (larceny:compile-r6rs-runtime)
    &gt; (exit)</fo:block><fo:block id="id2523629" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Compiling the ERR5RS/R6RS runtime as shown above causes
all previously compiled ERR5RS/R6RS libraries and top-level
programs to become <fo:basic-link internal-destination="CompilingChapter"><fo:inline>stale</fo:inline></fo:basic-link>.  That means
those previously compiled files will need to be recompiled
or removed.</fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="RunningChapter"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Running Larceny</fo:marker><fo:block font-size="24.8832pt">3. Running Larceny</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny runs in any of four distinct modes:</fo:block><fo:block id="id2523664" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">R5RS              traditional read/eval/print loop (the default)
ERR5RS            ERR5RS read/eval/print loop
R6RS              batch execution of R6RS top-level programs
Scheme script     batch execution of R6RS Scheme scripts</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These modes correspond to the four distinct kinds of Scheme
programs that are described by the current de facto standards
for Scheme.  (IEEE/ANSI Std 1178 is so similar to the R5RS
standard that Larceny implements both languages in R5RS mode.)</fo:block><fo:block id="R5rsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">R5RS mode</fo:marker><fo:block font-size="20.736pt">3.1. R5RS mode</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When you start Larceny in R5RS mode (the default), you
will be presented with a banner message and the
read-eval-print loop's prompt:</fo:block><fo:block id="id2523705" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    % larceny
    Larceny vX.Y "&lt;version_name&gt;" (MMM DD YYYY HH:MM:SS, ...)
    larceny.heap, built ...

    &gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can enter a Scheme expression at the prompt.
After a complete expression has been read, it will
be evaluated and its results printed.</fo:block><fo:block id="id2523721" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In native Larceny, the expression is evaluated by
compiling it to native machine code, which is then executed.
In Petit Larceny, the expression is evaluated by
an interpreter because compiling to C, running the
C compiler, and loading the compiled C code would
take too long.  Interpreted code behaves like compiled code,
so most of what this manual says about the compiler is also
true of Petit Larceny's interpreter.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">By default, Larceny's Twobit compiler makes several
assumptions that allow it to generate faster code;
for example, the compiler assumes Scheme's standard
procedures will not be redefined.
To obtain strict conformance to R5RS semantics, see
the section of this user manual devoted to
<fo:basic-link internal-destination="PerformanceSection"><fo:inline>performance</fo:inline></fo:basic-link>.</fo:block></fo:block><fo:block id="Err5rsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">ERR5RS mode</fo:marker><fo:block font-size="20.736pt">3.2. ERR5RS mode</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To interact with Larceny's ERR5RS read/eval/print loop,
specify the <fo:inline font-size="10pt" font-family="monospace">-err5rs</fo:inline> option on Larceny's command line:</fo:block><fo:block id="id2523778" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    % larceny -err5rs
    Larceny v0.95 "First Safety" (...)
    ERR5RS mode (no libraries have been imported)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Since no libraries have been imported, the only forms you
can evaluate are constant literals, variable references
(but no variables have been imported!), procedure calls
(but no procedure values are accessible!), library
definitions, and import forms.  The first thing you'll
want to do is to import some libraries, such as:</fo:block><fo:block id="id2523798" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    &gt; (import (rnrs base)
              (rnrs io simple)
              (err5rs records syntactic))</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Once you have imported <fo:inline font-size="10pt" font-family="monospace">(rnrs base)</fo:inline> or a composite library
that includes it, you can evaluate definitions and use
all other syntax and variables you have imported.</fo:block><fo:block id="Err5rsAutomaticLoadingSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.2.1. Automatic loading</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As an extension to ERR5RS, Larceny attempts to load
libraries automatically when they are first imported.
Autoloading makes interactive development and
<fo:basic-link internal-destination="CompilingChapter"><fo:inline>separate compilation</fo:inline></fo:basic-link>
much more convenient.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All of Larceny's
<fo:basic-link internal-destination="Err5rsPreDefinedSection"><fo:inline>predefined libraries</fo:inline></fo:basic-link>
can be autoloaded.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To enable autoloading of other ERR5RS/R6RS libraries,
you can:</fo:block><fo:list-block id="id2523857" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2523859" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
use the <fo:basic-link internal-destination="R6RSLibraryPathSection"><fo:inline><fo:inline font-size="10pt" font-family="monospace">-path</fo:inline> command-line option</fo:inline></fo:basic-link>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2523877" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
use the <fo:basic-link internal-destination="R6RSLibraryVariableSection"><fo:inline><fo:inline font-size="10pt" font-family="monospace">LARCENY_LIBPATH</fo:inline></fo:inline></fo:basic-link> environment variable
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2523895" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
use <fo:basic-link internal-destination="current-require-path"><fo:inline><fo:inline font-size="10pt" font-family="monospace">current-require-path</fo:inline></fo:inline></fo:basic-link>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2523912" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
edit <fo:inline font-size="10pt" font-family="monospace">startup.sch</fo:inline> in Larceny's root directory
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2523925" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
add the libraries to Larceny's <fo:inline font-size="10pt" font-family="monospace">lib</fo:inline> directory
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block id="Err5rsDynamicLoadingSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.2.2. Dynamic loading</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny automatically loads ERR5RS/R6RS libraries when
they are first imported.  This is usually the most
convenient way to load a library, but autoloading
can't be used to load a top-level program.  Explicit
loading is needed for top-level programs, for libraries
that don't reside in Larceny's
<fo:basic-link internal-destination="current-require-path"><fo:inline><fo:inline font-size="10pt" font-family="monospace">current-require-path</fo:inline></fo:inline></fo:basic-link>,
and for libraries that are defined in files whose names
do not follow Larceny's
<fo:basic-link internal-destination="NamingChapter"><fo:inline>standard naming conventions</fo:inline></fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Explicit loading is the only portable way for ERR5RS
programs to load a library.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Explicit loading also makes it possible to write portable
programs whose source files conform to both the R5RS and
ERR5RS.  Two different configuration files, one for the
R5RS and one for ERR5RS, can perform all of the imports
and loads needed to run the program.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For explicit loading of nonstandard libraries, top-level
programs, or unadorned R5RS-style code from a file, you
must first import a suitable load procedure:</fo:block><fo:block id="id2524005" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    &gt; (import (err5rs load))</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Loading a library does not automatically import it.
To use the variables and syntax that are exported by a
library, you must import that library explicitly:</fo:block><fo:block id="id2573198" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    &gt; (load "lib/R6RS/larceny/benchmarking.sls")
    &gt; (import (larceny benchmarking))
    &gt; (time (vector-for-each + (make-vector 1000000 0)))
    Words allocated: 3095752
    Words reclaimed: 0
    Elapsed time...: 111 ms (User: 104 ms; System: 8 ms)
    Elapsed GC time: 4 ms (CPU: 4 in 8 collections.)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Larceny, you may omit the call to <fo:inline font-size="10pt" font-family="monospace">load</fo:inline> because the
<fo:inline font-size="10pt" font-family="monospace">(larceny benchmarking)</fo:inline> library will be autoloaded when
it is imported.  In other ERR5RS systems, however, you
may have to load all of the nonstandard libraries that will
be imported by a top-level program or library before you
load that top-level program or library.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You do not have to import those libraries into the ERR5RS
top level, however, unless you want to use the variables
and syntax exported by those libraries in the expressions
and definitions you evaluate at the top level.</fo:block></fo:block><fo:block id="Err5rsPreDefinedSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.2.3. Predefined libraries</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny predefines several nonstandard libraries in addition
to the standard ERR5RS and R6RS libraries, and autoloads them
for your convenience.  The predefined, autoloadable libraries
include:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">R6RS standard libraries:</fo:block><fo:block id="id2573255" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(rnrs base (6))                        ; R6RS chapter 9
(rnrs unicode (6))                     ; R6RS library chapter 1
(rnrs bytevectors (6))                 ; R6RS library chapter 2
(rnrs lists (6))                       ; R6RS library chapter 3
(rnrs sorting (6))                     ; R6RS library chapter 4
(rnrs control (6))                     ; R6RS library chapter 5
(rnrs exceptions (6))                  ; R6RS library section 7.1
(rnrs conditions (6))                  ; R6RS library sections 7.2 and 7.3
(rnrs io ports (6))                    ; R6RS library sections 8.1 and 8.2
(rnrs io simple (6))                   ; R6RS library sections 8.1 and 8.3
(rnrs files (6))                       ; R6RS library chapter 9
(rnrs programs (6))                    ; R6RS library chapter 10
(rnrs arithmetic fixnums (6))          ; R6RS library section 11.2
(rnrs arithmetic flonums (6))          ; R6RS library section 11.3
(rnrs arithmetic bitwise (6))          ; R6RS library section 11.4
(rnrs syntax-case (6))                 ; R6RS library chapter 12
(rnrs hashtables (6))                  ; R6RS library chapter 13
(rnrs enums)                           ; R6RS library chapter 14
(rnrs (6))                             ; R6RS library chapter 15
(rnrs eval (6))                        ; R6RS library chapter 16
(rnrs mutable-pairs (6))               ; R6RS library chapter 17
(rnrs mutable-strings (6))             ; R6RS library chapter 18
(rnrs r5rs (6))                        ; R6RS library chapter 19</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">R6RS standard libraries that are autoloadable but deprecated in Larceny:</fo:block><fo:block id="id2573315" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(rnrs records procedural (6))          ; R6RS library section 6.3
(rnrs records inspection (6))          ; R6RS library section 6.4
(rnrs records syntactic (6))           ; R6RS library section 6.2</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">SRFI libraries (which follow the SRFI 97 naming convention):</fo:block><fo:block id="id2573331" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(srfi :1 lists)                        ; list library
(srfi :2 and-let*)                     ; extended `and` and `let*`
(srfi :5 let)                          ; extended version of `let`
(srfi :6 basic-string-ports)           ; basic string ports
(srfi :8 receive)                      ; binding to multiple values
(srfi :9 records)                      ; defining record types
(srfi :11 let-values)                  ; syntax for multiple values
(srfi :13 strings)                     ; string libraries
(srfi :14 char-set)                    ; character-set library
(srfi :16 case-lambda)                 ; syntax for variable arity
(srfi :17 generalized-set!)            ; generalized set!
(srfi :19 time)                        ; time data types and procedures
(srfi :23 error)                       ; error reporting mechanism
(srfi :25 multi-dimensional-arrays)    ; multi-dimensional array primitives
(srfi :26 cut)                         ; specializing without currying
(srfi :27 random-bits)                 ; sources of random bits
(srfi :28 basic-format-strings)        ; basic format strings
(srfi :29 localization)                ; localization
(srfi :38 with-shared-structure)       ; i/o for data with shared structure
(srfi :39 parameters)                  ; parameter objects
(srfi :41 streams)                     ; streams
(srfi :42 eager-comprehensions)        ; eager comprehensions
(srfi :43 vectors)                     ; vector library
(srfi :45 lazy)                        ; iterative lazy algorithms
(srfi :48 intermediate-format-strings) ; format
(srfi :51 rest-values)                 ; rest values hackery
(srfi :54 cat)                         ; still more formatting
(srfi :59 vicinities)                  ; vicinity
(srfi :61 cond)                        ; a more general cond clause
(srfi :63 arrays)                      ; homogeneous, heterogeneous arrays
(srfi :64 testing)                     ; an API for test suites
(srfi :67 compare-procedures)          ; three-way comparison procedures
(srfi :78 lightweight-testing)         ; lightweight testing
(srfi :87 case)                        ; a more general case clause
(srfi :98 os-environment-variables)    ; environment variables
(srfi :99 records)                     ; ERR5RS records (composite library)
(srfi :99 records procedural)          ; ERR5RS records (procedural API)
(srfi :99 records inspection)          ; ERR5RS records (inspection API)
(srif :99 records syntactic)           ; ERR5RS records (syntactic API)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">SRFI libraries that are autoloadable but deprecated in Larceny,
usually because they have been superseded in whole or in part by
R6RS syntax or libraries:</fo:block><fo:block id="id2573392" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(srfi :60 integer-bits)                ; integers as bits
(srfi :66 octet-vectors)               ; octet vectors
(srfi :69 basic-hash-tables)           ; basic hash tables
(srfi :71 let)                         ; extensions of let, let*, letrec
(srfi :74 blobs)                       ; octet-addressed binary blocks
(srfi :86 mu-and-nu)                   ; mu and nu simulating values etc
(srfi :95 sorting-and-merging)         ; sorting and merging</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Other autoloadable libraries:</fo:block><fo:block id="id2573414" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(err5rs records procedural)            ; ERR5RS records (procedural API)
(err5rs records inspection)            ; ERR5RS records (inspection API)
(err5rs records syntactic)             ; ERR5RS records (syntactic API)
(err5rs load)                          ; ERR5RS load procedure
(rnrs load)                            ; equivalent to (err5rs load)
(larceny load)                         ; extension of (err5rs load)
(larceny compiler)                     ; separate compilation (ERR5RS/R6RS)
(larceny benchmarking)                 ; timing facilities
(larceny profiling)                    ; profiling of Scheme code
(larceny records printer)              ; custom printing of records
(larceny shivers-syntax)               ; syntax favored by Olin Shivers
(r5rs)                                 ; approximates the R5RS top level
(explicit-renaming)                    ; macros with explicit renaming</fo:block></fo:block><fo:block id="ERR5RSLibraryPathSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.2.4. Library path</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny's autoload feature locates ERR5RS/R6RS libraries
by performing a depth-first search of the directories
that belong to Larceny's
<fo:basic-link internal-destination="current-require-path"><fo:inline><fo:inline font-size="10pt" font-family="monospace">current-require-path</fo:inline></fo:inline></fo:basic-link>.
Libraries will not be autoloaded unless they are defined
in files whose names follow
<fo:basic-link internal-destination="LibraryTranslationSection"><fo:inline>Larceny's standard conventions</fo:inline></fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The
<fo:basic-link internal-destination="current-require-path"><fo:inline><fo:inline font-size="10pt" font-family="monospace">current-require-path</fo:inline></fo:inline></fo:basic-link>
is initialized by the <fo:inline font-size="10pt" font-family="monospace">startup.sch</fo:inline> file in Larceny's root
directory.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link internal-destination="R6RSLibraryPathSection"><fo:inline>Larceny's <fo:inline font-size="10pt" font-family="monospace">-path</fo:inline> command-line option</fo:inline></fo:basic-link>
adds one or more directories to the directories in the
<fo:basic-link internal-destination="current-require-path"><fo:inline><fo:inline font-size="10pt" font-family="monospace">current-require-path</fo:inline></fo:inline></fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:basic-link internal-destination="R6RSLibraryVariableSection"><fo:inline><fo:inline font-size="10pt" font-family="monospace">LARCENY_LIBPATH</fo:inline></fo:inline></fo:basic-link>
environment variable can also be used to add one or more directories
to the directories in the
<fo:basic-link internal-destination="current-require-path"><fo:inline><fo:inline font-size="10pt" font-family="monospace">current-require-path</fo:inline></fo:inline></fo:basic-link>.</fo:block></fo:block><fo:block id="ERR5RSprimitivesSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.2.5. Importing Larceny's standard procedures</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Any of Larceny's R5RS-mode top-level procedures can be imported
into an ERR5RS or R6RS library or program by using an import
declaration with a <fo:inline font-size="10pt" font-family="monospace">primitives</fo:inline> clause that names the R5RS
procedures to be imported.  For example:</fo:block><fo:block id="id2573567" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    (import (primitives random current-seconds
                        getenv setenv system
                        current-directory file-modification-time
                        system-features vector-like-cas!)
            (rnrs base)
            (rnrs control))</fo:block><fo:block id="id2573580" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This feature is non-portable.
Other implementations of ERR5RS or the R6RS may not even
have an underlying implementation of the R5RS.</fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="R6rsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">R6RS mode</fo:marker><fo:block font-size="20.736pt">3.3. R6RS mode</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To execute a top-level R6RS program that is contained
within a file named <fo:inline font-size="10pt" font-family="monospace">pgm</fo:inline>, type:</fo:block><fo:block id="id2573610" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    larceny -r6rs -program pgm</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">-program</fo:inline> option can be omitted, in which case
Larceny will read the top-level program from standard
input:</fo:block><fo:block id="id2573628" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    larceny -r6rs &lt; pgm</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you omit the <fo:inline font-size="10pt" font-family="monospace">-program</fo:inline> option and do not redirect
standard input, then Larceny will wait patiently
for you to type a complete top-level program into
standard input, terminating it with an end-of-file.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You probably don't want to do that.  Had you wanted
to type R6RS code at Larceny, you'd be using ERR5RS
mode instead.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">By default, Larceny's Twobit compiler uses settings
that make good sense for production code but violate
some absolute requirements of the R6RS.  For maximal
adherence to R6RS requirements (at the expense of
portability, interoperability, and/or performance),
see the discussion of
<fo:basic-link internal-destination="compiler-switches"><fo:inline><fo:inline font-size="10pt" font-family="monospace">compiler-switches</fo:inline></fo:inline></fo:basic-link>
in the section on the
<fo:basic-link internal-destination="LarcenyCompilerSection"><fo:inline><fo:inline font-size="10pt" font-family="monospace">(larceny compiler)</fo:inline></fo:inline></fo:basic-link>
library.</fo:block><fo:block id="R6rsPreDefinedSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.3.1. Predefined libraries</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The R6RS standard does not specify any way for a
top-level program to define its own libraries.
Portable R6RS programs are therefore limited to
importing a subset of the R6RS standard libraries.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As an extension to the R6RS, Larceny allows R6RS
top-level programs and Scheme scripts to import
any libraries that are
<fo:basic-link internal-destination="Err5rsPreDefinedSection"><fo:inline>predefined in Larceny's ERR5RS mode</fo:inline></fo:basic-link>.</fo:block></fo:block><fo:block id="R6RSLibraryPathSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.3.2. Library path</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As another extension to the R6RS, Larceny allows
R6RS top-level programs to import any libraries
that can be found in the directories specified by the
<fo:inline font-size="10pt" font-family="monospace">-path</fo:inline> option on Larceny's command line using
<fo:basic-link internal-destination="LibraryTranslationSection"><fo:inline>Larceny's standard translation</fo:inline></fo:basic-link>
from library names to file names.
On most systems, you can specify multiple directories
by separating them with a colon; under Windows, use a
semicolon as separator instead.  The first directory
listed will be searched first.</fo:block><fo:block id="id2573752" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Tip</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you have a set of portable libraries that run under more than
one implementation of the R6RS, and you want to have a special
version of some of those libraries for Larceny, you can put all
your portable versions in one directory and the Larceny-specific
versions in another.  When you run Larceny, use the <fo:inline font-size="10pt" font-family="monospace">-path</fo:inline>
option and specify the Larceny-specific directory first.</fo:block></fo:block></fo:block><fo:block id="id2573776" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">-path</fo:inline> option cannot be used by Scheme scripts,
because command-line options are passed along to the Scheme
script without being interpreted by the <fo:inline font-size="10pt" font-family="monospace">scheme-script</fo:inline> processor.</fo:block></fo:block></fo:block><fo:block id="id2573796" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We emphasize that this extension is non-portable.
Other implementations of the R6RS may not provide
anything comparable to Larceny's <fo:inline font-size="10pt" font-family="monospace">-path</fo:inline> option.
Even if they do, their mappings from library names
to file names may be incompatible with Larceny's.</fo:block></fo:block></fo:block></fo:block><fo:block id="R6RSLibraryVariableSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.3.3. Library environment variable</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As another extension to the R6RS, Larceny allows
R6RS top-level programs to import any libraries
that can be found in directories specified by the
<fo:inline font-size="10pt" font-family="monospace">LARCENY_LIBPATH</fo:inline> environment variable.
The value of that environment variable should be
a string in the same format as for Larceny's <fo:inline font-size="10pt" font-family="monospace">-path</fo:inline>
command-line option, described above.</fo:block><fo:block id="id2573842" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We emphasize that this extension is non-portable.
Other implementations of the R6RS may not support
anything comparable to Larceny's <fo:inline font-size="10pt" font-family="monospace">LARCENY_LIBPATH</fo:inline>
environment variable.
Even if they do, their mappings from library names
to file names may be incompatible with Larceny's.</fo:block></fo:block></fo:block></fo:block><fo:block id="DefiningLibrariesSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.3.4. Defining libraries</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As an extension to the R6RS, Larceny allows a top-level
program or Scheme script to define R6RS libraries within
the file that contains the top-level program or Scheme
script, before the import form that begins the top-level
program.  These libraries must be arranged so that no
library depends upon libraries that come later in the
file.</fo:block><fo:block id="id2573880" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We emphasize that this extension is non-portable.
Other implementations of the R6RS may not allow
R6RS programs to define their own libraries.</fo:block></fo:block></fo:block></fo:block><fo:block id="id2573891"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.3.5. Importing procedures from Larceny's underlying R5RS system</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">As an extension to the R6RS, Larceny allows any of the
procedures that are predefined at top level in Larceny's
R5RS mode to be imported by using
<fo:basic-link internal-destination="ERR5RSprimitivesSection"><fo:inline>a <fo:inline font-size="10pt" font-family="monospace">primitives</fo:inline> clause</fo:inline></fo:basic-link>
in an <fo:inline font-size="10pt" font-family="monospace">import</fo:inline> declaration.</fo:block><fo:block id="id2573920" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This extension is highly non-portable.
Other implementations of the R6RS may not even
have an underlying implementation of the R5RS.</fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="SchemeScriptsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Scheme scripts</fo:marker><fo:block font-size="20.736pt">3.4. Scheme scripts</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On most Unix systems (including MacOS X and Linux), Larceny's
<fo:inline font-size="10pt" font-family="monospace">scheme-script</fo:inline> will execute Scheme scripts as described in R6RS
non-normative appendix D, with or without the optional script
header.  To make Scheme scripts executable in their own
right, without executing <fo:inline font-size="10pt" font-family="monospace">scheme-script</fo:inline> directly, add Larceny's
root directory to your path as described in <fo:inline font-size="10pt" font-family="monospace">doc/HOWTO-INSTALL</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Suppose, for example, that <fo:inline font-size="10pt" font-family="monospace">/home/myself/hello</fo:inline> is an R6RS
Scheme script whose first line is the optional script header
shown below:</fo:block><fo:block id="id2573977" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">#!/usr/bin/env scheme-script</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you do not have execute permission for this script,
or Larceny's root directory is not in your path,
you can still run the script from
Larceny's root directory as follows:</fo:block><fo:block id="id2573990" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    % ./scheme-script /home/myself/hello</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you have execute permission for the script, and Larceny's
root directory is in your path, you can also run the
script as follows:</fo:block><fo:block id="id2574003" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    % /home/myself/hello</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If, in addition, the directory that contains the script is
in your path, you can run the script as follows:</fo:block><fo:block id="id2574015" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    % hello</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You may also pass command-line arguments to a Scheme script.</fo:block><fo:block id="id2574024" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We emphasize that Scheme scripts are not portable.
Scheme scripts are specified only by a non-binding appendix
to the R6RS, not by the R6RS proper.
Other implementations of the R6RS may not support Scheme
scripts at all, or may give them a semantics incompatible
with Larceny's.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On Unix systems, standard input and output can be redirected
in the usual way.  In Larceny, standard input corresponds to
the textual port initially returned by <fo:inline font-size="10pt" font-family="monospace">current-input-port</fo:inline>,
and standard output corresponds to the textual port initially
returned by <fo:inline font-size="10pt" font-family="monospace">current-output-port</fo:inline>.</fo:block><fo:block id="id2574060" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We emphasize that redirection of standard input and output
is non-portable.
Other implementations of the R6RS may not allow redirection,
or may identify the standard input and output with ports
other than those initially returned by <fo:inline font-size="10pt" font-family="monospace">current-input-port</fo:inline>
and <fo:inline font-size="10pt" font-family="monospace">current-output-port</fo:inline>.</fo:block></fo:block></fo:block></fo:block><fo:block id="R5rsScriptSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">R5RS scripting</fo:marker><fo:block font-size="20.736pt">3.5. R5RS scripting</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Suppose <fo:inline font-size="10pt" font-family="monospace">hello.sch</fo:inline> contains the following R5RS code:</fo:block><fo:block id="id2574102" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    (display "Hello world!")
    (newline)
    (exit)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can run <fo:inline font-size="10pt" font-family="monospace">hello.sch</fo:inline> as a script by executing Larceny as
follows:</fo:block><fo:block id="id2574118" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    % larceny -nobanner -- hello.sch</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can redirect Larceny's standard input, in which case
you may want to eliminate the herald announcement and the
read/eval/print loop's prompt:</fo:block><fo:block id="id2574132" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    % larceny -nobanner -- -e "(begin (herald #f) (repl-prompt values))" \
              &lt; hello.sch</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For an explanation of why that works, which may suggest other
creative uses of Larceny, ask for help:</fo:block><fo:block id="id2574146" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    % larceny -help</fo:block></fo:block><fo:block id="ErrorsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Errors</fo:marker><fo:block font-size="20.736pt">3.6. Errors</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In R6RS modes, errors should result in an error message
followed by a clean exit from the program.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If your program encounters an error in an interactive mode
(R5RS or ERR5RS), it will enter the debugger; this is
believed to be a feature.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Despite its crudity, and to some extent because of it,
Larceny's debugger works at least as well with optimized
compiled code as with interpreted code.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If you type a question mark at the debugger prompt, the
debugger will print a help message.  That message is more
helpful if you understand the Twobit compiler and
Larceny's internal representations and invariants, but
this manual is not the place to explain those things.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The debugging context is saved so you can exit the debugger
and re-enter it from the main read/eval/print loop's prompt:</fo:block><fo:block id="id2574201" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    &gt; (debug)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The debugger is pretty much a prototype; you don't need to
tell us how bad it is.</fo:block></fo:block><fo:block id="id2574214"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Troubleshooting</fo:marker><fo:block font-size="20.736pt">3.7. Troubleshooting</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="id2574219"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.7.1. Errors when starting Larceny</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When attempting to run an R6RS program, you may see
a warning about "<fo:inline font-size="10pt" font-family="monospace">loading source in favor of stale
fasl file</fo:inline>",
following by a long series of error messages about
syntactic keywords used as a variable, ending with
the kind of error you'd expect to see when a large
R6RS program is fed to a Scheme compiler that was
expecting to see R5RS-compatible code.  That means
the R6RS runtime and standard libraries were not
installed correctly, or their source files have been
touched or modified since they were last compiled.
To fix the problem,
<fo:basic-link internal-destination="CompilingStdLibSection"><fo:inline>recompile the R6RS standard libraries</fo:inline></fo:basic-link> as described in step 4 of <fo:inline font-size="10pt" font-family="monospace">doc/HOWTO-BUILD</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The precompiled binary forms of Larceny should run on
most machines with the appropriate processor and operating
system, but the executable program "<fo:inline font-size="10pt" font-family="monospace">larceny.bin</fo:inline>" may be
incompatible with very old or with very new versions of
the processor or operating system.  If that appears to be
the case, you should see whether a newer version of Larceny
fixes the problem.  If not, please report the problem
to us at <fo:inline font-size="10pt" font-family="monospace">larceny@ccs.neu.edu</fo:inline>.
Please report success stories as well.</fo:block></fo:block><fo:block id="id2574288"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.7.2. Errors when compiling the ERR5RS/R6RS runtime</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If something goes wrong while
<fo:basic-link internal-destination="CompilingStdLibSection"><fo:inline>compiling the ERR5RS/R6RS runtime</fo:inline></fo:basic-link>,
make sure you are running the copy of Larceny you think
you are running and have read and write permission
for <fo:inline font-size="10pt" font-family="monospace">lib/R6RS</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">lib/SRFI</fo:inline>, and all their subdirectories and files.
If you get an error message about something being
"<fo:inline font-size="10pt" font-family="monospace">expanded against a different build of this library</fo:inline>",
then one or more of the compiled files in <fo:inline font-size="10pt" font-family="monospace">lib/R6RS</fo:inline> or <fo:inline font-size="10pt" font-family="monospace">lib/SRFI</fo:inline>
or its subdirectories has gone
<fo:basic-link internal-destination="CompilingChapter"><fo:inline>stale</fo:inline></fo:basic-link>.
Removing all <fo:inline font-size="10pt" font-family="monospace">.slfasl</fo:inline> files from <fo:inline font-size="10pt" font-family="monospace">lib/R6RS</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">lib/SRFI</fo:inline> and
their subdirectories will eliminate the stale file(s).</fo:block><fo:block id="id2574363" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Don't remove the <fo:inline font-size="10pt" font-family="monospace">.sch</fo:inline> or <fo:inline font-size="10pt" font-family="monospace">.sls</fo:inline> files.</fo:block></fo:block></fo:block></fo:block><fo:block id="AutoLoadErrorsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.7.3. Autoloading errors</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If Larceny attempts to autoload an imported ERR5RS/R6RS
library but cannot find the library, then the library
may be defined in a file that doesn't follow
<fo:basic-link internal-destination="NamingChapter"><fo:inline>Larceny's standard naming conventions</fo:inline></fo:basic-link>.
Another possibility is that the <fo:inline font-size="10pt" font-family="monospace">-path</fo:inline> option was
omitted or incorrect.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If an ERR5RS/R6RS library is compiled, then all compiled
libraries and top-level programs that depend upon it must
also be recompiled.  In particular, recompiling the standard
R6RS runtime will invalidate all compiled libraries and
top-level programs.  Larceny's <fo:inline font-size="10pt" font-family="monospace">compile-stale</fo:inline> script
and the
<fo:basic-link internal-destination="compile-stale-libraries"><fo:inline><fo:inline font-size="10pt" font-family="monospace">compile-stale-libraries</fo:inline></fo:inline></fo:basic-link>
procedure of <fo:inline font-size="10pt" font-family="monospace">(larceny compiler)</fo:inline> make it convenient
to recompile all of the libraries and top-level
programs within any given directory in an order
consistent with their dependencies.</fo:block></fo:block><fo:block id="CrashesSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">3.7.4. Crashes</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Please report all crashes with as much information is possible;
a backtrace from a debugger or a core dump is ideal (but please
do not mail the core dump without contacting us first).
Larceny's run-time system is compiled with full debugging
information by default and a debugger like GDB should be able
to provide at least some clues.</fo:block></fo:block></fo:block><fo:block id="PerformanceSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Performance</fo:marker><fo:block font-size="20.736pt">3.8. Performance</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">By default, Larceny's Twobit compiler makes several
assumptions that allow it to generate faster code;
for example, the compiler assumes Scheme's standard
procedures will not be redefined.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To disable certain compiler optimizations that are
incompatible with the R6RS, see the section that
describes the
<fo:basic-link internal-destination="LarcenyCompilerSection"><fo:inline><fo:inline font-size="10pt" font-family="monospace">(larceny compiler)</fo:inline> library</fo:inline></fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To obtain strict conformance to R5RS semantics at
the expense of slower code, evaluate the expression</fo:block><fo:block id="id2574508" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    (compiler-switches 'standard)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To make the compiler generate faster code, you can promise not to
redefine standard procedures <fo:inline font-style="italic">and</fo:inline> not to redefine any top-level
procedure while it is running. To make this promise, evaluate</fo:block><fo:block id="id2574527" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">        (compiler-switches 'fast-safe)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To view the current settings of Twobit's numerous compiler switches,
evaluate</fo:block><fo:block id="id2574539" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">        (compiler-switches)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All of Twobit's compiler switches are procedures whose setting
can be changed by passing the new value of the switch as an
argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For more information, evaluate</fo:block><fo:block id="id2574555" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">        (help)</fo:block><fo:block id="id2574560" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Some of the help information that will be printed may be
irrelevant to the heap image you are using.</fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="LexicalChapter"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Lexical syntax</fo:marker><fo:block font-size="24.8832pt">4. Lexical syntax</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny's default lexical syntax extends the lexical syntax
required by the R5RS, R6RS, and ERR5RS <fo:basic-link internal-destination="Standards"><fo:inline>standards</fo:inline></fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The R6RS forbids most lexical extensions, however, so Larceny
provides several mechanisms for turning its lexical extensions
on and off.</fo:block><fo:block id="FlagsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Flags</fo:marker><fo:block font-size="20.736pt">4.1. Flags</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">By default, Larceny recognizes several Larceny-specific flags
of the form permitted by the R6RS.  The flag you are most
likely to encounter represents one of Larceny's unspecified
values:</fo:block><fo:block id="id2574614" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    #!unspecified</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Certain other flags have special meanings to Larceny's
<fo:inline font-size="10pt" font-family="monospace">read</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">get-datum</fo:inline> procedures.  They are described below.</fo:block></fo:block><fo:block id="CaseFoldingSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Case-sensitivity</fo:marker><fo:block font-size="20.736pt">4.2. Case-sensitivity</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">By default, Larceny is case-sensitive.
This global default can be overridden by specifying
<fo:inline font-size="10pt" font-family="monospace">—foldcase</fo:inline> or <fo:inline font-size="10pt" font-family="monospace">—nofoldcase</fo:inline> on Larceny's command line,
or by changing the value of Larceny's <fo:inline font-size="10pt" font-family="monospace">case-sensitive?</fo:inline> parameter.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The case-sensitivity of a particular textual input port
is affected by reading one of the following flags from
the port using the <fo:inline font-size="10pt" font-family="monospace">read</fo:inline> or <fo:inline font-size="10pt" font-family="monospace">get-datum</fo:inline> procedures:</fo:block><fo:block id="id2574686" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    #!fold-case
    #!no-fold-case</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">#!fold-case</fo:inline> flag enables case-folding on data read from
the port by the <fo:inline font-size="10pt" font-family="monospace">read</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">get-datum</fo:inline> procedures, while the
<fo:inline font-size="10pt" font-family="monospace">#!no-fold-case</fo:inline> flag disables case-folding.  The behavior
established by one of these flags extends to the next flag
read from the port by <fo:inline font-size="10pt" font-family="monospace">read</fo:inline> or <fo:inline font-size="10pt" font-family="monospace">get-datum</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Both <fo:inline font-size="10pt" font-family="monospace">#!fold-case</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">#!no-fold-case</fo:inline> evaluate to an
unspecified value.  To obtain the effect of one of these flags
while treating it as a comment, place <fo:inline font-size="10pt" font-family="monospace">#;</fo:inline> in front of the flag.</fo:block></fo:block><fo:block id="LexicalExtensionsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Lexical extensions</fo:marker><fo:block font-size="20.736pt">4.3. Lexical extensions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When a port is first opened, the Larceny-specific lexical
extensions that are accepted on the port are determined
by Larceny's <fo:basic-link internal-destination="LexicalParametersSection"><fo:inline>lexical parameters</fo:inline></fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The following flags change the case-sensitivity and lexical
extensions on the specific port from which they are read:</fo:block><fo:block id="id2574782" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    #!r6rs         ; implies #!no-fold-case, negates other flags
    #!r5rs         ; implies #!fold-case, #!err5rs
    #!err5rs       ; allows Larceny-specific extensions
    #!larceny      ; implies #!no-fold-case, #!err5rs</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">#!r6rs</fo:inline> flag is a comment, while all of Larceny's other
flags evaluate to an unspecified value.  To obtain the effect
of a flag other than <fo:inline font-size="10pt" font-family="monospace">#!r6rs</fo:inline> while treating it as a comment,
place <fo:inline font-size="10pt" font-family="monospace">#;</fo:inline> in front of the flag.</fo:block><fo:block id="id2574816" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The R6RS requires implementations to treat <fo:inline font-size="10pt" font-family="monospace">#!r6rs</fo:inline> as a
comment; it is the only flag that implementations of the R6RS
are required to treat as a comment.  Since the <fo:inline font-size="10pt" font-family="monospace">#!r6rs</fo:inline> flag
behaves differently from all other flags, it is deprecated.</fo:block></fo:block></fo:block></fo:block><fo:block id="LexicalParametersSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Lexical parameters</fo:marker><fo:block font-size="20.736pt">4.4. Lexical parameters</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When given no argument, these parameters return the current
default for some aspect of the lexical syntax that will be
accepted on newly created ports.
When given an argument, these procedures change the default
as specified by the argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="case-sensitive?"/>
<fo:inline font-style="italic"> Procedure case-sensitive?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2574871"><!--case-sensitive?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(case-sensitive? <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(case-sensitive? <fo:inline font-style="italic">boolean</fo:inline>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Determines whether newly created textual ports default to
case-sensitive.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="read-larceny-weirdness?"/>
<fo:inline font-style="italic"> Procedure read-larceny-weirdness?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2574918"><!--read-larceny-weirdness?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(read-larceny-weirdness? <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(read-larceny-weirdness? <fo:inline font-style="italic">boolean</fo:inline>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Determines whether newly created textual ports allow
Larceny's usual extensions to R5RS lexical syntax.
This parameter also determines whether newly created
ports allow <fo:inline font-size="10pt" font-family="monospace">#</fo:inline> as an insignificant digit; this is
required by the R5RS, but disallowed by the R6RS.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="read-traditional-weirdness?"/>
<fo:inline font-style="italic"> Procedure read-traditional-weirdness?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2574973"><!--read-traditional-weirdness?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(read-traditional-weirdness? <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(read-traditional-weirdness? <fo:inline font-style="italic">boolean</fo:inline>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Determines whether newly created textual ports allow
certain lexical extensions that are deprecated in Larceny.
These extensions include symbols enclosed by vertical
bars and read-time evaluation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For the current semantics of these parameters, please consult
the Larceny developers' web page that describes
<fo:basic-link external-destination="https://github.com/larcenists/larceny/wiki/LexicalConversion">Larceny's
lexical syntax</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="https://github.com/larcenists/larceny/wiki/LexicalConversion">https://github.com/larcenists/larceny/wiki/LexicalConversion</fo:basic-link>]</fo:inline>.</fo:block></fo:block></fo:block><fo:block id="NamingChapter"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">File naming conventions</fo:marker><fo:block font-size="24.8832pt">5. File naming conventions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="SuffixSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Suffixes</fo:marker><fo:block font-size="20.736pt">5.1. Suffixes</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Larceny, file names generally follow Unix conventions,
even on Windows.  The following suffixes have special
meanings to some components of Larceny.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">.sls</fo:inline>
is the preferred suffix for files that consist
of ERR5RS/R6RS-compatible library definitions.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">.sch</fo:inline>
is the preferred suffix for files that contain R5RS
source code.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">.scm</fo:inline>
is an alternative suffix for files that contain R5RS source code.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">.slfasl</fo:inline>
is the suffix for files that contain the pre-compiled
form of ERR5RS/R6RS-compatible code.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">.fasl</fo:inline>
is the suffix for files that contain the pre-compiled form of R5RS code.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">.mal</fo:inline>
is the preferred suffix for files that contain MacScheme
assembly language in symbolic form.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">.lap</fo:inline>
is the suffix for files that contain MacScheme assembly language.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">.lop</fo:inline>
is the suffix for files that contain machine code
segments in the form expected by Larceny's heap linker.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">.heap</fo:inline>
is the suffix for files that contain an executable heap
image (must be combined with the
<fo:basic-link internal-destination="InstallationSection"><fo:inline><fo:inline font-size="10pt" font-family="monospace">larceny.bin</fo:inline></fo:inline></fo:basic-link> runtime).</fo:block></fo:block><fo:block id="DirectorySection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Directories</fo:marker><fo:block font-size="20.736pt">5.2. Directories</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny's root directory should contain the following
files:</fo:block><fo:block id="id2575158" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    larceny
    scheme-script
    larceny.bin
    larceny.heap
    startup.sch</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The following subdirectories are also essential for correct
operation of some features of some modes in some varieties of
Larceny:</fo:block><fo:block id="id2575173" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    include
    lib
    lib/Base
    lib/Debugger
    lib/Ffi
    lib/MzScheme
    lib/R6RS
    lib/SRFI
    lib/Standard
    lib/TeachPacks</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">include</fo:inline> subdirectory is used when compiling files with
Petit Larceny.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">startup.sch</fo:inline> file tells Larceny's <fo:inline font-size="10pt" font-family="monospace">require</fo:inline> procedure to
search some of the <fo:inline font-size="10pt" font-family="monospace">lib</fo:inline> subdirectories for libraries that are
loaded dynamically.</fo:block></fo:block><fo:block id="LibraryResolutionSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Resolving references to libraries</fo:marker><fo:block font-size="20.736pt">5.3. Resolving references to libraries</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The R6RS does not specify any mapping from library names to
files or to other locations at which the code for a library
might be found.  As R6RS non-normative appendix E puts it:</fo:block><fo:block margin-left="0.5in" margin-right="0.5in" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em"><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Implementations may take radically different approaches to
storing source code for libraries, among them: files in the
file system where each file contains an arbitrary number of
library forms, files in the file system where each file
contains exactly one library form, records in a database,
and data structures in memory….Implementations may provide
a means for importing libraries….</fo:block></fo:block><fo:block text-align="right">—<fo:inline>
</fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In other words, implementations are allowed to extend the
R6RS with arbitrary mechanisms for resolving references to
imported libraries, but R6RS programs that rely on such
mechanisms are not portable.  In particular, R6RS libraries
are not portable.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny provides five distinct Larceny-specific
mechanisms that non-portable R6RS programs can use to
import or to define libraries:</fo:block><fo:list-block id="id2575270" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-distance-between-starts="1.2em" provisional-label-separation="0.2em"><fo:list-item id="id2575276" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
ERR5RS and R6RS standard libraries may be imported.
Their code is located automagically.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575285" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Nonstandard libraries, such as <fo:inline font-size="10pt" font-family="monospace">(larceny compiler)</fo:inline>,
may be placed in one of the directories that are searched
by Larceny's
<fo:basic-link internal-destination="ERR5RSLibraryPathSection"><fo:inline>autoload</fo:inline></fo:basic-link> feature, provided
those libraries are located in files that follow Larceny's
standard naming conventions as described in the next section.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575308" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
R6RS top-level programs may use
<fo:basic-link internal-destination="R6RSLibraryPathSection"><fo:inline>Larceny's <fo:inline font-size="10pt" font-family="monospace">-path</fo:inline> option</fo:inline></fo:basic-link>
to specify directories that contain other libraries
the program may import, provided those libraries are
located in files that follow Larceny's standard naming
conventions as described in the next section.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575329" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>4.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
R6RS top-level programs may use
<fo:basic-link internal-destination="R6RSLibraryVariableSection"><fo:inline>Larceny's <fo:inline font-size="10pt" font-family="monospace">LARCENY_LIBPATH</fo:inline> environment variable</fo:inline></fo:basic-link>
to specify directories that contain other libraries
the program may import, provided those libraries are
located in files that follow Larceny's standard naming
conventions as described in the next section.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575351" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>5.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
R6RS top-level programs and Scheme scripts may
<fo:basic-link internal-destination="DefiningLibrariesSection"><fo:inline>define their own libraries</fo:inline></fo:basic-link>
in the same file that contains the top-level program or
Scheme script.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">ERR5RS programs may use any of those five mechanisms,
and may also use a sixth mechanism:
An ERR5RS program can be written as a little configuration
program that loads the program's libraries from files
before any libraries are imported.  This sixth mechanism
is portable, but is not available to R6RS programs.</fo:block></fo:block><fo:block id="LibraryTranslationSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Mapping library names to files (ERR5RS/R6RS)</fo:marker><fo:block font-size="20.736pt">5.4. Mapping library names to files (ERR5RS/R6RS)</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Suppose Larceny's <fo:inline font-size="10pt" font-family="monospace">-path</fo:inline> option is used to specify
a certain <fo:inline font-style="italic">directory</fo:inline>, and the program imports a
nonstandard library whose name is of the form
<fo:inline font-size="10pt" font-family="monospace">(<fo:inline font-style="italic">name1</fo:inline> <fo:inline font-style="italic">name2</fo:inline> … <fo:inline font-style="italic">lastname</fo:inline>)</fo:inline>.
Larceny will search for that library in the following
files:</fo:block><fo:list-block id="id2575420" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2575422" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">directory</fo:inline>/<fo:inline font-style="italic">name1</fo:inline>/<fo:inline font-style="italic">name2</fo:inline>/…/<fo:inline font-style="italic">lastname</fo:inline>.larceny.slfasl</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575446" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">directory</fo:inline>/<fo:inline font-style="italic">name1</fo:inline>/<fo:inline font-style="italic">name2</fo:inline>/…/<fo:inline font-style="italic">lastname</fo:inline>.larceny.sls</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575469" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">directory</fo:inline>/<fo:inline font-style="italic">name1</fo:inline>/<fo:inline font-style="italic">name2</fo:inline>/…/<fo:inline font-style="italic">lastname</fo:inline>.slfasl</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575492" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">directory</fo:inline>/<fo:inline font-style="italic">name1</fo:inline>/<fo:inline font-style="italic">name2</fo:inline>/…/<fo:inline font-style="italic">lastname</fo:inline>.sls</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575516" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
…
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575522" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">directory</fo:inline>/<fo:inline font-style="italic">name1</fo:inline>/<fo:inline font-style="italic">name2</fo:inline>.larceny.slfasl</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575542" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">directory</fo:inline>/<fo:inline font-style="italic">name1</fo:inline>/<fo:inline font-style="italic">name2</fo:inline>.larceny.sls</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575562" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">directory</fo:inline>/<fo:inline font-style="italic">name1</fo:inline>/<fo:inline font-style="italic">name2</fo:inline>.slfasl</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575583" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">directory</fo:inline>/<fo:inline font-style="italic">name1</fo:inline>/<fo:inline font-style="italic">name2</fo:inline>.sls</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575603" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">directory</fo:inline>/<fo:inline font-style="italic">name1</fo:inline>.larceny.slfasl</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575620" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">directory</fo:inline>/<fo:inline font-style="italic">name1</fo:inline>.larceny.sls</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575637" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">directory</fo:inline>/<fo:inline font-style="italic">name1</fo:inline>.slfasl</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575654" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">directory</fo:inline>/<fo:inline font-style="italic">name1</fo:inline>.sls</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The search starts with the first of those file names,
continues with the following file names in order,
and ends when a file with one of those names is found.
The imported library <fo:inline font-style="italic">must</fo:inline> be one of the libraries
defined within the first file found by this search,
since the search is not continued after that first file
is found (except as noted in the next paragraph).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the search ends by finding a file whose name ends
with <fo:inline font-size="10pt" font-family="monospace">.slfasl</fo:inline>, then Larceny checks to see whether
there is a file in the same directory with the same
root name but ending with <fo:inline font-size="10pt" font-family="monospace">.sls</fo:inline> instead of <fo:inline font-size="10pt" font-family="monospace">.slfasl</fo:inline>.
If the <fo:inline font-size="10pt" font-family="monospace">.sls</fo:inline> file has been modified since the <fo:inline font-size="10pt" font-family="monospace">.slfasl</fo:inline>
file was last modified, then a warning is printed and
the <fo:inline font-size="10pt" font-family="monospace">.sls</fo:inline> file is loaded instead of the <fo:inline font-size="10pt" font-family="monospace">.slfasl</fo:inline> file.
Otherwise the <fo:inline font-size="10pt" font-family="monospace">.slfasl</fo:inline> file is loaded.</fo:block><fo:block id="id2575743" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The R6RS allows arbitrary mappings from library names to library
code.  Larceny takes advantage of this by ignoring version
numbers when mapping library names to files, and by (virtually)
rewriting any version number that may be specified in the
definition of a library so it matches any version specification
that appears within the <fo:inline font-size="10pt" font-family="monospace">import</fo:inline> form.  Furthermore Larceny
allows different versions of the same library to be imported,
but Larceny's algorithm for resolving library references
ensures that the different versions of a library will be
identical except for their version numbers, which have no
meaningful semantics.  Although Larceny's treatment of versions
conforms to the R6RS specification, it should be clear that
version numbers serve no purpose in Larceny.  Since the R6RS
version feature has no usefully portable semantics, it is
deprecated.</fo:block></fo:block></fo:block></fo:block><fo:block id="RequireLibraryTranslationSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Mapping library names to files (R5RS)</fo:marker><fo:block font-size="20.736pt">5.5. Mapping library names to files (R5RS)</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In R5RS mode, Larceny's <fo:inline font-size="10pt" font-family="monospace">-path</fo:inline> option
and <fo:inline font-size="10pt" font-family="monospace">LARCENY_LIBPATH</fo:inline> environment variable
may be used to
specify directories to be searched by the <fo:inline font-size="10pt" font-family="monospace">require</fo:inline>
procedure, which takes a single symbol <fo:inline font-style="italic">libname</fo:inline> as
its argument.
The <fo:inline font-size="10pt" font-family="monospace">require</fo:inline> procedure will search for the following
files in every directory that is part of the current
require path, starting with the directories specified
by LARCENY_LIBPATH and the <fo:inline font-size="10pt" font-family="monospace">-path</fo:inline> option:</fo:block><fo:list-block id="id2575834" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2575836" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">libname</fo:inline>.fasl</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575850" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">libname</fo:inline>.sch</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2575864" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">libname</fo:inline>.scm</fo:inline>
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These files are expected to contain R5RS code, not
library definitions.  Otherwise the search proceeds
much the same as when searching for an ERR5RS/R6RS
library.</fo:block><fo:block id="id2575886" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">require</fo:inline> path is specified by <fo:inline font-size="10pt" font-family="monospace">startup.sch</fo:inline> in Larceny's
root directory, but may be changed dynamically using the
<fo:inline font-size="10pt" font-family="monospace">current-require-path</fo:inline> parameter.  Changing the <fo:inline font-size="10pt" font-family="monospace">require</fo:inline> path
is not recommended, however, because Larceny relies on the
<fo:inline font-size="10pt" font-family="monospace">require</fo:inline> path for dynamic loading of libraries used by several
important features of Larceny, notably ERR5RS and R6RS modes.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="require"/>
<fo:inline font-style="italic"> Procedure require</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2575939"><!--require--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(require <fo:inline font-style="italic">libname</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">libname</fo:inline> must be a symbol that names an R5RS-compatible
library within the current require path.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the library has not already been loaded, then it is
located and loaded.  If the library is found and loaded
successfully, then <fo:inline font-size="10pt" font-family="monospace">require</fo:inline> returns true; otherwise an
error is signalled.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the library has already been loaded, then <fo:inline font-size="10pt" font-family="monospace">require</fo:inline>
returns false without loading the library a second time.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="current-require-path"/>
<fo:inline font-style="italic"> Procedure current-require-path</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2576002"><!--current-require-path--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(current-require-path <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">stringlist</fo:inline></fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(current-require-path <fo:inline font-style="italic">stringlist</fo:inline>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The optional argument is a list of directory names
(without slashes at the end) that should be searched
by <fo:basic-link internal-destination="require"><fo:inline><fo:inline font-size="10pt" font-family="monospace">require</fo:inline></fo:inline></fo:basic-link> and (in ERR5RS/R6RS modes)
by Larceny's <fo:basic-link internal-destination="ERR5RSLibraryPathSection"><fo:inline>autoload</fo:inline></fo:basic-link>
feature.
Returns the list of directory names that will be
searched.</fo:block></fo:block></fo:block><fo:block id="CompilingChapter"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Compiling files and libraries</fo:marker><fo:block font-size="24.8832pt">6. Compiling files and libraries</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This chapter explains how you can use Larceny to compile
Scheme source code to native machine code.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The native varieties of Larceny have a just-in-time
compiler that compiles to native code automatically
whenever you evaluate an expression, load a source
file, or import a source library.  Even so, files
will load faster if they are compiled ahead of time.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Petit Larceny does not have a just-in-time compiler,
so compiling ahead of time is the only way to enjoy
the speed of native machine code in Petit Larceny.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Common Larceny uses an interpreter for expressions
that are typed at the interactive read/eval/print
loop, but files will be compiled as they are loaded
if you specify <fo:inline font-size="10pt" font-family="monospace">Larceny.fasl</fo:inline> on the command line.
For more information on compiling files in Common
Larceny, please consult the
<fo:basic-link external-destination="http://larceny.ccs.neu.edu">Common Larceny User Manual</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://larceny.ccs.neu.edu">http://larceny.ccs.neu.edu</fo:basic-link>]</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The main disadvantage of compiling files and libraries
is that compiled code goes <fo:inline font-style="italic">stale</fo:inline> when its original
source code is changed or when a library on which
the compiled code depends is changed or recompiled.
Stale compiled code can be dangerously inconsistent
with libraries on which it depends, so Larceny checks
for staleness and refuses to execute a stale library
or program.</fo:block><fo:block id="CompilingErr5rsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Compiling ERR5RS/R6RS libraries</fo:marker><fo:block font-size="20.736pt">6.1. Compiling ERR5RS/R6RS libraries</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On Unix machines, the most convenient way to compile
a group of ERR5RS/R6RS libraries and top-level programs
is to use the <fo:inline font-size="10pt" font-family="monospace">compile-stale</fo:inline> script in Larceny's root
directory.
If Larceny's root directory is in your execution path,
then there are just two steps:</fo:block><fo:list-block id="id2576149" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-distance-between-starts="1.2em" provisional-label-separation="0.2em"><fo:list-item id="id2576155" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Use <fo:inline font-size="10pt" font-family="monospace">cd</fo:inline> to change to the directory that contains
the ERR5RS/R6RS files you want to compile.  (Files
that lie within subdirectories of that directory will
be compiled also.)
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2576170" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Run the <fo:inline font-size="10pt" font-family="monospace">compile-stale</fo:inline> script.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For example:</fo:block><fo:block id="id2576186" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    % cd lib/R6RS
    % compile-stale</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">On non-Unix machines, you can accomplish the same thing
using Larceny's ERR5RS mode and the <fo:inline font-size="10pt" font-family="monospace">(larceny compiler)</fo:inline>
library:</fo:block><fo:block id="id2576204" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    % pushd lib\R6RS
    % ..\..\larceny.bat -err5rs
    Larceny v0.96 "Fluoridation"
    ERR5RS mode (no libraries have been imported)

    &gt; (import (larceny compiler))

    &gt; (compile-stale-libraries)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To compile individual files, use the <fo:inline font-size="10pt" font-family="monospace">compile-file</fo:inline> or
<fo:inline font-size="10pt" font-family="monospace">compile-library</fo:inline> procedures that are exported by
<fo:basic-link internal-destination="LarcenyCompilerSection"><fo:inline><fo:inline font-size="10pt" font-family="monospace">(larceny compiler)</fo:inline></fo:inline></fo:basic-link>.</fo:block></fo:block><fo:block id="CompilingR5rsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Compiling R5RS source files</fo:marker><fo:block font-size="20.736pt">6.2. Compiling R5RS source files</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="compile-file"/>
<fo:inline font-style="italic"> Procedure compile-file</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2576259"><!--compile-file--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(compile-file <fo:inline font-style="italic">sourcefile</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Compiles <fo:inline font-style="italic">sourcefile</fo:inline>, which must be a string naming
a file that contains R5RS source code.
If <fo:inline font-style="italic">faslfile</fo:inline> is supplied as a second argument,
then it must be a string naming the file that will
contain the compiled code; otherwise the name of
the compiled file is obtained from <fo:inline font-style="italic">sourcefile</fo:inline>
by replacing the "<fo:inline font-size="10pt" font-family="monospace">.sch</fo:inline>" or "<fo:inline font-size="10pt" font-family="monospace">.scm</fo:inline>" suffix with
"<fo:inline font-size="10pt" font-family="monospace">.fasl</fo:inline>".</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For ERR5RS/R6RS libraries and top-level programs,
<fo:basic-link internal-destination="CompilingErr5rsSection"><fo:inline>see above</fo:inline></fo:basic-link>.</fo:block></fo:block></fo:block><fo:block id="Err5rsChapter"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">ERR5RS standard libraries</fo:marker><fo:block font-size="24.8832pt">7. ERR5RS standard libraries</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link internal-destination="Standards"><fo:inline>ERR5RS</fo:inline></fo:basic-link> is still being developed, so the specifications
described below are subject to change as its standard libraries
are revised.</fo:block><fo:block id="Err5rsLoadSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Load</fo:marker><fo:block font-size="20.736pt">7.1. Load</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This section describes the <fo:inline font-size="10pt" font-family="monospace">(err5rs load)</fo:inline> library.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="load"/>
<fo:inline font-style="italic"> Procedure load</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2576370"><!--load--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(load <fo:inline font-style="italic">filename</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Loads ERR5RS code from <fo:inline font-style="italic">filename</fo:inline>, evaluating each form
as though it had been entered at the interactive
read/eval/print loop.</fo:block><fo:block id="id2576395" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">load</fo:inline> procedure should be used only at an interactive top
level and in files that will be loaded into an interactive top
level.  Calls to the <fo:inline font-size="10pt" font-family="monospace">load</fo:inline> procedure have no effect at compile
time, and should not appear in files that will be compiled
separately; use the <fo:inline font-size="10pt" font-family="monospace">library</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">import</fo:inline> syntaxes instead.</fo:block></fo:block></fo:block></fo:block><fo:block id="Err5rsRecordsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Records</fo:marker><fo:block font-size="20.736pt">7.2. Records</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When a procedure is said to be equivalent to an R6RS
procedure, the equivalence holds only when all arguments
have the properties required of them by the R6RS
specification.  ERR5RS does not mandate R6RS exception
semantics for programs that violate the specification.</fo:block><fo:block id="Err5rsRecordsProceduralSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">7.2.1. Procedural layer</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This section describes the <fo:inline font-size="10pt" font-family="monospace">(err5rs records procedural)</fo:inline> library.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="make-rtd"/>
<fo:inline font-style="italic"> Procedure make-rtd</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2576481"><!--make-rtd--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(make-rtd <fo:inline font-style="italic">name fieldspecs</fo:inline>) </fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(make-rtd <fo:inline font-style="italic">name fieldspecs parent-rtd</fo:inline>) </fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(make-rtd <fo:inline font-style="italic">name fieldspecs parent-rtd option …</fo:inline>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">name</fo:inline> is a symbol, which matters only to the
<fo:basic-link internal-destination="rtd-name"><fo:inline><fo:inline font-size="10pt" font-family="monospace">rtd-name</fo:inline></fo:inline></fo:basic-link> procedure of the inspection layer.
<fo:inline font-style="italic">fieldspecs</fo:inline> is a vector of field specifiers, where
each field specifier is one of</fo:block><fo:list-block id="id2576540" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2576542" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
a symbol naming the (mutable) field;
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2576550" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
a list of the form <fo:inline font-size="10pt" font-family="monospace">(mutable <fo:inline font-style="italic">name</fo:inline>)</fo:inline>,
where <fo:inline font-style="italic">name</fo:inline> is a symbol naming the mutable field;
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2576570" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
a list of the form <fo:inline font-size="10pt" font-family="monospace">(immutable <fo:inline font-style="italic">name</fo:inline>)</fo:inline>,
where <fo:inline font-style="italic">name</fo:inline> is a symbol naming the immutable field.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The optional parent is an rtd or <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>. It is an error for
any of the symbols in fieldspecs to name more than one
of the fields specified by fieldspecs, but the field names
in fieldspecs may shadow field names in the parent rtd.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link internal-destination="make-rtd"><fo:inline><fo:inline font-size="10pt" font-family="monospace">make-rtd</fo:inline></fo:inline></fo:basic-link> returns an R6RS-compatible record-type
descriptor.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny allows the following optional arguments to follow
the optional <fo:inline font-style="italic">parent-rtd</fo:inline> argument:</fo:block><fo:list-block id="id2576627" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2576629" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
the symbol <fo:inline font-size="10pt" font-family="monospace">sealed</fo:inline> means the new rtd cannot be used
as the parent of other rtds;
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2576643" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
the symbol <fo:inline font-size="10pt" font-family="monospace">opaque</fo:inline> means the <fo:basic-link internal-destination="record?"><fo:inline><fo:inline font-size="10pt" font-family="monospace">record?</fo:inline></fo:inline></fo:basic-link> predicate
will not recognize instances of the new rtd;
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2576665" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
the symbol <fo:inline font-size="10pt" font-family="monospace">uid</fo:inline>, followed by another symbol <fo:inline font-style="italic">id</fo:inline>,
means the new rtd is non-generative with uid <fo:inline font-style="italic">id</fo:inline>; the
semantics of this extension is the same as in the R6RS.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These Larceny-specific options may be used in any
combination, giving Larceny's ERR5RS records the same
expressive power as R6RS records, with which they are
fully interoperable.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rtd?"/>
<fo:inline font-style="italic"> Procedure rtd?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2576708"><!--rtd?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rtd? <fo:inline font-style="italic">obj</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This predicate returns true if and only if its argument
is a record-type descriptor.
<fo:inline font-size="10pt" font-family="monospace">rtd?</fo:inline> is equivalent to the <fo:inline font-size="10pt" font-family="monospace">record-type-descriptor?</fo:inline>
procedure of the R6RS.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rtd-constructor"/>
<fo:inline font-style="italic"> Procedure rtd-constructor</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2576754"><!--rtd-constructor--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rtd-constructor <fo:inline font-style="italic">rtd</fo:inline>) </fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(rtd-constructor <fo:inline font-style="italic">rtd fieldspecs</fo:inline>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">rtd</fo:inline> is a record-type descriptor, and <fo:inline font-style="italic">fieldspecs</fo:inline> is
an optional vector of symbols.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If no <fo:inline font-style="italic">fieldspecs</fo:inline> argument is supplied,
then <fo:inline font-size="10pt" font-family="monospace">rtd-constructor</fo:inline> returns a procedure that expects
one argument for each field of the record-type described
by <fo:inline font-style="italic">rtd</fo:inline> and returns an instance of that record-type
with its fields initialized to the corresponding
arguments.
Arguments that correspond to the fields of the
record-type's parent (if any) come first.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If <fo:inline font-style="italic">fieldspecs</fo:inline> is supplied, then <fo:inline font-size="10pt" font-family="monospace">rtd-constructor</fo:inline>
returns a procedure that expects one argument for each
element of <fo:inline font-style="italic">fieldspecs</fo:inline> and returns an instance of the
record-type described by <fo:inline font-style="italic">rtd</fo:inline> with the named fields
initialized to the corresponding arguments.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">It is an error if some symbol occurs more than once in
<fo:inline font-style="italic">fieldspecs</fo:inline>.  Fields of a derived record-type shadow
fields of the same name in its parent; the <fo:inline font-style="italic">fieldspecs</fo:inline>
argument cannot be used to initialize a shadowed field.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rtd-predicate"/>
<fo:inline font-style="italic"> Procedure rtd-predicate</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2576870"><!--rtd-predicate--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rtd-predicate <fo:inline font-style="italic">rtd</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Equivalent to the <fo:inline font-size="10pt" font-family="monospace">record-predicate</fo:inline> procedure of the R6RS.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rtd-accessor"/>
<fo:inline font-style="italic"> Procedure rtd-accessor</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2576908"><!--rtd-accessor--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rtd-accessor <fo:inline font-style="italic">rtd field</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">field</fo:inline> is a symbol that names a field of the
record-type described by the record-type descriptor <fo:inline font-style="italic">rtd</fo:inline>.
Returns a unary procedure that accepts instances of <fo:inline font-style="italic">rtd</fo:inline>
(or any record-type that inherits from <fo:inline font-style="italic">rtd</fo:inline>) and
returns the current value of the named field.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Fields in derived record-types shadow fields of the same
name in a parent record-type.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rtd-mutator"/>
<fo:inline font-style="italic"> Procedure rtd-mutator</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2576966"><!--rtd-mutator--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rtd-mutator <fo:inline font-style="italic">rtd field</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">field</fo:inline> is a symbol that names a field of the
record-type described by the record-type descriptor <fo:inline font-style="italic">rtd</fo:inline>.
Returns a binary procedure that accepts instances of <fo:inline font-style="italic">rtd</fo:inline>
(or any record-type that inherits from <fo:inline font-style="italic">rtd</fo:inline>) and a new
value to be stored into the named field, performs that
side effect, and returns an unspecified value.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Fields in derived record-types shadow fields of the same
name in a parent record-type.</fo:block></fo:block><fo:block id="Err5rsRecordsInspectionSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">7.2.2. Inspection layer</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This section describes the <fo:inline font-size="10pt" font-family="monospace">(err5rs records inspection)</fo:inline> library.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="record?"/>
<fo:inline font-style="italic"> Procedure record?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2577044"><!--record?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(record? <fo:inline font-style="italic">obj</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Equivalent to its R6RS namesake.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="record-rtd"/>
<fo:inline font-style="italic"> Procedure record-rtd</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2577076"><!--record-rtd--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(record-rtd <fo:inline font-style="italic">record</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Equivalent to its R6RS namesake.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rtd-name"/>
<fo:inline font-style="italic"> Procedure rtd-name</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2577110"><!--rtd-name--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rtd-name <fo:inline font-style="italic">rtd</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Equivalent to the <fo:inline font-size="10pt" font-family="monospace">record-type-name</fo:inline> procedure of the R6RS.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rtd-parent"/>
<fo:inline font-style="italic"> Procedure rtd-parent</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2577147"><!--rtd-parent--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rtd-parent <fo:inline font-style="italic">rtd</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Equivalent to the <fo:inline font-size="10pt" font-family="monospace">record-type-parent</fo:inline> procedure of the R6RS.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rtd-field-names"/>
<fo:inline font-style="italic"> Procedure rtd-field-names</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2577185"><!--rtd-field-names--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rtd-field-names <fo:inline font-style="italic">rtd</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Equivalent to the <fo:inline font-size="10pt" font-family="monospace">record-type-field-names</fo:inline> procedure of the R6RS.
(That is, it returns a vector of the symbols that name the fields
of the record-type represented by <fo:inline font-style="italic">rtd</fo:inline>, excluding the fields of
parent record-types.)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rtd-all-field-names"/>
<fo:inline font-style="italic"> Procedure rtd-all-field-names</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2577232"><!--rtd-all-field-names--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rtd-all-field-names <fo:inline font-style="italic">rtd</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a vector of the symbols that name the fields of
the record-type represented by <fo:inline font-style="italic">rtd</fo:inline>, including the fields
of its parent record-types, if any, with the fields of
parent record-types coming before the fields of its children,
with each subsequence in the same order as in the vectors
that would be returned by calling <fo:basic-link internal-destination="rtd-field-names"><fo:inline><fo:inline font-size="10pt" font-family="monospace">rtd-field-names</fo:inline></fo:inline></fo:basic-link>
on <fo:inline font-style="italic">rtd</fo:inline> and on all its ancestral record-type descriptors.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rtd-field-mutable?"/>
<fo:inline font-style="italic"> Procedure rtd-field-mutable?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2577291"><!--rtd-field-mutable?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rtd-field-mutable? <fo:inline font-style="italic">rtd field</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">rtd</fo:inline> is a record-type descriptor, and <fo:inline font-style="italic">field</fo:inline> is a
symbol naming a field of the record-type described by <fo:inline font-style="italic">rtd</fo:inline>.
Returns <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> if the named field is mutable; otherwise returns <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>.</fo:block></fo:block><fo:block id="Err5rsRecordsSyntacticSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">7.2.3. Syntactic layer</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This section describes the <fo:inline font-size="10pt" font-family="monospace">(err5rs records syntactic)</fo:inline> library.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The syntactic layer consists of
<fo:basic-link external-destination="http://srfi.schemers.org/srfi-9/">SRFI 9</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://srfi.schemers.org/srfi-9/">http://srfi.schemers.org/srfi-9/</fo:basic-link>]</fo:inline>
extended with single inheritance and (optional) implicit naming.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All ERR5RS record-type definitions are generative (unless
Larceny's optional <fo:inline font-size="10pt" font-family="monospace">uid</fo:inline> feature is used), but
ERR5RS drops the SRFI 9 restriction to top level, mainly
because the R6RS allows generative definitions wherever
a definition may appear.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The syntax of an ERR5RS record-type definition is</fo:block><fo:block id="id2577384" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    &lt;definition&gt;
      -&gt; &lt;record type definition&gt;           ; addition to 7.1.6 in R5RS

    &lt;record type definition&gt;
      -&gt; (define-record-type &lt;type spec&gt;
           &lt;constructor spec&gt;
           &lt;predicate spec&gt;
           &lt;field spec&gt; ...)

    &lt;type spec&gt;  -&gt; &lt;type name&gt;
                 -&gt; (&lt;type name&gt; &lt;parent&gt;)

    &lt;constructor spec&gt;
                 -&gt; #f
                 -&gt; #t
                 -&gt; &lt;constructor name&gt;
                 -&gt; (&lt;constructor name&gt; &lt;field name&gt; ...)

    &lt;predicate spec&gt;
                 -&gt; #f
                 -&gt; #t
                 -&gt; &lt;predicate name&gt;

    &lt;field spec&gt; -&gt; &lt;field name&gt;
                 -&gt; (&lt;field name&gt;)
                 -&gt; (&lt;field name&gt; &lt;accessor name&gt;)
                 -&gt; (&lt;field name&gt; &lt;accessor name&gt; &lt;mutator name&gt;)

    &lt;parent&gt;           -&gt; &lt;expression&gt;

    &lt;type name&gt;        -&gt; &lt;identifier&gt;
    &lt;constructor name&gt; -&gt; &lt;identifier&gt;
    &lt;predicate name&gt;   -&gt; &lt;identifier&gt;
    &lt;accessor name&gt;    -&gt; &lt;identifier&gt;
    &lt;mutator name&gt;     -&gt; &lt;identifier&gt;
    &lt;field name&gt;       -&gt; &lt;identifier&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The semantics of a record type definition is the same
as in SRFI 9: the record type definition macro-expands
into a cluster of definitions that</fo:block><fo:list-block id="id2577418" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2577420" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
defines the <fo:inline font-size="10pt" font-family="monospace">&lt;type name&gt;</fo:inline> as the record-type descriptor
for the new record-type;
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2577434" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
defines a constructor for instances of the new
record-type (unless the constructor spec is <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>);
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2577449" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
defines a predicate that recognizes instances of the
new record-type and its subtypes (unless the predicate spec is <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>);
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2577464" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
defines an accessor for each field name;
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2577472" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
defines a mutator for each mutable field name.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">An ERR5RS record type definition extends SRFI 9 with the
following additional options:</fo:block><fo:list-block id="id2577488" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2577490" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
If a <fo:inline font-size="10pt" font-family="monospace">&lt;parent&gt;</fo:inline> expression is specified, then it must
evaluate to an rtd that serves as the parent record-type
for the record-type being defined.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2577505" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
If <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> is specified for the constructor or predicate,
then no constructor or predicate procedure is defined.
(This is useful when the record-type being defined will
be used as an abstract base class.)
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2577520" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
If <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> is specified for the constructor or predicate,
then the name of the constructor is the type name prefixed
by <fo:inline font-size="10pt" font-family="monospace">make-</fo:inline>, and the name of the predicate is the type name
followed by a question mark (<fo:inline font-size="10pt" font-family="monospace">?</fo:inline>).
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2577549" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
If the constructor name is specified as <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> or as an
identifier, then the constructor's arguments correspond
to the fields of the parent (if any) followed by the new
fields added by this record-type definition.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2577567" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
If a field spec consists of a single identifier, then
</fo:block><fo:list-block id="id2577574" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2577576" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
the field is immutable;
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2577584" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
the name of its accessor is the type name followed by
a hyphen (<fo:inline font-size="10pt" font-family="monospace">-</fo:inline>) followed by the field name.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2577602" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
If a field spec consists of a list of one identifier, then
</fo:block><fo:list-block id="id2577610" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2577612" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
the field is mutable;
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2577619" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
the name of its accessor is the type name followed
by a hyphen (<fo:inline font-size="10pt" font-family="monospace">-</fo:inline>) followed by the field name;
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2577634" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
the name of its mutator is the type name followed by
a hyphen (<fo:inline font-size="10pt" font-family="monospace">-</fo:inline>) followed by the field name followed by <fo:inline font-size="10pt" font-family="monospace">-set!</fo:inline>.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block id="RecordIdentitySection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">7.2.4. Record identity</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Two ERR5RS records with fields are <fo:inline font-size="10pt" font-family="monospace">eqv?</fo:inline> if and only if
they were created by the same (dynamic) call to some
record constructor.
Two ERR5RS records are <fo:inline font-size="10pt" font-family="monospace">eq?</fo:inline> if and only if they are <fo:inline font-size="10pt" font-family="monospace">eqv?</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Apart from the usual constraint that equivalence according
to <fo:inline font-size="10pt" font-family="monospace">eqv?</fo:inline> implies equivalence according to <fo:inline font-size="10pt" font-family="monospace">equal?</fo:inline>, the
behavior of <fo:inline font-size="10pt" font-family="monospace">equal?</fo:inline> on ERR5RS records is unspecified.
(This is compatible with the R6RS.)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A <fo:inline font-size="10pt" font-family="monospace">define-record-type</fo:inline> form macro-expands into code that
calls <fo:basic-link internal-destination="make-rtd"><fo:inline><fo:inline font-size="10pt" font-family="monospace">make-rtd</fo:inline></fo:inline></fo:basic-link> each time the expanded record-type
definition is executed.
Two ERR5RS record-type descriptors are <fo:inline font-size="10pt" font-family="monospace">eqv?</fo:inline> if and only if
they were created by the same (dynamic) call to
<fo:basic-link internal-destination="make-rtd"><fo:inline><fo:inline font-size="10pt" font-family="monospace">make-rtd</fo:inline></fo:inline></fo:basic-link>.</fo:block></fo:block></fo:block></fo:block><fo:block id="R6rsChapter"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">R6RS standard libraries</fo:marker><fo:block font-size="24.8832pt">8. R6RS standard libraries</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This chapter explains which features of the R6RS standard
libraries are available in each of Larceny's major modes
of execution.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny was the first substantially complete implementation
of the R6RS.  Any features that are missing from R6RS modes
are missing because of bugs or because the features are
deprecated in Larceny.
The most up-to-date listing of Larceny's known deviations
from the R6RS standard can be found on the web page
that describes the current status of
<fo:basic-link external-destination="https://github.com/larcenists/larceny/wiki/DargoMode">Larceny's R6RS-compatible mode</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="https://github.com/larcenists/larceny/wiki/DargoMode">https://github.com/larcenists/larceny/wiki/DargoMode</fo:basic-link>]</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny is R6RS-compatible but not R6RS-conforming.
When Larceny is said to support a feature of the R6RS,
that means the feature is present and will behave as
specified by the R6RS so long as no exception is raised.
Larceny does not always raise the specific conditions
specified by the R6RS, and does not perform all of the
checking for portability problems that is mandated by
the R6RS.  These deviations do not affect the execution
of production code, and do not compromise Larceny's
traditional safety.</fo:block><fo:block id="R6rsBaseSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Base library</fo:marker><fo:block font-size="20.736pt">8.1. Base library</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">ERR5RS and R6RS modes support all procedures and syntaxes
exported by the <fo:inline font-size="10pt" font-family="monospace">(rnrs base)</fo:inline> library.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny's R5RS mode does not support <fo:inline font-size="10pt" font-family="monospace">library</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">import</fo:inline>, or
<fo:inline font-size="10pt" font-family="monospace">identifier-syntax</fo:inline>.</fo:block><fo:block id="id2577836" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The semantics of <fo:inline font-size="10pt" font-family="monospace">quasiquote</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">let-syntax</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">letrec-syntax</fo:inline>
differ between the R5RS and the R6RS.  Larceny's R5RS mode still
supports the R5RS semantics.</fo:block></fo:block></fo:block></fo:block><fo:block id="R6rsUnicodeSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Unicode</fo:marker><fo:block font-size="20.736pt">8.2. Unicode</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All of Larceny's modes support all features of the <fo:inline font-size="10pt" font-family="monospace">(rnrs unicode)</fo:inline>
library.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny v0.97 conforms to
<fo:basic-link internal-destination="Standards"><fo:inline>The Unicode Standard</fo:inline></fo:basic-link>, Version 5.0.</fo:block></fo:block><fo:block id="R6rsBytevectorsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Bytevectors</fo:marker><fo:block font-size="20.736pt">8.3. Bytevectors</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">ERR5RS and R6RS modes support all procedures and syntaxes
exported by <fo:inline font-size="10pt" font-family="monospace">(rnrs bytevectors)</fo:inline>, but the <fo:inline font-size="10pt" font-family="monospace">endianness</fo:inline>
syntax is deprecated because it is redundant with <fo:inline font-size="10pt" font-family="monospace">quote</fo:inline>.
Larceny's R5RS mode does not support <fo:inline font-size="10pt" font-family="monospace">endianness</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Larceny, any symbol names a supported endianness.
The symbols <fo:inline font-size="10pt" font-family="monospace">big</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">little</fo:inline> have their expected meanings.
All other symbols mean <fo:inline font-size="10pt" font-family="monospace">(native-endianness)</fo:inline> with respect
to integer operations, but mean the opposite of
<fo:inline font-size="10pt" font-family="monospace">(native-endianness)</fo:inline> with respect to
<fo:basic-link internal-destination="Standards"><fo:inline>IEEE-754</fo:inline></fo:basic-link> operations.
For string operations, the endianness must be the symbol
<fo:inline font-size="10pt" font-family="monospace">big</fo:inline> or the symbol <fo:inline font-size="10pt" font-family="monospace">little</fo:inline>.  All of these extensions are
permitted by the R6RS standard.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny's <fo:inline font-size="10pt" font-family="monospace">utf16-&gt;string</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">utf32-&gt;string</fo:inline> accept one,
two, or three arguments.  The R6RS specification of these
procedures does not allow them to accept a single argument,
but that is believed to be an error in the R6RS.</fo:block></fo:block><fo:block id="R6rsListsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Lists</fo:marker><fo:block font-size="20.736pt">8.4. Lists</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All of Larceny's modes support all features of the
<fo:inline font-size="10pt" font-family="monospace">(rnrs lists)</fo:inline> library.</fo:block></fo:block><fo:block id="R6rsSortingSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Sorting</fo:marker><fo:block font-size="20.736pt">8.5. Sorting</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All of Larceny's modes support all features of the
<fo:inline font-size="10pt" font-family="monospace">(rnrs sorting)</fo:inline> library.</fo:block></fo:block><fo:block id="R6rsControlSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Control</fo:marker><fo:block font-size="20.736pt">8.6. Control</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All of Larceny's modes support all features of the
<fo:inline font-size="10pt" font-family="monospace">(rnrs control)</fo:inline> library.</fo:block></fo:block><fo:block id="R6rsRecordsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Records</fo:marker><fo:block font-size="20.736pt">8.7. Records</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">ERR5RS and R6RS modes support all procedures and syntaxes
exported by
<fo:inline font-size="10pt" font-family="monospace">(rnrs records procedural)</fo:inline>,
<fo:inline font-size="10pt" font-family="monospace">(rnrs records inspection)</fo:inline>, and
<fo:inline font-size="10pt" font-family="monospace">(rnrs records syntactic)</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Those libraries are deprecated, however;
the <fo:inline font-size="10pt" font-family="monospace">make-record-constructor-descriptor</fo:inline> procedure does
not simplify unusually complex cases enough to justify
the complexity it adds to typical cases, and
the entire syntactic layer is gratuitously incompatible
with the procedural layer.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny's R5RS mode supports all features of the deprecated
<fo:inline font-size="10pt" font-family="monospace">(rnrs records procedural)</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">(rnrs records inspection)</fo:inline>
libraries.  R5RS mode does not support <fo:inline font-size="10pt" font-family="monospace">(rnrs records syntactic)</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All of Larceny's modes support all features of the
<fo:basic-link internal-destination="Err5rsRecordsProceduralSection"><fo:inline><fo:inline font-size="10pt" font-family="monospace">(err5rs records procedural)</fo:inline></fo:inline></fo:basic-link>
and
<fo:basic-link internal-destination="Err5rsRecordsInspectionSection"><fo:inline><fo:inline font-size="10pt" font-family="monospace">(err5rs records inspection)</fo:inline></fo:inline></fo:basic-link>
libraries.  ERR5RS and R6RS modes also support the
<fo:basic-link internal-destination="Err5rsRecordsSyntacticSection"><fo:inline><fo:inline font-size="10pt" font-family="monospace">(err5rs records syntactic)</fo:inline></fo:inline></fo:basic-link>
library.
These libraries are equivalent to the
<fo:inline font-size="10pt" font-family="monospace">(srfi :99 records procedural)</fo:inline>,
<fo:inline font-size="10pt" font-family="monospace">(srfi :99 records inspection)</fo:inline>, and
<fo:inline font-size="10pt" font-family="monospace">(srfi :99 records syntactic)</fo:inline> libraries.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The record definition syntax of
<fo:basic-link external-destination="http://srfi.schemers.org/srfi-9/">SRFI 9</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://srfi.schemers.org/srfi-9/">http://srfi.schemers.org/srfi-9/</fo:basic-link>]</fo:inline>
is a proper subset
of the syntax provided by the <fo:inline font-size="10pt" font-family="monospace">(err5rs records syntactic)</fo:inline>
library.  In R5RS mode, SRFI 9 can be loaded dynamically
using the
<fo:basic-link internal-destination="require"><fo:inline><fo:inline font-size="10pt" font-family="monospace">require</fo:inline></fo:inline></fo:basic-link> procedure:</fo:block><fo:block id="id2578205" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    &gt; (require 'srfi-9)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We recommend the ERR5RS and/or SRFI 9 libraries be used instead
of the corresponding R6RS libraries.</fo:block><fo:block id="id2578218" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The R6RS spouts some tendentious nonsense about procedural
records being slower than syntactic records, but this is not
true of Larceny's records, and is unlikely to be true of other
implementations either.</fo:block></fo:block></fo:block><fo:block id="id2578229" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny continues to support its old-style
records, which are almost but not quite compatible
with ERR5RS and R6RS records.  This can be confusing,
since some of Larceny's procedures have the same names
as R6RS procedures.  That has made it necessary to overload
those procedures to work with both old-style and R6RS
records.  We apologize for the mess.</fo:block></fo:block></fo:block></fo:block><fo:block id="R6rsConditionsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Exceptions and conditions</fo:marker><fo:block font-size="20.736pt">8.8. Exceptions and conditions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All of Larceny's modes support all features of the
<fo:inline font-size="10pt" font-family="monospace">(rnrs exceptions)</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">(rnrs conditions)</fo:inline> libraries.</fo:block></fo:block><fo:block id="R6rsIoSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Input and output</fo:marker><fo:block font-size="20.736pt">8.9. Input and output</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">ERR5RS and R6RS modes support all names exported by the
<fo:inline font-size="10pt" font-family="monospace">(rnrs io ports)</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">(rnrs io simple)</fo:inline>, and
<fo:inline font-size="10pt" font-family="monospace">(rnrs files)</fo:inline> libraries.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">buffer-mode</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">eol-style</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">error-handling-mode</fo:inline>
syntaxes are deprecated because they are redundant
with <fo:inline font-size="10pt" font-family="monospace">quote</fo:inline>.  These deprecated syntaxes may be provided
in the form of procedures rather than syntax, but this
deviation from R6RS semantics cannot be detected by
portable R6RS programs.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny's R5RS mode supports all non-deprecated features
of those libraries.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny supports four distinct buffer modes: <fo:inline font-size="10pt" font-family="monospace">none</fo:inline>,
<fo:inline font-size="10pt" font-family="monospace">line</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">datum</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">block</fo:inline>.  The R6RS requires
the <fo:inline font-size="10pt" font-family="monospace">buffer-mode</fo:inline> syntax to raise an exception for the
<fo:inline font-size="10pt" font-family="monospace">datum</fo:inline> buffer mode, which is the buffer mode Larceny
uses for interactive output ports.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Larceny, any symbol names a supported end-of-line
style.  All end-of-line and error-handling-mode symbols
whose meanings are not described by the R6RS have
locale-dependent meanings, which is an extension
permitted by the R6RS standard.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Although Larceny supports the UTF-16 codec, it is not
really useful on Windows machines (where it should be
most useful) because Larceny's low-level file system
mimics a byte-oriented Unix file system even on
Windows.  This problem should be addressed in some
future version of Larceny.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The most up-to-date list of known deviations from R6RS
io semantics can be found on the web page
that describes the current status of
<fo:basic-link external-destination="https://github.com/larcenists/larceny/wiki/DargoMode">Larceny's R6RS-compatible mode</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="https://github.com/larcenists/larceny/wiki/DargoMode">https://github.com/larcenists/larceny/wiki/DargoMode</fo:basic-link>]</fo:inline>.</fo:block></fo:block><fo:block id="R6rsProgramsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Programs</fo:marker><fo:block font-size="20.736pt">8.10. Programs</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">ERR5RS and R6RS modes support the <fo:inline font-size="10pt" font-family="monospace">(rnrs programs)</fo:inline> library.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny's R5RS mode provides the <fo:inline font-size="10pt" font-family="monospace">exit</fo:inline> procedure but
not the <fo:inline font-size="10pt" font-family="monospace">command-line</fo:inline> procedure of that library.
Larceny's traditional <fo:inline font-size="10pt" font-family="monospace">command-line-arguments</fo:inline> procedure
can be used to implement an approximation to <fo:inline font-size="10pt" font-family="monospace">command-line</fo:inline>.
For a definition, see <fo:inline font-size="10pt" font-family="monospace">lib/R6RS/rnrs/programs.sls</fo:inline>.</fo:block></fo:block><fo:block id="R6rsArithmeticSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Arithmetic</fo:marker><fo:block font-size="20.736pt">8.11. Arithmetic</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All of Larceny's modes support all features of the
<fo:inline font-size="10pt" font-family="monospace">(rnrs arithmetic fixnums)</fo:inline>,
<fo:inline font-size="10pt" font-family="monospace">(rnrs arithmetic flonums)</fo:inline>, and
<fo:inline font-size="10pt" font-family="monospace">(rnrs arithmetic bitwise)</fo:inline>
libraries.</fo:block><fo:block id="id2578492" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">R6RS fixnum and flonum operations may be slower than the
corresponding generic operations, since the fixnum and flonum
operations are required to check their arguments and may also
have to check their results.
Isolated operations in small micro-benchmarks are likely to
be slower than groups of similar operations in larger programs,
however, because the Twobit compiler removes redundant checks
and propagates type information.</fo:block></fo:block></fo:block></fo:block><fo:block id="R6rsSyntaxCaseSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Syntax-case</fo:marker><fo:block font-size="20.736pt">8.12. Syntax-case</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">ERR5RS and R6RS modes support the <fo:inline font-size="10pt" font-family="monospace">(rnrs syntax-case)</fo:inline> library.
Larceny's R5RS mode does not.</fo:block></fo:block><fo:block id="R6rsHashtablesSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Hashtables</fo:marker><fo:block font-size="20.736pt">8.13. Hashtables</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All of Larceny's modes support all features of the
<fo:inline font-size="10pt" font-family="monospace">(rnrs hashtables)</fo:inline> library.</fo:block><fo:block id="id2578546" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny's traditional <fo:inline font-size="10pt" font-family="monospace">make-hashtable</fo:inline> procedure has been
renamed to <fo:inline font-size="10pt" font-family="monospace">make-oldstyle-hashtable</fo:inline>.</fo:block></fo:block></fo:block><fo:block id="id2578564" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When you use Larceny's R5RS or ERR5RS mode to dump a heap image
that contains <fo:inline font-size="10pt" font-family="monospace">eq?</fo:inline> or <fo:inline font-size="10pt" font-family="monospace">eqv?</fo:inline> hashtables you have created, they
are automatically reset so they will
rehash themselves whenever you begin a new session with the
dumped heap.</fo:block></fo:block></fo:block></fo:block><fo:block id="R6rsEnumerationsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Enumeration sets</fo:marker><fo:block font-size="20.736pt">8.14. Enumeration sets</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">ERR5RS and R6RS modes support the <fo:inline font-size="10pt" font-family="monospace">(rnrs enums)</fo:inline> library.
Larceny's R5RS mode provides all of the procedures exported by
<fo:inline font-size="10pt" font-family="monospace">(rnrs enums)</fo:inline> but does not provide the <fo:inline font-size="10pt" font-family="monospace">define-enumeration</fo:inline>
syntax.</fo:block></fo:block><fo:block id="R6rsEvalSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Eval</fo:marker><fo:block font-size="20.736pt">8.15. Eval</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">ERR5RS and R6RS modes support the <fo:inline font-size="10pt" font-family="monospace">(rnrs eval)</fo:inline> library.
Larceny's R5RS mode provides an R5RS-compatible eval procedure,
not an R6RS-compatible eval procedure, and does not provide the
<fo:inline font-size="10pt" font-family="monospace">environment</fo:inline> procedure.</fo:block></fo:block><fo:block id="R6rsMutableStringsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Mutable pairs and strings</fo:marker><fo:block font-size="20.736pt">8.16. Mutable pairs and strings</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All of Larceny's modes support all features of the
<fo:inline font-size="10pt" font-family="monospace">(rnrs mutable-pairs)</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">(rnrs mutable-strings)</fo:inline> libraries.</fo:block></fo:block><fo:block id="R6rsR5rsSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">R5RS</fo:marker><fo:block font-size="20.736pt">8.17. R5RS</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All of Larceny's modes support all features of the
<fo:inline font-size="10pt" font-family="monospace">(rnrs r5rs)</fo:inline> library.</fo:block></fo:block></fo:block><fo:block id="LarcenyErr5rsLibrariesChapter"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Larceny's ERR5RS/R6RS libraries</fo:marker><fo:block font-size="24.8832pt">9. Larceny's ERR5RS/R6RS libraries</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny provides libraries for loading and compiling
ERR5RS/R6RS libraries and for timing benchmarks.
Future versions of Larceny will offer more ERR5RS/R6RS
libraries.</fo:block><fo:block id="LarcenyLoadSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Load</fo:marker><fo:block font-size="20.736pt">9.1. Load</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">(larceny load)</fo:inline> library exports both the
<fo:inline font-size="10pt" font-family="monospace">load</fo:inline> procedure of <fo:inline font-size="10pt" font-family="monospace">(err5rs load)</fo:inline>
and <fo:inline font-size="10pt" font-family="monospace">r5rs:require</fo:inline>, which is a renaming of
the <fo:basic-link internal-destination="require"><fo:inline><fo:inline font-size="10pt" font-family="monospace">require</fo:inline></fo:inline></fo:basic-link> procedure used by
Larceny's R5RS mode.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In Larceny's ERR5RS mode,
the <fo:inline font-size="10pt" font-family="monospace">load</fo:inline> procedure can load
R5RS libraries and programs as well as ERR5RS/R6RS
libraries.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">r5rs:require</fo:inline> procedure should be used only for dynamic loading of
R5RS libraries into Larceny's underlying R5RS system.  The
variables defined by that library can be imported into
an ERR5RS session or ERR5RS/R6RS library or program using a
<fo:basic-link internal-destination="ERR5RSprimitivesSection"><fo:inline><fo:inline font-size="10pt" font-family="monospace">primitives</fo:inline></fo:inline></fo:basic-link>
clause in an <fo:inline font-size="10pt" font-family="monospace">import</fo:inline> form.</fo:block><fo:block id="id2578792" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These procedures should be used only at an interactive top
level and in files that will be loaded into an interactive top
level.  Calls to these procedures have no effect at compile
time, and should not appear in files that will be compiled
separately; use the <fo:inline font-size="10pt" font-family="monospace">library</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">import</fo:inline> syntaxes instead.</fo:block></fo:block></fo:block></fo:block><fo:block id="LarcenyCompilerSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Compiler</fo:marker><fo:block font-size="20.736pt">9.2. Compiler</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">(larceny compiler)</fo:inline> library exports the
<fo:inline font-size="10pt" font-family="monospace">load</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">r5rs:require</fo:inline> procedures of <fo:inline font-size="10pt" font-family="monospace">(larceny load)</fo:inline>,
the
<fo:basic-link internal-destination="current-require-path"><fo:inline><fo:inline font-size="10pt" font-family="monospace">current-require-path</fo:inline></fo:inline></fo:basic-link>
procedure, the
<fo:basic-link internal-destination="compile-file"><fo:inline><fo:inline font-size="10pt" font-family="monospace">compile-file</fo:inline></fo:inline></fo:basic-link>,
<fo:basic-link internal-destination="compile-library"><fo:inline><fo:inline font-size="10pt" font-family="monospace">compile-library</fo:inline></fo:inline></fo:basic-link>, and
<fo:basic-link internal-destination="compile-stale-libraries"><fo:inline><fo:inline font-size="10pt" font-family="monospace">compile-stale-libraries</fo:inline></fo:inline></fo:basic-link>
procedures described below,
and the
<fo:basic-link internal-destination="compiler-switches"><fo:inline><fo:inline font-size="10pt" font-family="monospace">compiler-switches</fo:inline></fo:inline></fo:basic-link> procedure.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These procedures can be used to compile ERR5RS/R6RS
libraries and top-level programs before they are imported
or executed.
This is especially important for Petit Larceny, which
would otherwise use an interpreter.  For native Larceny,
whose just-in-time compiler generates native machine code
as source libraries and programs are loaded, imported, or
executed, the main advantage of separate compilation is
that compiled libraries and programs will load much
faster than source libraries and programs.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The main disadvantage of separate compilation is that
compiled libraries and programs go <fo:inline font-style="italic">stale</fo:inline> when their
source code is changed or when a library on which they
depend is changed or recompiled.  Stale libraries and
programs can be dangerously inconsistent with libraries
on which they depend, so Larceny checks for staleness
and refuses to execute a stale library or program.
The <fo:basic-link internal-destination="compile-stale-libraries"><fo:inline><fo:inline font-size="10pt" font-family="monospace">compile-stale-libraries</fo:inline></fo:inline></fo:basic-link>
procedure provides a convenient way to recompile stale
libraries and programs.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(compile-file <fo:inline font-style="italic">sourcefile</fo:inline> <fo:inline font-style="italic">[slfaslfile]</fo:inline>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Compiles <fo:inline font-style="italic">sourcefile</fo:inline>, which must be a string naming
a file that contains source code for one or more
ERR5RS/R6RS libraries or a top-level program.
If <fo:inline font-style="italic">slfaslfile</fo:inline> is supplied as a second argument,
then it must be a string naming the file that will
contain the compiled code; otherwise the name of
the compiled file is obtained from <fo:inline font-style="italic">sourcefile</fo:inline>
by replacing the "<fo:inline font-size="10pt" font-family="monospace">.sls</fo:inline>" suffix with "<fo:inline font-size="10pt" font-family="monospace">.slfasl</fo:inline>".</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="compile-library"/>
<fo:inline font-style="italic"> Procedure compile-library</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2578989"><!--compile-library--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(compile-library <fo:inline font-style="italic">sourcefile</fo:inline> <fo:inline font-style="italic">[slfaslfile]</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Compiles <fo:inline font-style="italic">sourcefile</fo:inline>, which must be a string naming
a file that contains source code for one or more
ERR5RS/R6RS libraries.
Apart from its unwillingness to compile top-level
programs, <fo:inline font-size="10pt" font-family="monospace">compile-library</fo:inline> behaves the same as
<fo:inline font-size="10pt" font-family="monospace">compile-file</fo:inline> above.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="compile-stale-libraries"/>
<fo:inline font-style="italic"> Procedure compile-stale-libraries</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2579046"><!--compile-stale-libraries--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(compile-stale-libraries <fo:inline font-style="italic"/>) </fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(compile-stale-libraries <fo:inline font-style="italic">changedfile</fo:inline>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If no argument is supplied, then all "<fo:inline font-size="10pt" font-family="monospace">.sls</fo:inline>" files that
lie within the current directory or a subdirectory are
recompiled.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If <fo:inline font-style="italic">changedfile</fo:inline> is supplied, then it must be a string
giving the absolute pathname of a file.
(In typical usage, <fo:inline font-style="italic">changedfile</fo:inline> is a source file that
has been modified, making it necessary to recompile all
files that depend upon it.)
Compiles all ERR5RS/R6RS library files that lie within
the same directory as <fo:inline font-style="italic">changedfile</fo:inline> or a subdirectory,
and have not yet been compiled or whose compiled files
are older than <fo:inline font-style="italic">changedfile</fo:inline>.</fo:block><fo:block id="id2579111" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In future versions of Larceny, <fo:inline font-size="10pt" font-family="monospace">compile-stale-libraries</fo:inline>
might compile only the source files that depend upon
<fo:inline font-style="italic">changedfile</fo:inline>.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="compiler-switches"/>
<fo:inline font-style="italic"> Procedure compiler-switches</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2579142"><!--compiler-switches--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(compiler-switches <fo:inline font-style="italic"/>) </fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(compiler-switches <fo:inline font-style="italic">mode</fo:inline>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If no argument is supplied, then the current settings
of all compiler switches are displayed.  Each of those
switches is itself a parameter that is exported by the
<fo:inline font-size="10pt" font-family="monospace">(larceny compiler)</fo:inline> library.  Calling any individual
compiler switch with no arguments will return its current
setting.  Calling any individual compiler switch with an
argument (usually a boolean) will change its setting to
that argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">compiler-switches</fo:inline> procedure may also be called with
one of the following symbols as its argument:</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">default</fo:inline>
sets most compiler switches to their default settings.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">fast-safe</fo:inline>
enables all optimizations but continues to generate
code to perform all run-time type and range checks that
are needed for safety
(in the traditional sense, not the R6RS sense).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">fast-unsafe</fo:inline>
enables all optimizations and also disables type and
range checking.  This setting is deprecated because it
compromises safety (in the traditional sense).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">slow</fo:inline>
turns off all optimizations.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">standard</fo:inline>
sets compiler switches for maximal conformance to the
R5RS and R6RS standards.</fo:block><fo:block id="id2579247" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">standard</fo:inline> setting is deprecated because it generates
very slow code (because the R5RS makes it difficult to
inline standard procedures), disables most compile-time
checking (because the R6RS forbids rejection of programs
with obvious errors unless the R6RS classifies the errors
as syntactic), and may also compromise the portability or
interoperability of ERR5RS/R6RS libraries and programs
(because the R6RS outlaws several extensions that Larceny
uses to improve its compatibility with other implementations
of the R5RS and R6RS as well as interoperability between
Larceny's own R5RS and ERR5RS/R6RS modes).</fo:block></fo:block></fo:block><fo:block id="id2579278" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Tip</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Selective toggling of compiler switches is almost always
better than using the <fo:inline font-size="10pt" font-family="monospace">standard</fo:inline> setting.
To improve R5RS conformance without sacrificing too much
performance, set the <fo:inline font-size="10pt" font-family="monospace">benchmark-mode</fo:inline> switch to false and
set the <fo:inline font-size="10pt" font-family="monospace">integrate-procedures</fo:inline> switch to false only when
compiling files that need to be sensitive to redefinitions
of standard procedures.
For R6RS libraries and programs, setting the <fo:inline font-size="10pt" font-family="monospace">benchmark-mode</fo:inline>
and <fo:inline font-size="10pt" font-family="monospace">global-optimization</fo:inline> switches to false will eliminate a
couple of minor conformance issues with only a small loss
of performance and without sacrificing compile-time checking
or portability.</fo:block></fo:block></fo:block></fo:block><fo:block id="LarcenyBenchmarkingSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Benchmarking</fo:marker><fo:block font-size="20.736pt">9.3. Benchmarking</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">(larceny benchmarking)</fo:inline> library exports the
<fo:inline font-size="10pt" font-family="monospace">time</fo:inline> syntax and <fo:inline font-size="10pt" font-family="monospace">run-benchmark</fo:inline> procedure described
below.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Syntax time</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(time expression)</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Evaluates <fo:inline font-style="italic">expression</fo:inline> and returns its result
after printing approximations to the storage
allocated and time taken during evaluation of
<fo:inline font-style="italic">expression</fo:inline>.</fo:block><fo:block id="id2579374" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    &gt; (time (fib 30))
    Words allocated: 0
    Words reclaimed: 0
    Elapsed time...: 49 ms (User: 48 ms; System: 0 ms)
    Elapsed GC time: 0 ms (CPU: 0 in 0 collections.)
    832040</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(run-benchmark <fo:inline font-style="italic">name iterations thunk predicate</fo:inline>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Given the <fo:inline font-style="italic">name</fo:inline> of a benchmark, the number of
<fo:inline font-style="italic">iterations</fo:inline> to be performed, a zero-argument
procedure <fo:inline font-style="italic">thunk</fo:inline> that runs the benchmark,
and a unary <fo:inline font-style="italic">predicate</fo:inline> that checks the result
of <fo:inline font-style="italic">thunk</fo:inline>, prints approximations to the storage
allocated and time taken by <fo:inline font-style="italic">iterations</fo:inline> calls
to <fo:inline font-style="italic">thunk</fo:inline>.</fo:block><fo:block id="id2579431" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    &gt; (run-benchmark "fib30"
                     100
                     (lambda () (fib 30))
                     (lambda (x) (= x 832040)))

    --------------------------------------------------------
    fib30
    Words allocated: 0
    Words reclaimed: 0
    Elapsed time...: 4828 ms (User: 4824 ms; System: 4 ms)
    Elapsed GC time: 0 ms (CPU: 0 in 0 collections.)</fo:block></fo:block><fo:block id="RecordsPrinterSection"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Records printer</fo:marker><fo:block font-size="20.736pt">9.4. Records printer</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">(larceny records printer)</fo:inline> library exports the
two procedures described below.  These procedures
can be used to override Larceny's usual printing
of records and opaque types that were defined using
the records libraries.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rtd-printer"/>
<fo:inline font-style="italic"> Procedure rtd-printer</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2579487"><!--rtd-printer--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rtd-printer <fo:inline font-style="italic">rtd</fo:inline>)  =&gt; <fo:inline font-style="italic">maybe-procedure</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Given a record type descriptor, returns its custom
print procedure, or returns false if the rtd has no
custom print procedure.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rtd-printer-set!"/>
<fo:inline font-style="italic"> Procedure rtd-printer-set!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2579526"><!--rtd-printer-set!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rtd-printer-set! <fo:inline font-style="italic">rtd printer</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Given a record type descriptor <fo:inline font-style="italic">rtd</fo:inline> and a
<fo:inline font-style="italic">printer</fo:inline> for instances of that rtd, installs
<fo:inline font-style="italic">printer</fo:inline> as a custom print procedure for <fo:inline font-style="italic">rtd</fo:inline>.
The <fo:inline font-style="italic">printer</fo:inline> should be a procedure that,
given an instance of the rtd and a textual
output port, writes a representation of the
instance to the port.</fo:block></fo:block></fo:block><fo:block id="LarcenyR5rsLibrariesChapter"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Larceny's R5RS libraries</fo:marker><fo:block font-size="24.8832pt">10. Larceny's R5RS libraries</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The procedures described in this chapter are nonstandard.
Some are deprecated after being rendered obsolete by ERR5RS
or R6RS standard libraries.
Others still provide useful capabilities that the standard
libraries don't.</fo:block><fo:block id="id2579583"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Strings</fo:marker><fo:block font-size="20.736pt">10.1. Strings</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny provides Unicode strings with
<fo:basic-link external-destination="http://www.r6rs.org/">R6RS</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://www.r6rs.org/">http://www.r6rs.org/</fo:basic-link>]</fo:inline>
semantics.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">string-downcase</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">string-upcase</fo:inline> procedures
perform Unicode-compatible case folding, which can result
in a string whose length is different from that of the original.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny may still provide <fo:inline font-size="10pt" font-family="monospace">string-downcase!</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">string-upcase!</fo:inline>
procedures, but they are deprecated.</fo:block></fo:block><fo:block id="id2579630"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Bytevectors</fo:marker><fo:block font-size="20.736pt">10.2. Bytevectors</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A <fo:inline font-style="italic">bytevector</fo:inline> is a data structure that stores bytes — exact
8-bit unsigned integers. Bytevectors are useful in constructing
system interfaces and other low-level programming. In Larceny,
many bytevector-like structures — bignums, for example —
are implemented in terms of a
lower-level <fo:inline font-style="italic">bytevector-like</fo:inline> data type. The operations on
generic bytevector-like structures are particularly fast but
useful largely in code that manipulates Larceny's data
representations.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline><fo:inline font-size="10pt" font-family="monospace">(rnrs bytevectors)</fo:inline> library</fo:inline> now
provides a large set of procedures that, in Larceny, are
defined using the procedures described below.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="make-bytevector"/>
<fo:inline font-style="italic"> Integrable procedure make-bytevector</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2579681"><!--make-bytevector--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(make-bytevector <fo:inline font-style="italic">length</fo:inline>)  =&gt; <fo:inline font-style="italic">bytevector</fo:inline></fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(make-bytevector <fo:inline font-style="italic">length fill</fo:inline>)  =&gt; <fo:inline font-style="italic">bytevector</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a bytevector of the desired length.
If no second argument is given, then the bytevector has not
been initialized and most likely contains garbage.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Operations on bytevector structures</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector? <fo:inline font-style="italic">obj</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector-length <fo:inline font-style="italic">bytevector</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector-ref <fo:inline font-style="italic">bytevector offset</fo:inline>)  =&gt; <fo:inline font-style="italic">byte</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector-set! <fo:inline font-style="italic">bytevector offset byte</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector-equal? <fo:inline font-style="italic">bytevector1 bytevector2</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector-fill! <fo:inline font-style="italic">bytevector byte</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector-copy <fo:inline font-style="italic">bytevector</fo:inline>)  =&gt; <fo:inline font-style="italic">bytevector</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These procedures do what you expect.
All are integrable, except <fo:inline font-size="10pt" font-family="monospace">bytevector-equal?</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">bytevector-copy</fo:inline>.
The <fo:inline font-size="10pt" font-family="monospace">bytevector-equal?</fo:inline> name is deprecated, since the
R6RS calls it <fo:inline font-size="10pt" font-family="monospace">bytevector=?</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Operations on bytevector-like structures</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector-like? <fo:inline font-style="italic">obj</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector-like-length <fo:inline font-style="italic">bytevector</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector-like-ref <fo:inline font-style="italic">bytevector offset</fo:inline>)  =&gt; <fo:inline font-style="italic">byte</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector-like-set! <fo:inline font-style="italic">bytevector offset byte</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector-like-equal? <fo:inline font-style="italic">bytevector1 bytevector2</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bytevector-like-copy <fo:inline font-style="italic">bytevector</fo:inline>)  =&gt; <fo:inline font-style="italic">bytevector</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A bytevector-like structure is a low-level representation
for indexed arrays of uninterpreted bytes.  Bytevector-like
structures are used to represent types such as bignums and
flonums.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There is no way to construct a "generic" bytevector-like
structure; use the constructors for specific bytevector-like
types.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The bytevector-like operations operate on all bytevector-like
structures.  All are integrable, except <fo:inline font-size="10pt" font-family="monospace">bytevector-like-equal?</fo:inline>
and <fo:inline font-size="10pt" font-family="monospace">bytevector-like-copy</fo:inline>.  All are deprecated because they
violate abstraction barriers and make your code
representation-dependent; they are useful mainly to
Larceny developers, who might otherwise be tempted to
write some low-level operations in C or assembly language.</fo:block></fo:block><fo:block id="id2579961"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Vectors</fo:marker><fo:block font-size="20.736pt">10.3. Vectors</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="vector-copy"/>
<fo:inline font-style="italic"> Procedure vector-copy</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2579979"><!--vector-copy--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(vector-copy <fo:inline font-style="italic">vector</fo:inline>)  =&gt; <fo:inline font-style="italic">vector</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a shallow copy of its argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Operations on vector-like structures</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(vector-like? <fo:inline font-style="italic">object</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(vector-like-length <fo:inline font-style="italic">vector-like</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(vector-like-ref <fo:inline font-style="italic">vector-like k</fo:inline>)  =&gt; <fo:inline font-style="italic">object</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(vector-like-set! <fo:inline font-style="italic">vector-like k object</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A vector-like structure is a low-level representation
for indexed arrays of Scheme objects.  Vector-like
structures are used to represent types such as vectors,
records, symbols, and ports.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There is no way to construct a "generic" vector-like structure;
use the constructors for specific data types.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The vector-like operations operate on all vector-like structures.
All are integrable.
All are deprecated because they
violate abstraction barriers and make your code
representation-dependent; they are useful mainly to
Larceny developers, who might otherwise be tempted to
write some low-level operations in C or assembly language.</fo:block></fo:block><fo:block id="id2580080"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Procedures</fo:marker><fo:block font-size="20.736pt">10.4. Procedures</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Operations on procedures</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(make-procedure <fo:inline font-style="italic">length</fo:inline>)  =&gt; <fo:inline font-style="italic">procedure</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(procedure-length <fo:inline font-style="italic">procedure</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(procedure-ref <fo:inline font-style="italic">procedure offset</fo:inline>)  =&gt; <fo:inline font-style="italic">object</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(procedure-set! <fo:inline font-style="italic">procedure offset object</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These procedures operate on the representations of procedures and
allow user programs to construct, inspect, and alter procedures.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="procedure-copy"/>
<fo:inline font-style="italic"> Procedure procedure-copy</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580158"><!--procedure-copy--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(procedure-copy <fo:inline font-style="italic">procedure</fo:inline>)  =&gt; <fo:inline font-style="italic">procedure</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a shallow copy of the procedure.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The procedures above are deprecated because they
violate abstraction barriers and make your code
representation-dependent; they are useful mainly to
Larceny developers, who might otherwise be tempted to
write some low-level operations in C or assembly language.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The rest of this section describes some procedures that
reach through abstraction barriers in a more controlled way
to extract heuristic information from procedures for debugging
purposes.</fo:block><fo:block id="id2580199" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The following
text is copied from a straw proposal authored by Will Clinger and sent
to rrr-authors on 09 May 1996. The text has been edited lightly. See
the end for notes about the Larceny implementation.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The procedures that extract heuristic information from procedures are
permitted to return any result whatsoever. If the type of a result is
not among those listed below, then the result represents an
implementation-dependent extension to this interface, which may safely
be interpreted as though no information were available from the
procedure. Otherwise the result is to be interpreted as described
below.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="procedure-arity"/>
<fo:inline font-style="italic"> Procedure procedure-arity</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580240"><!--procedure-arity--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(procedure-arity <fo:inline font-style="italic">proc</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns information about the arity of <fo:inline font-style="italic">proc</fo:inline>. If the result is <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>,
then no information is available. If the result is an exact
non-negative integer <fo:inline font-style="italic">k</fo:inline>, then <fo:inline font-style="italic">proc</fo:inline> requires exactly <fo:inline font-style="italic">k</fo:inline>
arguments. If the result is an inexact non-negative integer <fo:inline font-style="italic">n</fo:inline>, then
<fo:inline font-style="italic">proc</fo:inline> requires <fo:inline font-style="italic">n</fo:inline> or more arguments. If the result is a pair, then
it is a list of non-negative integers, each of which indicates a
number of arguments that will be accepted by <fo:inline font-style="italic">proc</fo:inline>; the list is not
necessarily exhaustive.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="procedure-documentation-string"/>
<fo:inline font-style="italic"> Procedure procedure-documentation-string</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580316"><!--procedure-documentation-string--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(procedure-documentation-string <fo:inline font-style="italic">proc</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns general information about <fo:inline font-style="italic">proc</fo:inline>. If the result is <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>, then no
information is available. If the result is a string, then it is to be
interpreted as a "documentation string" (see Common Lisp).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="procedure-name"/>
<fo:inline font-style="italic"> Procedure procedure-name</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580362"><!--procedure-name--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(procedure-name <fo:inline font-style="italic">proc</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns information about the name of <fo:inline font-style="italic">proc</fo:inline>. If the result is <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>,
then no information is available. If the result is a symbol or string,
then it represents a name. If the result is a pair, then it is a list
of symbols and/or strings representing a path of names; the first
element represents an outer name and the last element represents an
inner name.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="procedure-source-file"/>
<fo:inline font-style="italic"> Procedure procedure-source-file</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580412"><!--procedure-source-file--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(procedure-source-file <fo:inline font-style="italic">proc</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns information about the name of a file that contains the source
code for <fo:inline font-style="italic">proc</fo:inline>. If the result is <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>, then no information is
available. If the result is a string, then the string is the name of a
file.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="procedure-source-position"/>
<fo:inline font-style="italic"> Procedure procedure-source-position</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580459"><!--procedure-source-position--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(procedure-source-position <fo:inline font-style="italic">proc</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns information about the position of the source code for <fo:inline font-style="italic">proc</fo:inline>
whithin the source file specified by procedure-source-file. If the
result is <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>, then no information is available. If the result is an
exact integer <fo:inline font-style="italic">k</fo:inline>, then <fo:inline font-style="italic">k</fo:inline> characters precede the opening parenthesis
of the source code for <fo:inline font-style="italic">proc</fo:inline> within that source file.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="procedure-expression"/>
<fo:inline font-style="italic"> Procedure procedure-expression</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580520"><!--procedure-expression--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(procedure-expression <fo:inline font-style="italic">proc</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns information about the source code for <fo:inline font-style="italic">proc</fo:inline>. If the result is
<fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>, then no information is available. If the result is a pair, then it
is a lambda expression in the traditional representation of a list.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="procedure-environment"/>
<fo:inline font-style="italic"> Procedure procedure-environment</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580568"><!--procedure-environment--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(procedure-environment <fo:inline font-style="italic">proc</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns information about the environment of <fo:inline font-style="italic">proc</fo:inline>. If the result is
<fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>, then no information is available. In any case the result may be
passed to any of the <fo:inline>environment inquiry functions</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">Notes on the Larceny implementation</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Twobit does not yet produce data for all of these functions, so some
of them always return <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>.</fo:block></fo:block><fo:block id="id2580626"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Pairs and Lists</fo:marker><fo:block font-size="20.736pt">10.5. Pairs and Lists</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">(rnrs lists)</fo:inline> library now
provides a set of procedures that may supersede some
of the procedures described below.
If one of Larceny's procedures duplicates the semantics of
an R6RS procedure whose name is different, then Larceny's
name is deprecated.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="append!"/>
<fo:inline font-style="italic"> Procedure append!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580659"><!--append!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(append! <fo:inline font-style="italic">list1 list2 … obj</fo:inline>)  =&gt; <fo:inline font-style="italic">object</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">append!</fo:inline> destructively appends its arguments, which must be lists, and
returns the resulting list. The last argument can be any object. The
argument lists are appended by changing the cdr of the last pair of
each argument except the last to point to the next argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="every?"/>
<fo:inline font-style="italic"> Procedure every?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580703"><!--every?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(every? <fo:inline font-style="italic">procedure list1 list2 …</fo:inline>)  =&gt; <fo:inline font-style="italic">object</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">every?</fo:inline> applies <fo:inline font-style="italic">procedure</fo:inline> to each element tuple of <fo:inline font-style="italic">list_s in
first-to-last order, and returns <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> as soon as _procedure</fo:inline> returns
<fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>. If <fo:inline font-style="italic">procedure</fo:inline> does not return <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> for any element tuple of
<fo:inline font-style="italic">list_s, then the value returned by _procedure</fo:inline> for the last element
tuple of _list_s is returned.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="last-pair"/>
<fo:inline font-style="italic"> Procedure last-pair</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580777"><!--last-pair--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(last-pair <fo:inline font-style="italic">list-structure</fo:inline>)  =&gt; <fo:inline font-style="italic">pair</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">last-pair</fo:inline> returns the last pair of the <fo:inline font-style="italic">list structure</fo:inline>, which must be
a sequence of pairs linked through the cdr fields.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="list-copy"/>
<fo:inline font-style="italic"> Procedure list-copy</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580822"><!--list-copy--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(list-copy <fo:inline font-style="italic">list-copy</fo:inline>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">list-copy</fo:inline> makes a shallow copy of the <fo:inline font-style="italic">list</fo:inline> and returns that copy.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="remove"/>
<fo:inline font-style="italic"> Procedure remove</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580864"><!--remove--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(remove <fo:inline font-style="italic">key list</fo:inline>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline>
</fo:block>
<fo:inline id="remq"/>
<fo:inline font-style="italic"> Procedure remq</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580895"><!--remq--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(remq <fo:inline font-style="italic">key list</fo:inline>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline>
</fo:block>
<fo:inline id="remv"/>
<fo:inline font-style="italic"> Procedure remv</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580925"><!--remv--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(remv <fo:inline font-style="italic">key list</fo:inline>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline>
</fo:block>
<fo:inline id="remp"/>
<fo:inline font-style="italic"> Procedure remp</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2580956"><!--remp--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(remp <fo:inline font-style="italic">pred? list</fo:inline>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Each of these procedures returns a new list which contains all the
elements of <fo:inline font-style="italic">list</fo:inline> in the original order, except that those elements of
the original list that were equal to <fo:inline font-style="italic">key</fo:inline> (or that satisfy <fo:inline font-style="italic">pred?</fo:inline>) are
not in the new list. Remove uses <fo:inline font-size="10pt" font-family="monospace">equal?</fo:inline> as the equivalence predicate;
<fo:inline font-size="10pt" font-family="monospace">remq</fo:inline> uses <fo:inline font-size="10pt" font-family="monospace">eq?</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">remv</fo:inline> uses <fo:inline font-size="10pt" font-family="monospace">eqv?</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="remove!"/>
<fo:inline font-style="italic"> Procedure remove!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581034"><!--remove!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(remove! <fo:inline font-style="italic">key list</fo:inline>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline>
</fo:block>
<fo:inline id="remq!"/>
<fo:inline font-style="italic"> Procedure remq!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581065"><!--remq!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(remq! <fo:inline font-style="italic">key list</fo:inline>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline>
</fo:block>
<fo:inline id="remv!"/>
<fo:inline font-style="italic"> Procedure remv!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581095"><!--remv!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(remv! <fo:inline font-style="italic">key list</fo:inline>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline>
</fo:block>
<fo:inline id="remp!"/>
<fo:inline font-style="italic"> Procedure remp!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581126"><!--remp!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(remp! <fo:inline font-style="italic">pred? list</fo:inline>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These procedures are like <fo:inline font-size="10pt" font-family="monospace">remove</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">remq</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">remv</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">remp</fo:inline>,
except they modify <fo:inline font-style="italic">list</fo:inline> instead of returning a fresh list.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="reverse!"/>
<fo:inline font-style="italic"> Procedure reverse!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581186"><!--reverse!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(reverse! <fo:inline font-style="italic">list</fo:inline>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">reverse!</fo:inline> destructively reverses its argument and returns the reversed
list.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="some?"/>
<fo:inline font-style="italic"> Procedure some?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581227"><!--some?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(some? <fo:inline font-style="italic">procedure list1 list2 …</fo:inline>)  =&gt; <fo:inline font-style="italic">object</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">some?</fo:inline> applies <fo:inline font-style="italic">procedure</fo:inline> to each element tuple of <fo:inline font-style="italic">list_s in
first-to-last order, and returns the first non-false value returned by
_procedure.</fo:inline> If <fo:inline font-style="italic">procedure</fo:inline> does not return a true value for any
element tuple of _list_s, then some? returns <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>.</fo:block></fo:block><fo:block id="id2581276"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Sorting</fo:marker><fo:block font-size="20.736pt">10.6. Sorting</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">(rnrs sorting)</fo:inline> library now
provides a small set of procedures that supersede most
of the procedures described below.
All of the procedures described below are therefore
deprecated.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Procedures sort and sort!</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(sort <fo:inline font-style="italic">list less?</fo:inline>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(sort <fo:inline font-style="italic">vector less?</fo:inline>)  =&gt; <fo:inline font-style="italic">vector</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(sort! <fo:inline font-style="italic">list less?</fo:inline>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(sort! <fo:inline font-style="italic">vector less?</fo:inline>)  =&gt; <fo:inline font-style="italic">vector</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These procedures sort their argument (a list or a vector) according to
the predicate <fo:inline font-style="italic">less?</fo:inline>, which must implement a total order on the
elements in the data structures that are sorted.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">sort</fo:inline> returns a fresh data structure containing the sorted data;
<fo:inline font-size="10pt" font-family="monospace">sort!</fo:inline> sorts the data structure in-place.</fo:block></fo:block><fo:block id="id2581377"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Records</fo:marker><fo:block font-size="20.736pt">10.7. Records</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="id2581382" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny's records have been extended to implement all
<fo:basic-link external-destination="http://scheme-punks.org/wiki/index.php?title=Main_Page">ERR5RS</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://scheme-punks.org/wiki/index.php?title=Main_Page">http://scheme-punks.org/wiki/index.php?title=Main_Page</fo:basic-link>]</fo:inline>
and
<fo:basic-link external-destination="http://www.r6rs.org/">R6RS</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://www.r6rs.org/">http://www.r6rs.org/</fo:basic-link>]</fo:inline>
procedures from</fo:block><fo:block id="id2581401" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(err5rs records procedural)
(err5rs records inspection)
(rnrs records procedural)
(rnrs records inspection)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">We recommend that Larceny programmers use the ERR5RS APIs instead
of the R6RS APIs.  This should entail no loss of portability, since
the standard reference implementation of ERR5RS records should run
efficiently in any implementation of the R6RS that permits new
libraries to defined at all.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny now has two kinds of records: old-style and ERR5RS/R6RS.
Old-style records cannot be created in R6RS-conforming mode, so
our extension of R6RS procedures to accept old-style records does
not affect R6RS conformance.</fo:block></fo:block></fo:block><fo:block id="id2581432" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The following specification describes Larceny's old-style record API,
which is now deprecated.  It
is based on a proposal posted by Pavel Curtis to
rrrs-authors on 10 Sep 1989, and later re-posted by Norman Adams to
comp.lang.scheme on 5 Feb 1992. The authorship and copyright status of
the original text are unknown to me.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This document differs from the original proposal in that its record
types are extensible, and that it specifies the type of record-type
descriptors.</fo:block></fo:block></fo:block><fo:block id="id2581455"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.7.1. Specification</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="make-record-type"/>
<fo:inline font-style="italic"> Procedure make-record-type</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581473"><!--make-record-type--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(make-record-type <fo:inline font-style="italic">type-name field-names</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a "record-type descriptor", a value representing a new data
type, disjoint from all others. The <fo:inline font-style="italic">type-name</fo:inline> argument must be a
string, but is only used for debugging purposes (such as the printed
representation of a record of the new type). The <fo:inline font-style="italic">field-names</fo:inline>
argument is a list of symbols naming the "fields" of a record of the
new type. It is an error if the list contains any duplicates.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the <fo:inline font-style="italic">parent-rtd</fo:inline> argument is provided, then the new type will be a
subtype of the type represented by <fo:inline font-style="italic">parent-rtd</fo:inline>, and the field names
of the new type will include all the field names of the parent
type. It is an error if the complete list of field names contains any
duplicates.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Record-type descriptors are themselves records. In particular,
record-type descriptors have a field printer that is either <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> or a
procedure. If the value of the field is a procedure, then the
procedure will be called to print records of the type represented by
the record-type descriptor. The procedure must accept two arguments:
the record object to be printed and an output port.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="record-constructor"/>
<fo:inline font-style="italic"> Procedure record-constructor</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581559"><!--record-constructor--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(record-constructor <fo:inline font-style="italic">rtd</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a procedure for constructing new members of the type
represented by <fo:inline font-style="italic">rtd.</fo:inline> The returned procedure accepts exactly as many
arguments as there are symbols in the given list, <fo:inline font-style="italic">field-names</fo:inline>; these
are used, in order, as the initial values of those fields in a new
record, which is returned by the constructor procedure. The values of
any fields not named in that list are unspecified. The field-names
argument defaults to the list of field-names in the call to
make-record-type that created the type represented by <fo:inline font-style="italic">rtd</fo:inline>; if the
<fo:inline font-style="italic">field-names</fo:inline> argument is provided, it is an error if it contains any
duplicates or any symbols not in the default list.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="record-predicate"/>
<fo:inline font-style="italic"> Procedure record-predicate</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581621"><!--record-predicate--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(record-predicate <fo:inline font-style="italic">rtd</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a procedure for testing membership in the type represented by
<fo:inline font-style="italic">rtd.</fo:inline> The returned procedure accepts exactly one argument and returns
a true value if the argument is a member of the indicated record type
or one of its subtypes; it returns a false value otherwise.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="record-accessor"/>
<fo:inline font-style="italic"> Procedure record-accessor</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581664"><!--record-accessor--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(record-accessor <fo:inline font-style="italic">rtd field-name</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a procedure for reading the value of a particular field of a
member of the type represented by <fo:inline font-style="italic">rtd.</fo:inline> The returned procedure
accepts exactly one argument which must be a record of the appropriate
type; it returns the current value of the field named by the symbol
<fo:inline font-style="italic">field-name</fo:inline> in that record. The symbol field-name must be a member of
the list of field-names in the call to make-record-type that created
the type represented by <fo:inline font-style="italic">rtd</fo:inline>, or a member of the field-names of the
parent type of the type represented by <fo:inline font-style="italic">rtd.</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="record-updater"/>
<fo:inline font-style="italic"> Procedure record-updater</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581723"><!--record-updater--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(record-updater <fo:inline font-style="italic">rtd field-name</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a procedure for writing the value of a particular field of a
member of the type represented by <fo:inline font-style="italic">rtd.</fo:inline> The returned procedure
accepts exactly two arguments: first, a record of the appropriate
type, and second, an arbitrary Scheme value; it modifies the field
named by the symbol <fo:inline font-style="italic">field-name</fo:inline> in that record to contain the given
value. The returned value of the updater procedure is unspecified. The
symbol <fo:inline font-style="italic">field-name</fo:inline> must be a member of the list of field-names in the
call to make-record-type that created the type represented by <fo:inline font-style="italic">rtd</fo:inline>,
or a member of the field-names of the parent type of the type
represented by <fo:inline font-style="italic">rtd.</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(record? <fo:inline font-style="italic">obj</fo:inline>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a true value if <fo:inline font-style="italic">obj</fo:inline> is a record of any type and a false value
otherwise. Note that <fo:inline font-size="10pt" font-family="monospace">record?</fo:inline> may be true of any Scheme value; of
course, if it returns true for some particular value, then
<fo:inline font-size="10pt" font-family="monospace">record-type-descriptor</fo:inline> is applicable to that value and returns an
appropriate descriptor.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="record-type-descriptor"/>
<fo:inline font-style="italic"> Procedure record-type-descriptor</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581823"><!--record-type-descriptor--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(record-type-descriptor <fo:inline font-style="italic">record</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a record-type descriptor representing the type of the given
record. That is, for example, if the returned descriptor were passed
to record-predicate, the resulting predicate would return a true value
when passed the given record. Note that it is not necessarily the case
that the returned descriptor is the one that was passed to
record-constructor in the call that created the constructor procedure
that created the given record.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="record-type-name"/>
<fo:inline font-style="italic"> Procedure record-type-name</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581867"><!--record-type-name--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(record-type-name <fo:inline font-style="italic">rtd</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the type-name associated with the type represented by <fo:inline font-style="italic">rtd.</fo:inline>
The returned value is eqv? to the type-name argument given in the call
to make-record-type that created the type represented by rtd.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="record-type-field-names"/>
<fo:inline font-style="italic"> Procedure record-type-field-names</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581909"><!--record-type-field-names--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(record-type-field-names <fo:inline font-style="italic">rtd</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a list of the symbols naming the fields in members of the type
represented by <fo:inline font-style="italic">rtd.</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="record-type-parent"/>
<fo:inline font-style="italic"> Procedure record-type-parent</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2581948"><!--record-type-parent--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(record-type-parent <fo:inline font-style="italic">rtd</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a record-type descriptor for the parent type of the type
represented by <fo:inline font-style="italic">rtd</fo:inline>, if that type has a parent type, or a false value
otherwise. The type represented by <fo:inline font-style="italic">rtd</fo:inline> has a parent type if the call
to make-record-type that created <fo:inline font-style="italic">rtd</fo:inline> provided the <fo:inline font-style="italic">parent-rtd</fo:inline>
argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="record-type-extends?"/>
<fo:inline font-style="italic"> Procedure record-type-extends?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582002"><!--record-type-extends?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(record-type-extends? <fo:inline font-style="italic">rtd1 rtd2</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a true value if the type represented by <fo:inline font-style="italic">rtd1</fo:inline> is a subtype of
the type represented by <fo:inline font-style="italic">rtd2</fo:inline> and a false value otherwise. A type <fo:inline font-style="italic">s</fo:inline>
is a subtype of a type <fo:inline font-style="italic">t</fo:inline> if <fo:inline font-style="italic">s=t</fo:inline> or if the parent type of <fo:inline font-style="italic">s</fo:inline>, if
it exists, is a subtype of <fo:inline font-style="italic">t.</fo:inline></fo:block></fo:block><fo:block id="id2582048"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.7.2. Implementation</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The R6RS spouts some tendentious nonsense about procedural
records being slower than syntactic records, but this is not
true of Larceny's records, and is unlikely to be true of other
implementations either.
Larceny's procedural records are fairly efficient already,
and will become even more efficient in future versions as
interlibrary optimizations are added.</fo:block></fo:block></fo:block><fo:block id="id2582069"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Input, Output, and Files</fo:marker><fo:block font-size="20.736pt">10.8. Input, Output, and Files</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">(rnrs io ports)</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">(rnrs files)</fo:inline> libraries now
provide a set of procedures that may supersede some
of the procedures described below.
If one of Larceny's procedures duplicates the semantics of
an R6RS procedure whose name is different, then Larceny's
name is deprecated.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="close-open-files"/>
<fo:inline font-style="italic"> Procedure close-open-files</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582107"><!--close-open-files--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(close-open-files <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Closes all open files.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="console-input-port"/>
<fo:inline font-style="italic"> Procedure console-input-port</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582142"><!--console-input-port--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(console-input-port <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">input-port</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a character input port such that no read from the port has
signalled an error or returned the end-of-file object.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Rationale:</fo:inline> console-input-port and console-output-port are artifacts
of Unix interactive I/O conventions, where an interactive end-of-file
does not mean "quit" but rather "done here". Under these conventions
the console port should be reset following an end-of-file. Resetting
conflicts with the semantics of ports in Scheme, so console-input-port
and console-output-port return a new port if the current port is
already at end-of-file.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Since it is convenient to handle errors in the same manner as
end-of-file, these procedures also return a new port if an error has
been signalled during an I/O operation on the port.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Console-input-port and console-output-port simply call the port
generators installed in the parameters console-input-port-factory and
console-output-port-factory, which allow user programs to install
their own console port generators.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="console-output-port"/>
<fo:inline font-style="italic"> Procedure console-output-port</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582212"><!--console-output-port--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(console-output-port <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">output-port</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a character output port such that no write to the port has
signalled an error.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">See console-input-port for a full explanation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="console-input-port-factory"/>
<fo:wrapper id="id2582248"><!--console-input-port-factory--></fo:wrapper>
<fo:inline font-style="italic">Parameter console-input-port-factory</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The value of this parameter is a procedure that returns a character
input port such that no read from the port has signalled an error or
returned the end-of-file object.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">See console-input-port for a full explanation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="console-output-port-factory"/>
<fo:wrapper id="id2582280"><!--console-output-port-factory--></fo:wrapper>
<fo:inline font-style="italic">Parameter console-output-port-factory</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The value of this parameter is a procedure that returns a character
output port such that no write the port has signalled an error.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">See console-input-port for a full explanation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="current-input-port"/>
<fo:wrapper id="id2582312"><!--current-input-port--></fo:wrapper>
<fo:inline font-style="italic">Parameter current-input-port</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The value of this parameter is a character input port.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="current-output-port"/>
<fo:wrapper id="id2582335"><!--current-output-port--></fo:wrapper>
<fo:inline font-style="italic">Parameter current-output-port</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The value of this parameter is a character output port.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="delete-file"/>
<fo:inline font-style="italic"> Procedure delete-file</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582364"><!--delete-file--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(delete-file <fo:inline font-style="italic">filename</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Deletes the named file. No error is signalled if the file does not
exist.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="eof-object"/>
<fo:inline font-style="italic"> Procedure eof-object</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582404"><!--eof-object--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(eof-object <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">end-of-file object</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Eof-object</fo:inline> returns an end-of-file object.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="file-exists?"/>
<fo:inline font-style="italic"> Procedure file-exists?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582446"><!--file-exists?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(file-exists? <fo:inline font-style="italic">filename</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">File-exists? returns #t if the named file exists at the time the
procedure is called.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="file-modification-time"/>
<fo:inline font-style="italic"> Procedure file-modification-time</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582490"><!--file-modification-time--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(file-modification-time <fo:inline font-style="italic">filename</fo:inline>)  =&gt; <fo:inline font-style="italic">vector or #f</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">File-modification-time returns the time of last modification of the
file as a vector, or #f if the file does not exist. The vector has six
elements: year, month, day, hour, minute, second, all of which are
exact nonnegative integers. The time returned is relative to the local
timezone.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">     (file-modification-time "larceny") =&gt; #(1997 2 6 12 51 13)</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">     (file-modification-time "geekdom") =&gt; #f</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="flush-output-port"/>
<fo:inline font-style="italic"> Procedure flush-output-port</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582557"><!--flush-output-port--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(flush-output-port <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(flush-output-port <fo:inline font-style="italic">port</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Write any buffered data in the port to the underlying output medium.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="get-output-string"/>
<fo:inline font-style="italic"> Procedure get-output-string</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582610"><!--get-output-string--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(get-output-string <fo:inline font-style="italic">string-output-port</fo:inline>)  =&gt; <fo:inline font-style="italic">string</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Retrieve the output string from the given string output port.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="open-input-string"/>
<fo:inline font-style="italic"> Procedure open-input-string</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582652"><!--open-input-string--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(open-input-string <fo:inline font-style="italic">string</fo:inline>)  =&gt; <fo:inline font-style="italic">input-port</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Creates an input port that reads from <fo:inline font-style="italic">string</fo:inline>. The string may be
shared with the caller. A string input port does not need to be
closed, although closing it will prevent further reads from it.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="open-output-string"/>
<fo:inline font-style="italic"> Procedure open-output-string</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582700"><!--open-output-string--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(open-output-string <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">output-port</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Creates an output port where any output is written to a string. The
accumulated string can be retrieved with
<fo:basic-link internal-destination="get-output-string"><fo:inline>get-output-string</fo:inline></fo:basic-link> at any time.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="port?"/>
<fo:inline font-style="italic"> Procedure port?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582749"><!--port?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(port? <fo:inline font-style="italic">object</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Tests whether its argument is a port.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="port-name"/>
<fo:inline font-style="italic"> Procedure port-name</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582790"><!--port-name--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(port-name <fo:inline font-style="italic">port</fo:inline>)  =&gt; <fo:inline font-style="italic">string</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the name associated with the port; for file ports, this is the file name.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="port-position"/>
<fo:inline font-style="italic"> Procedure port-position</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582831"><!--port-position--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(port-position <fo:inline font-style="italic">port</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the number of characters that have been read from or written to the port.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="rename-file"/>
<fo:inline font-style="italic"> Procedure rename-file</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582872"><!--rename-file--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(rename-file <fo:inline font-style="italic">from to</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Renames the file <fo:inline font-style="italic">from</fo:inline> and gives it the name <fo:inline font-style="italic">to</fo:inline>. No error is
signalled if <fo:inline font-style="italic">from</fo:inline> does not exist or <fo:inline font-style="italic">to</fo:inline> exists.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="reset-output-string"/>
<fo:inline font-style="italic"> Procedure reset-output-string</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582928"><!--reset-output-string--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(reset-output-string <fo:inline font-style="italic">port</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Given a <fo:inline font-style="italic">port</fo:inline> created with <fo:inline font-style="italic">open-output-string</fo:inline>, deletes from the
port all the characters that have been output so far.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="with-input-from-port"/>
<fo:inline font-style="italic"> Procedure with-input-from-port</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2582979"><!--with-input-from-port--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(with-input-from-port <fo:inline font-style="italic">input-port thunk</fo:inline>)  =&gt; <fo:inline font-style="italic">object</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Calls <fo:inline font-style="italic">thunk</fo:inline> with current input bound to <fo:inline font-style="italic">input-port</fo:inline> in the dynamic
extent of <fo:inline font-style="italic">thunk</fo:inline>. Returns whatever value was returned from <fo:inline font-style="italic">thunk</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="with-output-to-port"/>
<fo:inline font-style="italic"> Procedure with-output-to-port</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583036"><!--with-output-to-port--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(with-output-to-port <fo:inline font-style="italic">output-port thunk</fo:inline>)  =&gt; <fo:inline font-style="italic">object</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Calls <fo:inline font-style="italic">thunk</fo:inline> with current output bound to <fo:inline font-style="italic">output-port</fo:inline> in the
dynamic extent of <fo:inline font-style="italic">thunk</fo:inline>. Returns whatever value was returned from
<fo:inline font-style="italic">thunk</fo:inline>.</fo:block></fo:block><fo:block id="id2583079"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Operating System Interface</fo:marker><fo:block font-size="20.736pt">10.9. Operating System Interface</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="command-line-arguments"/>
<fo:inline font-style="italic"> Procedure command-line-arguments</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583101"><!--command-line-arguments--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(command-line-arguments <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">vector</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a vector of strings: the arguments supplied to the program by
the user or the operating system.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="dump-heap"/>
<fo:inline font-style="italic"> Procedure dump-heap</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583144"><!--dump-heap--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(dump-heap <fo:inline font-style="italic">filename procedure</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Dump a heap image to the named file that will start up with the
supplied procedure. Before <fo:inline font-style="italic">procedure</fo:inline> is called, command line
arguments will be parsed and any init procedures registered with
<fo:inline font-size="10pt" font-family="monospace">add-init-procedure!</fo:inline>  will be called.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Note: Currently, heap dumping is only available with the
stop-and-copy collector (<fo:inline font-size="10pt" font-family="monospace">-stopcopy</fo:inline> command line option), although the
heap image can be used with all the other collectors.</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="dump-interactive-heap"/>
<fo:inline font-style="italic"> Procedure dump-interactive-heap</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583217"><!--dump-interactive-heap--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(dump-interactive-heap <fo:inline font-style="italic">filename</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Dump a heap image to the named file that will start up with the
standard read-eval-print loop. Before the read-eval-print loop is
called, command line arguments will be parsed and any init procedures
registered with <fo:inline font-size="10pt" font-family="monospace">add-init-procedure!</fo:inline>
will be called.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Note: Currently, heap dumping is only available with the
stop-and-copy collector (<fo:inline font-size="10pt" font-family="monospace">-stopcopy</fo:inline> command line option), although the
heap image can be used with all the other collectors.</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="getenv"/>
<fo:inline font-style="italic"> Procedure getenv</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583284"><!--getenv--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(getenv <fo:inline font-style="italic">key</fo:inline>)  =&gt; <fo:inline font-style="italic">string or #f</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the operating system environment mapping for the string <fo:inline font-style="italic">key</fo:inline>,
or <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> if there is no mapping for <fo:inline font-style="italic">key</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="system"/>
<fo:inline font-style="italic"> Procedure system</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583337"><!--system--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(system <fo:inline font-style="italic">command</fo:inline>)  =&gt; <fo:inline font-style="italic">status</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Send the <fo:inline font-style="italic">command</fo:inline> to the operating system's command processor and
return the command's exit status, if any. On Unix, <fo:inline font-style="italic">command</fo:inline> is a
string and <fo:inline font-style="italic">status</fo:inline> is an exact integer.</fo:block></fo:block><fo:block id="FixnumPrimitives"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Fixnum primitives</fo:marker><fo:block font-size="20.736pt">10.10. Fixnum primitives</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Fixnums are small exact integers that are likely to be
represented without heap
allocation. Larceny never represents a number that can be
represented as a fixnum any other way, so programs that can use
fixnums will do so automatically. However, operations that work only
on fixnums can sometimes be substantially faster than generic
operations, and the following primitives are provided for use in those
programs that need especially good performance.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">(rnrs arithmetic fixnums)</fo:inline> library now
provides a large set of procedures that, in Larceny, are
defined using the procedures described below.
If one of Larceny's procedures duplicates the semantics of
an R6RS procedure whose name is different, then Larceny's
name is deprecated.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">All arguments to the following procedures must be fixnums.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fixnum?"/>
<fo:inline font-style="italic"> Procedure fixnum?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583445"><!--fixnum?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fixnum? <fo:inline font-style="italic">obj</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> if its argument is a fixnum, and <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> otherwise.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fx+"/>
<fo:inline font-style="italic"> Procedure fx+</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583496"><!--fx+--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fx+ <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the fixnum sum of its arguments. If the result is not
representable as a fixnum, then an error is signalled (unless error
checking has been disabled).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fx-"/>
<fo:inline font-style="italic"> Procedure fx-</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583538"><!--fx- --></fo:wrapper>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the fixnum difference of its arguments. If the result is not
representable as a fixnum, then an error is signalled.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fx&#x2014;"/>
<fo:inline font-style="italic"> Procedure fx—</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583570"><!--fx—--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fx— <fo:inline font-style="italic">fix1</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the fixnum negative of its argument. If the result is not
representable as a fixnum, then an error is signalled.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fx*"/>
<fo:inline font-style="italic"> Procedure fx*</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583613"><!--fx*--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fx* <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the fixnum product of its arguments. If the result is not
representable as a fixnum, then an error is signalled.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fx="/>
<fo:inline font-style="italic"> Procedure fx=</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583656"><!--fx=--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fx= <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> if its arguments are equal, and <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> otherwise.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fx&lt;"/>
<fo:inline font-style="italic"> Procedure fx&lt;</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583708"><!--fx<--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fx&lt; <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> if <fo:inline font-style="italic">fix1</fo:inline> is less than <fo:inline font-style="italic">fix2</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> otherwise.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fx&lt;="/>
<fo:inline font-style="italic"> Procedure fx&lt;=</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583767"><!--fx<=--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fx&lt;= <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> if <fo:inline font-style="italic">fix1</fo:inline> is less than or equal to <fo:inline font-style="italic">fix2</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>
otherwise.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fx&gt;"/>
<fo:inline font-style="italic"> Procedure fx&gt;</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583825"><!--fx>--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fx&gt; <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> if <fo:inline font-style="italic">fix1</fo:inline> is greater than <fo:inline font-style="italic">fix2</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> otherwise.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fx&gt;="/>
<fo:inline font-style="italic"> Procedure fx&gt;=</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583884"><!--fx>=--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fx&gt;= <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> if <fo:inline font-style="italic">fix1</fo:inline> is greater than or equal to <fo:inline font-style="italic">fix2</fo:inline>, and <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>
otherwise.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fxnegative?"/>
<fo:inline font-style="italic"> Procedure fxnegative?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583943"><!--fxnegative?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fxnegative? <fo:inline font-style="italic">fix</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> if its argument is less than zero, and <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> otherwise.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fxpositive?"/>
<fo:inline font-style="italic"> Procedure fxpositive?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2583995"><!--fxpositive?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fxpositive? <fo:inline font-style="italic">fix</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> if its argument is greater than zero, and <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> otherwise.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fxzero?"/>
<fo:inline font-style="italic"> Procedure fxzero?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584047"><!--fxzero?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fxzero? <fo:inline font-style="italic">fix</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> if its argument is zero, and <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> otherwise.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fxlogand"/>
<fo:inline font-style="italic"> Procedure fxlogand</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584098"><!--fxlogand--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fxlogand <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the bitwise <fo:inline font-style="italic">and</fo:inline> of its arguments.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fxlogior"/>
<fo:inline font-style="italic"> Procedure fxlogior</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584142"><!--fxlogior--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fxlogior <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the bitwise <fo:inline font-style="italic">inclusive or</fo:inline> of its arguments.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fxlognot"/>
<fo:inline font-style="italic"> Procedure fxlognot</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584185"><!--fxlognot--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fxlognot <fo:inline font-style="italic">fix</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the bitwise <fo:inline font-style="italic">not</fo:inline> of its argument.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fxlogxor"/>
<fo:inline font-style="italic"> Procedure fxlogxor</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584228"><!--fxlogxor--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fxlogxor <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the bitwise <fo:inline font-style="italic">exclusive or</fo:inline> of its arguments.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fxlsh"/>
<fo:inline font-style="italic"> Procedure fxlsh</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584273"><!--fxlsh--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fxlsh <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns <fo:inline font-style="italic">fix1</fo:inline> shifted left <fo:inline font-style="italic">fix2</fo:inline> places, shifting in zero bits at
the low end. If the shift count exceeds the number of bits in the
machine's word size, then the results are machine-dependent.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="most-positive-fixnum"/>
<fo:inline font-style="italic"> Procedure most-positive-fixnum</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584325"><!--most-positive-fixnum--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(most-positive-fixnum <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the largest representable positive fixnum.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="most-negative-fixnum"/>
<fo:inline font-style="italic"> Procedure most-negative-fixnum</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584365"><!--most-negative-fixnum--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(most-negative-fixnum <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the smallest representable negative fixnum.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fxrsha"/>
<fo:inline font-style="italic"> Procedure fxrsha</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584404"><!--fxrsha--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fxrsha <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns <fo:inline font-style="italic">fix1</fo:inline> shifted right <fo:inline font-style="italic">fix2</fo:inline> places, shifting in a copy of the
sign bit at the left end. If the shift count exceeds the number of
bits in the machine's word size, then the results are
machine-dependent.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="fxrshl"/>
<fo:inline font-style="italic"> Procedure fxrshl</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584455"><!--fxrshl--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(fxrshl <fo:inline font-style="italic">fix1 fix2</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns <fo:inline font-style="italic">fix1</fo:inline> shifted right <fo:inline font-style="italic">fix2</fo:inline> places, shifting in zero bits at
the high end. If the shift count exceeds the number of bits in the
machine's word size, then the results are machine-dependent.</fo:block></fo:block><fo:block id="id2584491"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Numbers</fo:marker><fo:block font-size="20.736pt">10.11. Numbers</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny has six representations for numbers: <fo:inline font-style="italic">fixnums</fo:inline> are small,
exact integers; <fo:inline font-style="italic">bignums</fo:inline> are unlimited-precision exact integers;
<fo:inline font-style="italic">ratnums</fo:inline> are exact rationals; <fo:inline font-style="italic">flonums</fo:inline> are inexact rationals;
<fo:inline font-style="italic">rectnums</fo:inline> are exact complexes; and <fo:inline font-style="italic">compnums</fo:inline> are inexact complexes.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Number-representation predicates</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(fixnum? <fo:inline font-style="italic">obj</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(bignum? <fo:inline font-style="italic">obj</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(ratnum? <fo:inline font-style="italic">obj</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(flonum? <fo:inline font-style="italic">obj</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(rectnum? <fo:inline font-style="italic">obj</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(compnum? <fo:inline font-style="italic">obj</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These predicates test whether an object is a number of a particular
representation and return <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> if so, <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> if not.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="random"/>
<fo:inline font-style="italic"> Procedure random</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584643"><!--random--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(random <fo:inline font-style="italic">limit</fo:inline>)  =&gt; <fo:inline font-style="italic">exact integer</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a pseudorandom nonnegative exact integer in the range 0
through <fo:inline font-style="italic">limit</fo:inline>-1.</fo:block></fo:block><fo:block id="id2584675"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Hashtables and hash functions</fo:marker><fo:block font-size="20.736pt">10.12. Hashtables and hash functions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Hashtables represent finite mappings from keys to values.
If the hash function is a good one, then the value associated
with a key may be looked up in constant time (on the average).</fo:block><fo:block id="id2584688" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The R6RS hashtables library are a big improvement
over Larceny's traditional hash tables, and should be used
instead of the API described below.</fo:block></fo:block></fo:block><fo:block id="id2584699" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To resolve a clash of names and semantics with the
R6RS <fo:inline font-size="10pt" font-family="monospace">make-hashtable</fo:inline> procedure, Larceny's traditional
<fo:inline font-size="10pt" font-family="monospace">make-hashtable</fo:inline> procedure has been renamed to
<fo:inline font-size="10pt" font-family="monospace">make-oldstyle-hashtable</fo:inline>.</fo:block></fo:block></fo:block><fo:block id="id2584728"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.12.1. Hash tables</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="make-oldstyle-hashtable"/>
<fo:inline font-style="italic"> Procedure make-oldstyle-hashtable</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584749"><!--make-oldstyle-hashtable--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(make-oldstyle-hashtable <fo:inline font-style="italic">hash-function bucket-searcher size</fo:inline>)  =&gt; <fo:inline font-style="italic">hashtable</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a newly allocated mutable hash table using <fo:inline font-style="italic">hash-function</fo:inline> as
the hash function and <fo:inline font-style="italic">bucket-searcher</fo:inline>, e.g. <fo:inline font-size="10pt" font-family="monospace">assq</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">assv</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">assoc</fo:inline>, to
search a bucket with <fo:inline font-style="italic">size</fo:inline> buckets at first, expanding the number of
buckets as needed. The <fo:inline font-style="italic">hash-function</fo:inline> must accept a key and return a
non-negative exact integer.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(make-oldstyle-hashtable <fo:inline font-style="italic">hash-function bucket-searcher</fo:inline>)  =&gt; <fo:inline font-style="italic">hashtable</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Equivalent to <fo:inline font-size="10pt" font-family="monospace">(make-oldstyle-hashtable <fo:inline font-style="italic">hash-function bucket-searcher n</fo:inline>)</fo:inline> for
some value of <fo:inline font-style="italic">n</fo:inline> chosen by the implementation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(make-oldstyle-hashtable <fo:inline font-style="italic">hash-function</fo:inline>)  =&gt; <fo:inline font-style="italic">hashtable</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Equivalent to <fo:inline font-size="10pt" font-family="monospace">(make-oldstyle-hashtable <fo:inline font-style="italic">hash-function</fo:inline> assv)</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(make-oldstyle-hashtable <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">hashtable</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Equivalent to <fo:inline font-size="10pt" font-family="monospace">(make-oldstyle-hashtable object-hash assv)</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="hashtable-contains?"/>
<fo:inline font-style="italic"> Procedure hashtable-contains?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584915"><!--hashtable-contains?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(hashtable-contains? <fo:inline font-style="italic">hashtable key</fo:inline>)  =&gt; <fo:inline font-style="italic">bool</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns true iff the <fo:inline font-style="italic">hashtable</fo:inline> contains an entry for <fo:inline font-style="italic">key</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="hashtable-fetch"/>
<fo:inline font-style="italic"> Procedure hashtable-fetch</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2584963"><!--hashtable-fetch--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(hashtable-fetch <fo:inline font-style="italic">hashtable key flag</fo:inline>)  =&gt; <fo:inline font-style="italic">object</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the value associated with <fo:inline font-style="italic">key</fo:inline> in the <fo:inline font-style="italic">hashtable</fo:inline> if the
<fo:inline font-style="italic">hashtable</fo:inline> contains <fo:inline font-style="italic">key</fo:inline>; otherwise returns <fo:inline font-style="italic">flag</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="hashtable-get"/>
<fo:inline font-style="italic"> Procedure hashtable-get</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585022"><!--hashtable-get--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(hashtable-get <fo:inline font-style="italic">hashtable key</fo:inline>)  =&gt; <fo:inline font-style="italic">object</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Equivalent to <fo:inline font-size="10pt" font-family="monospace">(hashtable-fetch  #f)</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="hashtable-put!"/>
<fo:inline font-style="italic"> Procedure hashtable-put!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585070"><!--hashtable-put!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(hashtable-put! <fo:inline font-style="italic">hashtable key value</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Changes the <fo:inline font-style="italic">hashtable</fo:inline> to associate <fo:inline font-style="italic">key</fo:inline> with <fo:inline font-style="italic">value</fo:inline>, replacing any
existing association for <fo:inline font-style="italic">key</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="hashtable-remove!"/>
<fo:inline font-style="italic"> Procedure hashtable-remove!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585126"><!--hashtable-remove!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(hashtable-remove! <fo:inline font-style="italic">hashtable key</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Removes any association for <fo:inline font-style="italic">key</fo:inline> within the <fo:inline font-style="italic">hashtable</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="hashtable-clear!"/>
<fo:inline font-style="italic"> Procedure hashtable-clear!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585174"><!--hashtable-clear!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(hashtable-clear! <fo:inline font-style="italic">hashtable</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Removes all associations from the <fo:inline font-style="italic">hashtable</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="hashtable-size"/>
<fo:inline font-style="italic"> Procedure hashtable-size</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585218"><!--hashtable-size--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(hashtable-size <fo:inline font-style="italic">hashtable</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns the number of keys contained within the <fo:inline font-style="italic">hashtable</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="hashtable-for-each"/>
<fo:inline font-style="italic"> Procedure hashtable-for-each</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585263"><!--hashtable-for-each--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(hashtable-for-each <fo:inline font-style="italic">procedure hashtable</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-style="italic">procedure</fo:inline> must accept two arguments, a key and the value
associated with that key. Calls the <fo:inline font-style="italic">procedure</fo:inline> once for each
key-value association in <fo:inline font-style="italic">hashtable</fo:inline>. The order of these calls is
indeterminate.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="hashtable-map"/>
<fo:inline font-style="italic"> Procedure hashtable-map</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585320"><!--hashtable-map--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(hashtable-map <fo:inline font-style="italic">procedure hashtable</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-style="italic">procedure</fo:inline> must accept two arguments, a key and the value
associated with that key. Calls the <fo:inline font-style="italic">procedure</fo:inline> once for each
key-value association in <fo:inline font-style="italic">hashtable</fo:inline>, and returns a list of the
results. The order of the calls is indeterminate.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="hashtable-copy"/>
<fo:inline font-style="italic"> Procedure hashtable-copy</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585375"><!--hashtable-copy--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(hashtable-copy <fo:inline font-style="italic">hashtable</fo:inline>)  =&gt; <fo:inline font-style="italic">hashtable</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a copy of the <fo:inline font-style="italic">hashtable</fo:inline>.</fo:block></fo:block><fo:block id="id2585405"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.12.2. Hash functions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-style="italic">hash values</fo:inline> returned by these functions are nonnegative exact
integer suitable as hash values for the hashtable functions.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="equal-hash"/>
<fo:inline font-style="italic"> Procedure equal-hash</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585437"><!--equal-hash--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(equal-hash <fo:inline font-style="italic">object</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a hash value for <fo:inline font-style="italic">object</fo:inline> based on its contents.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="object-hash"/>
<fo:inline font-style="italic"> Procedure object-hash</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585482"><!--object-hash--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(object-hash <fo:inline font-style="italic">object</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a hash value for <fo:inline font-style="italic">object</fo:inline> based on its identity.</fo:block><fo:block id="id2585511" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This hash function performs extremely poorly on pairs,
vectors, strings, and bytevectors, which are the objects
with which it is mostly likely to be used.
For efficient hashing on object identity, create the
hashtable with <fo:inline font-size="10pt" font-family="monospace">make-eq-hashtable</fo:inline> or <fo:inline font-size="10pt" font-family="monospace">make-eqv-hashtable</fo:inline>
of the <fo:inline font-size="10pt" font-family="monospace">(rnrs hashtables)</fo:inline> library.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="string-hash"/>
<fo:inline font-style="italic"> Procedure string-hash</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585555"><!--string-hash--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(string-hash <fo:inline font-style="italic">string</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a hash value for <fo:inline font-style="italic">string</fo:inline> based on its content.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="symbol-hash"/>
<fo:inline font-style="italic"> Procedure symbol-hash</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585599"><!--symbol-hash--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(symbol-hash <fo:inline font-style="italic">symbol</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a hash value for <fo:inline font-style="italic">symbol</fo:inline> based on its print name.
The <fo:inline font-size="10pt" font-family="monospace">symbol-hash</fo:inline>
is very fast, because the hash code is cached in the symbol data
structure.</fo:block></fo:block></fo:block><fo:block id="id2585639"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Parameters</fo:marker><fo:block font-size="20.736pt">10.13. Parameters</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Parameters are procedures that serve as containers for values; parts
of the system that do not operate in the same namespace can still
share parameters and thereby read and write shared state.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A parameter takes zero or one arguments. If called with no arguments,
it returns the current value of the parameter. If called with one
argument, it sets the parameter's value to that of the argument and
returns the new value.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="make-parameter"/>
<fo:inline font-style="italic"> Procedure make-parameter</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2585677"><!--make-parameter--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(make-parameter <fo:inline font-style="italic">name value</fo:inline> <fo:inline font-style="italic">[predicate]</fo:inline>)  =&gt; <fo:inline font-style="italic">procedure</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Create a parameter with name <fo:inline font-style="italic">name,</fo:inline> initial value <fo:inline font-style="italic">value,</fo:inline> and
optional setter predicate <fo:inline font-style="italic">predicate.</fo:inline> When the parameter is set the
new value is first passed to <fo:inline font-style="italic">predicate,</fo:inline>, and if it returns <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> then
an error is signalled. <fo:inline font-style="italic">Name</fo:inline> can be a symbol or a string.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Syntax parameterize</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace"> (parameterize ((parameter0 value0) …) expr0 expr1 …)</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Parameterize overrides the values of a set of parameters in a dynamic
scope — it is like fluid-let for parameters.</fo:block><fo:block id="id2585754"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.13.1. Larceny parameters</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The following list of parameters does not yet include the reader or
compiler switches, which are also parameters.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="debugging.html#proc:break-handler">Parameter <fo:inline font-size="10pt" font-family="monospace">break-handler</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="debugging.html#proc:break-handler">debugging.html#proc:break-handler</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="io.html#proc:console-input-port-factory">Parameter <fo:inline font-size="10pt" font-family="monospace">console-input-port-factory</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="io.html#proc:console-input-port-factory">io.html#proc:console-input-port-factory</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="io.html#proc:console-output-port-factory">Parameter <fo:inline font-size="10pt" font-family="monospace">console-output-port-factory</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="io.html#proc:console-output-port-factory">io.html#proc:console-output-port-factory</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="io.html#proc:current-input-port">Parameter <fo:inline font-size="10pt" font-family="monospace">current-input-port</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="io.html#proc:current-input-port">io.html#proc:current-input-port</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="io.html#proc:current-output-port">Parameter <fo:inline font-size="10pt" font-family="monospace">current-output-port</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="io.html#proc:current-output-port">io.html#proc:current-output-port</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="control.html#proc:error-handler">Parameter <fo:inline font-size="10pt" font-family="monospace">error-handler</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="control.html#proc:error-handler">control.html#proc:error-handler</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="control.html#proc:evaluator">Parameter <fo:inline font-size="10pt" font-family="monospace">evaluator</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="control.html#proc:evaluator">control.html#proc:evaluator</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="repl.html#proc:herald">Parameter <fo:inline font-size="10pt" font-family="monospace">herald</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="repl.html#proc:herald">repl.html#proc:herald</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="environ.html#proc:interaction-environment">Parameter <fo:inline font-size="10pt" font-family="monospace">interaction-environment</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="environ.html#proc:interaction-environment">environ.html#proc:interaction-environment</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="control.html#proc:keyboard-interrupt-handler">Parameter <fo:inline font-size="10pt" font-family="monospace">keyboard-interrupt-handler</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="control.html#proc:keyboard-interrupt-handler">control.html#proc:keyboard-interrupt-handler</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="control.html#proc:load-evaluator">Parameter <fo:inline font-size="10pt" font-family="monospace">load-evaluator</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="control.html#proc:load-evaluator">control.html#proc:load-evaluator</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="control.html#proc:quit-handler">Parameter <fo:inline font-size="10pt" font-family="monospace">quit-handler</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="control.html#proc:quit-handler">control.html#proc:quit-handler</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="repl.html#proc:repl-level">Parameter <fo:inline font-size="10pt" font-family="monospace">repl-level</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="repl.html#proc:repl-level">repl.html#proc:repl-level</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="repl.html#proc:repl-evaluator">Parameter <fo:inline font-size="10pt" font-family="monospace">repl-evaluator</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="repl.html#proc:repl-evaluator">repl.html#proc:repl-evaluator</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="repl.html#proc:repl-printer">Parameter <fo:inline font-size="10pt" font-family="monospace">repl-printer</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="repl.html#proc:repl-printer">repl.html#proc:repl-printer</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="control.html#proc:reset-handler">Parameter <fo:inline font-size="10pt" font-family="monospace">reset-handler</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="control.html#proc:reset-handler">control.html#proc:reset-handler</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="control.html#proc:standard-timeslice">Parameter <fo:inline font-size="10pt" font-family="monospace">standard-timeslice</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="control.html#proc:standard-timeslice">control.html#proc:standard-timeslice</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="structures.html#proc:structure-comparator">Parameter <fo:inline font-size="10pt" font-family="monospace">structure-comparator</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="structures.html#proc:structure-comparator">structures.html#proc:structure-comparator</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="structures.html#proc:structure-printer">Parameter <fo:inline font-size="10pt" font-family="monospace">structure-printer</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="structures.html#proc:structure-printer">structures.html#proc:structure-printer</fo:basic-link>]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="control.html#proc:timer-interrupt-handler">Parameter <fo:inline font-size="10pt" font-family="monospace">timer-interrupt-handler</fo:inline></fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="control.html#proc:timer-interrupt-handler">control.html#proc:timer-interrupt-handler</fo:basic-link>]</fo:inline></fo:block></fo:block></fo:block><fo:block id="id2586016"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Property Lists</fo:marker><fo:block font-size="20.736pt">10.14. Property Lists</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-style="italic">property list</fo:inline> of a symbol is an association list that is
attached to that symbol. The association list maps <fo:inline font-style="italic">properties</fo:inline>, which
are themselves symbols, to arbitrary values.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="putprop"/>
<fo:inline font-style="italic"> Procedure putprop</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2586052"><!--putprop--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(putprop <fo:inline font-style="italic">symbol property obj</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If an association exists for <fo:inline font-style="italic">property</fo:inline> on the property list of
<fo:inline font-style="italic">symbol</fo:inline>, then its value is replaced by the new value
<fo:inline font-style="italic">obj</fo:inline>. Otherwise, a new association is added to the property list of
<fo:inline font-style="italic">symbol</fo:inline> that associates <fo:inline font-style="italic">property</fo:inline> with <fo:inline font-style="italic">obj</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="getprop"/>
<fo:inline font-style="italic"> Procedure getprop</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2586118"><!--getprop--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(getprop <fo:inline font-style="italic">symbol property</fo:inline>)  =&gt; <fo:inline font-style="italic">obj</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If an association exists for <fo:inline font-style="italic">property</fo:inline> on the property list of
<fo:inline font-style="italic">symbol</fo:inline>, then its value is returned. Otherwise, <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> is returned.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="remprop"/>
<fo:inline font-style="italic"> Procedure remprop</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2586173"><!--remprop--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(remprop <fo:inline font-style="italic">symbol property</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If an association exists for <fo:inline font-style="italic">property</fo:inline> on the property list of
<fo:inline font-style="italic">symbol</fo:inline>, then that association is removed. Otherwise, this is a
no-op.</fo:block></fo:block><fo:block id="id2586210"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Symbols</fo:marker><fo:block font-size="20.736pt">10.15. Symbols</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="gensym"/>
<fo:inline font-style="italic"> Procedure gensym</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2586230"><!--gensym--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(gensym <fo:inline font-style="italic">string</fo:inline>)  =&gt; <fo:inline font-style="italic">symbol</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Gensym returns a new uninterned symbol, the name of which contains the
given <fo:inline font-style="italic">string.</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="oblist"/>
<fo:inline font-style="italic"> Procedure oblist</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2586275"><!--oblist--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(oblist <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">list</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Oblist returns the list of interned symbols.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="oblist-set!"/>
<fo:inline font-style="italic"> Procedure oblist-set!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2586314"><!--oblist-set!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(oblist-set! <fo:inline font-style="italic">list</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(oblist-set! <fo:inline font-style="italic">list table-size</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">oblist-set!</fo:inline> sets the list of interned symbols to those in the given
<fo:inline font-style="italic">list</fo:inline> by clearing the symbol hash table and storing the symbols in
<fo:inline font-style="italic">list</fo:inline> in the hash table. If the optional <fo:inline font-style="italic">table-size</fo:inline> is given, it is
taken to be the desired size of the new symbol table.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">See also: <fo:basic-link internal-destination="symbol-hash"><fo:inline>symbol-hash</fo:inline></fo:basic-link>.</fo:block></fo:block><fo:block id="id2586385"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">System Control and Performance Measurement</fo:marker><fo:block font-size="20.736pt">10.16. System Control and Performance Measurement</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="collect"/>
<fo:inline font-style="italic"> Procedure collect</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2586406"><!--collect--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(collect <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(collect <fo:inline font-style="italic">generation</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(collect <fo:inline font-style="italic">generation method</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Collect initiates a garbage collection. If the system has multiple
generations, then the optional arguments are interpreted as
follows. The <fo:inline font-style="italic">generation</fo:inline> is the generation to collect, where 0 is the
youngest generation. The <fo:inline font-style="italic">method</fo:inline> determines how the collection is
performed. If <fo:inline font-style="italic">method</fo:inline> is the symbol collect, then a full collection
is performed in that generation, whatever that means — in a normal
multi-generational copying collector, it means that all live objects
in the generation's current semispace and all live objects from all
younger generations are copied into the generation's other
semispace. If <fo:inline font-style="italic">method</fo:inline> is the symbol promote, then live objects are
promoted from younger generations into the target generation — in our
example collector, that means that the objects are copied into the
target generation's current semispace.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The default value for <fo:inline font-style="italic">generation</fo:inline> is 0, and the default value for
<fo:inline font-style="italic">method</fo:inline> is collect.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Note that the collector's internal policy settings may cause it to
perform a more major type of collection than the one requested; for
example, an attempt to collect generation 2 could cause the collector
to promote all live data into generation 3.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="gc-counter"/>
<fo:inline font-style="italic"> Procedure gc-counter</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2586531"><!--gc-counter--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(gc-counter <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">gc-counter</fo:inline> returns the number of garbage collections performed since
startup. On a 32-bit system, the counter wraps around every
1,073,741,824 collections.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">gc-counter</fo:inline> is a primitive and compiles to a single load instruction
on the SPARC.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="major-gc-counter"/>
<fo:inline font-style="italic"> Procedure major-gc-counter</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2586585"><!--major-gc-counter--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(major-gc-counter <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">major-gc-counter</fo:inline> returns the number of major garbage collections
performed since startup, where a major collection is defined as a
collection that may change the address of objects that have already
survived a previous collection.
On a 32-bit system, the counter wraps around every
1,073,741,824 collections.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">major-gc-counter</fo:inline> is a primitive and compiles to a single load
instruction on the SPARC.  Its primary use to implement efficient
hashtables that hash on object identity (make-eq-hashtable and
make-eqv-hashtable).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="gcctl"/>
<fo:inline font-style="italic"> Procedure gcctl</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2586645"><!--gcctl--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(gcctl <fo:inline font-style="italic">heap-number operation operand</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">[GCCTL is largely obsolete in the new garbage collector but may be
resurrected in the future. It can still be used to control the
non-predictive collector.]</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">gcctl controls garbage collection policy on a heap-wise basis. The
<fo:inline font-style="italic">heap-number</fo:inline> is the heap to operate on, like for the command line
switches: heap 1 is the youngest. If the given heap number does not
correspond to a heap, gcctl fails silently.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-style="italic">operation</fo:inline> is a symbol that selects the operation to perform, and
the <fo:inline font-style="italic">operand</fo:inline> is the operand to that operation, always a number. For
the non-predictive garbage collector, the following operator/operand
pairs are meaningful:</fo:block><fo:list-block id="id2586706" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2586708" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
j-fixed, <fo:inline font-style="italic">n</fo:inline>: after a collection, the collector parameter <fo:inline font-style="italic">j</fo:inline> should be set to the value <fo:inline font-style="italic">n</fo:inline>, if possible. (Non-predictive heaps only.)
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2586728" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
j-percent, <fo:inline font-style="italic">n</fo:inline>: after a collection, the collector parameter <fo:inline font-style="italic">j</fo:inline> should be set to be <fo:inline font-style="italic">n</fo:inline> percent of the number of free steps. (Non-predictive heaps only.)
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2586748" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
incr-fixed, <fo:inline font-style="italic">n</fo:inline>: when growing the heap, the growing should be done in increments of <fo:inline font-style="italic">n</fo:inline>. In the non-predictive heap, <fo:inline font-style="italic">n</fo:inline> is the number of steps. In other heaps, <fo:inline font-style="italic">n</fo:inline> denotes kilobytes.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2586771" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
incr-percent, <fo:inline font-style="italic">n</fo:inline>: when growing the heap, the growing should be done in increments of <fo:inline font-style="italic">n</fo:inline> percent.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">Example:</fo:inline> if the non-predictive heap is heap number 2, then the expressions</fo:block><fo:block id="id2586797" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(gcctl 2 'j-fixed 0)
(gcctl 2 'incr-fixed 1)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">makes the non-predictive collector simulate a normal stop-and-copy
collector (because <fo:inline font-style="italic">j</fo:inline> is always set to 0), and grows the heap only
one step at a time as necessary. This may be useful for certain kinds
of experiments.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">Example:</fo:inline> ditto, the expressions</fo:block><fo:block id="id2586829" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(gcctl 2 'j-percent 50)
(gcctl 2 'incr-percent 20)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">selects the default policy settings.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">Note</fo:inline>: The gcctl facility is experimental. A more developed
  facility will allow controlling heap contraction policy, as well as
  setting all the watermarks. Certainly one can envision other uses,
  too. Finally, it needs to be possible to get current values.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">Note</fo:inline>: Currently the non-predictive heap (np-sc-heap.c) and the
  standard stop-and-copy "old" heap (old-heap.c) are supported, but
  not the standard "young" heap (young-heap.c), nor the stop-and-copy
  collector (sc-heap.c).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="sro"/>
<fo:inline font-style="italic"> Procedure sro</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2586888"><!--sro--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(sro <fo:inline font-style="italic">pointer-tag type-tag limit</fo:inline>)  =&gt; <fo:inline font-style="italic">vector</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">SRO ("standing room only") is a system primitive that traverses the
entire heap and returns a vector that contains all live objects in the
heap that satisfy the constraints imposed by its parameters:</fo:block><fo:list-block id="id2586917" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2586919" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
If <fo:inline font-style="italic">pointer-tag</fo:inline> is -1, then object type is unconstrained;
    otherwise, the object type is constrained to have a pointer tag
    that matches <fo:inline font-style="italic">pointer-tag</fo:inline>. You can read all about pointer tags
    <fo:inline>here</fo:inline>, but the short story is that 1=pair, 3=vector-like,
    5=bytevector-like, and 7=procedure-like.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2586950" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
If <fo:inline font-style="italic">type-tag</fo:inline> is -1, then object type is unconstrained by
    type-tag; otherwise, only objects with a matching type-tag are
    selected (after selection by pointer tag). Pairs don't have
    type-tags, but other objects do. You can read all about type-tags
    <fo:inline>here</fo:inline>.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2586977" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-style="italic">Limit</fo:inline> constrains the selected objects by the number of
    references. If <fo:inline font-style="italic">limit</fo:inline> is -1, then no constraints are imposed;
    otherwise, only objects (selected by pointer-tag and type-tag)
    with no more than <fo:inline font-style="italic">limit</fo:inline> references to them are selected.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For example, (sro -1 -1 -1) returns a vector that contains all live
objects (not including the vector), and (sro 5 2 3) returns a vector
containing all live flonums (bytevector-like, with typetag 2) that are
referred to in no more than 3 places.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="stats-dump-on"/>
<fo:inline font-style="italic"> Procedure stats-dump-on</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2587026"><!--stats-dump-on--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(stats-dump-on <fo:inline font-style="italic">filename</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Stats-dump-on turns on garbage collection statistics dumping. After
each collection, a complete RTS statistics dump is appended to the
file named by <fo:inline font-style="italic">filename</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The file format and contents are documented in a banner written at the
top of the output file. In addition, accessor procedures for the
output structure are defined in the program Util/process-stats.sch.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Stats-dump-on does not perform an initial dump when the file is first
opened; only at the first collection is the first set of statistics
dumped. The user might therefore want to initiate a minor collection
just after turning on dumping in order to have a baseline set of data.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="stats-dump-off"/>
<fo:inline font-style="italic"> Procedure stats-dump-off</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2587098"><!--stats-dump-off--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(stats-dump-off <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Stats-dump-off turns off garbage collection statistics dumping (which
was turned on with <fo:basic-link internal-destination="stats-dump-on"><fo:inline>stats-dump-on</fo:inline></fo:basic-link>). It does not dump a final set
of statistics before closing the file; therefore, the user may wish to
initiate a minor collection before calling this procedure.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="system-features"/>
<fo:inline font-style="italic"> Procedure system-features</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2587149"><!--system-features--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(system-features <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">alist</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">System-features returns an association lists of system features. Most
entries are self-explanatory. The following are a more subtle:</fo:block><fo:list-block id="id2587177" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2587179" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The value of architecture-name is Larceny's notion of the architecture for which it was compiled, not the architecture the program is currently running on. For example, the value of this feature is "Standard-C" if you're running Petit Larceny.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2587193" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
The value of heap-area-info is a vector of vectors, one subvector for each heap area in the running system. The subvector has four entries: the generation number, the area type, the current size, and additional information.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="display-memstats"/>
<fo:inline font-style="italic"> Procedure display-memstats</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2587224"><!--display-memstats--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(display-memstats <fo:inline font-style="italic">vector</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(display-memstats <fo:inline font-style="italic">vector minimal</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(display-memstats <fo:inline font-style="italic">vector minimal full</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Display-memstats takes as its argument a vector as returned by
<fo:basic-link internal-destination="memstats"><fo:inline>memstats</fo:inline></fo:basic-link> and displays the contents of the vector in
human-readable form on the current output port. By default, not all of
the values in the vector are displayed.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the symbol minimal is passed as the second argument, then only a
small number of statistics generally relevant to running benchmarks
are displayed.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the symbol full is passed as the second argument, then all
statistics are displayed.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="memstats"/>
<fo:inline font-style="italic"> Procedure memstats</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2587317"><!--memstats--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(memstats <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">vector</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Memstats returns a freshly allocated vector containing run-time-system
resource usage statistics. Many of these will make no sense whatsoever
to you unless you also study the RTS sources. A listing of the
contents of the vector is available <fo:inline>here</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="run-with-stats"/>
<fo:inline font-style="italic"> Procedure run-with-stats</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2587369"><!--run-with-stats--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(run-with-stats <fo:inline font-style="italic">thunk</fo:inline>)  =&gt; <fo:inline font-style="italic">obj</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Run-with-stats evaluates <fo:inline font-style="italic">thunk</fo:inline>, then prints a short summary of
run-time statistics, as with</fo:block><fo:block id="id2587400" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(display-memstats ... 'minimal),</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">and then returns the result of evaluating <fo:inline font-style="italic">thunk</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="run-benchmark"/>
<fo:inline font-style="italic"> Procedure run-benchmark</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2587432"><!--run-benchmark--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(run-benchmark <fo:inline font-style="italic">name k thunk ok?</fo:inline>)  =&gt; <fo:inline font-style="italic">obj</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Run-benchmark prints a short banner (including the identifying <fo:inline font-style="italic">name</fo:inline>)
to identify the benchmark, then runs <fo:inline font-style="italic">thunk</fo:inline> <fo:inline font-style="italic">k</fo:inline> times, and finally
tests the value returned from the last call to <fo:inline font-style="italic">thunk</fo:inline> by applying the
predicate <fo:inline font-style="italic">ok?</fo:inline> to it. If the predicate returns true, then
run-benchmark prints summary statistics, as with</fo:block><fo:block id="id2587483" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">([display-memstats][5] ... 'minimal).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the predicate returns false, an error is signalled.</fo:block></fo:block><fo:block id="id2587497"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">SRFI Support</fo:marker><fo:block font-size="20.736pt">10.17. SRFI Support</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The SRFIs (Scheme Requests For Implementations) is an Internet-based
collection of Scheme code designed and provided by Scheme
programmers. The SRFI effort is open to anyone, and is described at
<fo:basic-link external-destination="http://srfi.schemers.org">http://srfi.schemers.org</fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The fundamental SRFI is SRFI-0, "Feature-based conditional expansion
construct", which allows a program to query the underlying
implementation about the available SRFIs (and potentially about other
implementation features) at macro expansion time. The design documents
for this and other SRFIs are available at the web site shown above.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny currently supports many SRFIs, but not as many as it should.
Some SRFIs are built into Larceny, but most must be loaded dynamically
using Larceny's <fo:inline font-size="10pt" font-family="monospace">require</fo:inline> procedure:</fo:block><fo:block id="id2587546" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    &gt; (require 'srfi-0)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny provides the following nonstandard SRFI keys for use in
SRFI 0:</fo:block><fo:block id="id2587558" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">    larceny</fo:block></fo:block><fo:block id="id2587565"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">SLIB support</fo:marker><fo:block font-size="20.736pt">10.18. SLIB support</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link external-destination="http://www-swiss.ai.mit.edu/~jaffer/SLIB.html">SLIB</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://www-swiss.ai.mit.edu/~jaffer/SLIB.html">http://www-swiss.ai.mit.edu/~jaffer/SLIB.html</fo:basic-link>]</fo:inline>
is a large collection of useful libraries that have been
written or collected by Aubrey Jaffer.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny supports SLIB via
<fo:basic-link external-destination="http://srfi.schemers.org/srfi-96/">SRFI 96</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://srfi.schemers.org/srfi-96/">http://srfi.schemers.org/srfi-96/</fo:basic-link>]</fo:inline>,
but SLIB itself is not shipped with Larceny;
it must be downloaded separately and then installed.
For the most up-to-date information on installing and using
SLIB with Larceny, see <fo:inline font-size="10pt" font-family="monospace">doc/HOWTO-SLIB</fo:inline>.</fo:block></fo:block><fo:block id="id2587606"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Foreign-Function Interface to C</fo:marker><fo:block font-size="20.736pt">10.19. Foreign-Function Interface to C</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny provides a general foreign-function interface (FFI) substrate
on which other FFIs can be built; see
<fo:basic-link external-destination="LarcenyNotes/note7-ffi.html">Larceny Note #7</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="LarcenyNotes/note7-ffi.html">LarcenyNotes/note7-ffi.html</fo:basic-link>]</fo:inline>.
The FFI described in this manual section is a simple example of
a derived FFI. It is not yet fully evolved, but it is useful.</fo:block><fo:block id="id2587628" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This section has undergone signficant revision, but
not all of the material has been properly vetted.
Some of the information in this section may be out of date.</fo:block></fo:block></fo:block><fo:block id="id2587638" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Some of the text below is adapted from the 2008 Scheme Workshop
paper, “The Layers of Larceny's Foreign Function Interface,”
by Felix S Klock II.  That paper may provide additional insight
for those searching for implementation details and motivations.</fo:block></fo:block></fo:block><fo:block id="id2587651"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.19.1. Introducing the FFI</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are a number of different potential ways to use the FFI.
One client may want to develop code in C and load it into Larceny.
Another client may want to load native libraries
provided by the host operating system, enabling invocation
of foreign code from Scheme expressions without developing
any C code or even running a C compiler.
Larceny's FFI can be used for both of these cases,
but many of its facilities target a third client
in between the two extremes: a client with a C compiler and
the header files and object code for the foreign libraries,
but who wishes to avoid writing glue code in C to interface
with the libraries.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There are four main steps to interacting with foreign code:</fo:block><fo:list-block id="id2522257" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-distance-between-starts="1.2em" provisional-label-separation="0.2em"><fo:list-item id="id2522264" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
identifying the space of values manipulated by the
   foreign code that will also be manipulated in Scheme,
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2522274" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
describing how to marshal values between foreign and
   Scheme code,
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2522283" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
loading library file(s) holding foreign object code, and
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2522291" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>4.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
linking procedures from the loaded library.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Step 1 is conceptual, while steps 2 through 4
yield artifacts in Scheme source code.</fo:block></fo:block><fo:block id="id2522308"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.19.2. The space of foreign values</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">At the machine code level, foreign values are uninterpreted
sequences of bits.  Often foreign object code is oriented
around manipulating word-sized bit-sequences (<fo:inline font-style="italic">words</fo:inline>)
or arrays and tuples of words.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Many libraries are written with a particular
interpretation of such values.  In C code, explicit types are
often used hints to guide such interpretation; for example,
a <fo:inline font-size="10pt" font-family="monospace">0</fo:inline> of type <fo:inline font-size="10pt" font-family="monospace">bool</fo:inline> is usually interpreted as <fo:inline font-style="italic">false</fo:inline>,
while a <fo:inline font-size="10pt" font-family="monospace">1</fo:inline> (or other non-zero value) of type <fo:inline font-size="10pt" font-family="monospace">bool</fo:inline> is
usually interpreted as <fo:inline font-style="italic">true</fo:inline>.
Another example are C enumerations (or <fo:inline font-style="italic">enums</fo:inline>).
An enum declaration defines a set of named
integral constants.  After the C declaration:</fo:block><fo:block id="id2522372" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">enum months { JAN = 1, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC };</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">a <fo:inline font-size="10pt" font-family="monospace">JAN</fo:inline> in C code now denotes <fo:inline font-size="10pt" font-family="monospace">1</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">FEB</fo:inline> is <fo:inline font-size="10pt" font-family="monospace">2</fo:inline>, and so on.
Furthermore, tools like debuggers may render a variable <fo:inline font-size="10pt" font-family="monospace">x</fo:inline>
dynamically assigned the value <fo:inline font-size="10pt" font-family="monospace">2</fo:inline> (and of static type <fo:inline font-size="10pt" font-family="monospace">enum months</fo:inline>)
as <fo:inline font-size="10pt" font-family="monospace">FEB</fo:inline>.  Thus the enum declaration
intoduces a new interpretation for a finite set of integers.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This leads to questions for a client of an FFI;
we explore some below.</fo:block><fo:list-block id="id2587996" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2587998" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Should foreign words be passed over to
the Scheme world as uninterpreted numbers (and thus
be converted into Scheme integers, usually fixnums),
or should they be marshaled into interpreted values, such as
<fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline> for the <fo:inline font-size="10pt" font-family="monospace">bool</fo:inline> type, or the Scheme symbols
{<fo:inline font-size="10pt" font-family="monospace">JAN</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">FEB</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">MAR</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">APR</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">MAY</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">JUN</fo:inline>,
 <fo:inline font-size="10pt" font-family="monospace">JUL</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">AUG</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">SEP</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">OCT</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">NOV</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">DEC</fo:inline>}
for the <fo:inline font-size="10pt" font-family="monospace">enum months</fo:inline> type?
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2588104" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Similarly, how should Scheme values be marshaled into
foreign words?
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2588112" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
A foreign library might leave the mapping
of names like <fo:inline font-size="10pt" font-family="monospace">FEB</fo:inline> to words like <fo:inline font-size="10pt" font-family="monospace">2</fo:inline> <fo:inline font-style="italic">unspecified</fo:inline>
in the library interface.
That is, while the C compiler will know <fo:inline font-size="10pt" font-family="monospace">FEB</fo:inline> maps to <fo:inline font-size="10pt" font-family="monospace">2</fo:inline>
according to a particular version of the library's header file,
the library designer may intend to change this mapping
in the future, and clients writing C code should <fo:inline font-style="italic">only</fo:inline> use
the names to refer to a <fo:inline font-size="10pt" font-family="monospace">enum months</fo:inline> value, and <fo:inline font-style="italic">not</fo:inline> integer
expressions.
</fo:block><fo:list-block id="id2588167" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2588169" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
How should this constraint be handled in the FFI; should
 the library client revise their code in reaction to
 such changes to the mapping?
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2588179" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Or should the system derive
 the mapping from the header files, in the same manner that
 the C compiler does?
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2588191" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Foreign libraries often manipulate
mutable entities, like arrays of words where
modifications can be observed (often by design).
</fo:block><fo:list-block id="id2588199" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2588201" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
How should such values be marshaled?
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2588209" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Is it sound to copy such values to the Scheme heap?
  If so, is a shallow copy sufficient?
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2588221" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Will the foreign code hold references to heap-allocated
objects?  Heap-allocated objects that <fo:inline font-style="italic">leak</fo:inline> out to
foreign memory must be treated with care;
garbage collection presents two main problems.
</fo:block><fo:list-block id="id2588235" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2588237" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
First, such objects must not move during a garbage collection;
Larceny supports this via special-purpose allocation routines:
 <fo:inline font-size="10pt" font-family="monospace">cons-nonrelocatable</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">make-nonrelocatable-bytevector</fo:inline>,
 and <fo:inline font-size="10pt" font-family="monospace">make-nonrelocatable-vector</fo:inline>.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2588266" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
Second, the garbage collector must know to hold on to
(i.e. trace)
such values as long as they are needed by foreign code;
otherwise the objects or their referents may be
collected without the knowledge of the foreign code.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Answering these questions may require deep knowledge
of the intended usage of the foreign library.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Larceny FFI attempts to ease interfacing with
foreign code in the presence of the above concerns,
but the nature of the header files included with
most foreign libraries means that the FFI cannot infer
the answers unassisted.</fo:block><fo:block id="id2588301" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Foreign C code developed to work in concert with Larceny
could hypothetically be written to cope with holding
handles for objects managed by the the garbage collector,
but there is currently no significant support
for this use-case.</fo:block></fo:block></fo:block><fo:block id="id2588316" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">One class of foreign values is not addressed
by the Larceny FFI: structures passed by value (as
opposed to by reference, ie pointers to structures).
There is no way to describe the interface to a
foreign procedure that accepts or produces a
C <fo:inline font-size="10pt" font-family="monospace">struct</fo:inline> (at least not properly nor portably).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This tends to not matter for many foreign libraries
(since many C programmers eschew passing structures
by value), but it can arise.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If the foreign library of interest has procedures that
accept or produce a C <fo:inline font-size="10pt" font-family="monospace">struct</fo:inline>, we currently recommend
either avoiding such procedures, or writing
adapter code in C that marshals between values handled
by the FFI and the C <fo:inline font-size="10pt" font-family="monospace">struct</fo:inline>.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The conclusion is: when designing an interface to a foreign
library, you should analyze the values manipulated on the
foreign side and identify their relationship with values
on the Scheme side.
After you have identified the domains of interest,
you then describe how the values will be marshaled
back and forth between the two domains.</fo:block></fo:block><fo:block id="id2588382"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.19.3. Marshalling via ffi-attributes</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This section describes the marshalling protocol defined in
<fo:inline font-size="10pt" font-family="monospace">lib/Base/std-ffi.sch</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Foreign functions automatically marshal their inputs and outputs
according to type-descriptors attached to each foreign
function.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Type-descriptors are S-expressons formed according to the following
grammar:</fo:block><fo:block id="id2588413" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">TypeDesc ::= CoreAttr | ArrowT | MaybeT | OneOfT

CoreAttr ::= PrimAttr | VoidStar | ---

PrimAttr ::= CurrentPrimAttr | DeprecatedPrimAttr

CurrentPrimAttr
         ::= int | uint | byte | short | ushort | char | uchar
          |  long | ulong | longlong | ulonglong
          |  size_t | float | double |  bool | string | void

DeprecatedPrimAttr
         ::= unsigned | boxed

VoidStar ::= void* | ---

ArrowT   ::= (-&gt; (TypeDesc ...) TypeDesc)

MaybeT   ::= (maybe TypeDesc)

OneOfT   ::= (oneof (Any Fixnum) ... TypeDesc)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">where <fo:inline font-size="10pt" font-family="monospace">---</fo:inline> represents a user-extensible part of the grammar
(see below),
<fo:inline font-size="10pt" font-family="monospace">Any</fo:inline> represents any Scheme value, and <fo:inline font-size="10pt" font-family="monospace">Fixnum</fo:inline> represents
any word-sized integer.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A central registry maps <fo:inline font-size="10pt" font-family="monospace">CoreAttr</fo:inline>'s to a foreign
representation and two conversion routines:
one to convert a Scheme value to a foreign argument, and
another to convert a foreign result back back to a Scheme value.
The denoted components are collectively referred to as a <fo:inline font-style="italic">type</fo:inline>
within the FFI documentation.
The registry is extensible; the <fo:inline font-size="10pt" font-family="monospace">ffi-add-attribute-core-entry!</fo:inline>
procedure adds new <fo:inline font-size="10pt" font-family="monospace">CoreAttr's</fo:inline> to the registry, and
one can alternatively add short-hands for
type-descriptors via the <fo:inline font-size="10pt" font-family="monospace">ffi-add-alias-of-attribute-entry!</fo:inline>
procedure.
Finally, one can add new <fo:inline font-size="10pt" font-family="monospace">VoidStar</fo:inline> productions
(subtypes of the <fo:inline font-size="10pt" font-family="monospace">void*</fo:inline> type-descriptor)
via the <fo:inline font-size="10pt" font-family="monospace">ffi-install-void*-subtype</fo:inline> procedure
(defined in the <fo:inline font-size="10pt" font-family="monospace">lib/Standard/foreign-stdlib.sch</fo:inline> library).</fo:block><fo:block id="id2588529"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.3.1. Primitive Attribute Types</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The following is a list of the accepted types and their conversions
at the boundary between Scheme and foreign code:</fo:block><fo:block id="id2588542" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em"><fo:block id="id2588544" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">int</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Exact integer values in the range [-2<fo:inline font-size="75%" vertical-align="super">31</fo:inline>,2<fo:inline font-size="75%" vertical-align="super">31</fo:inline>-1].
  Scheme integers in that range are converted to and from C "<fo:inline font-size="10pt" font-family="monospace">int</fo:inline>".
</fo:block></fo:block><fo:block id="id2588578" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">uint</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Exact integer values in the range [0,2<fo:inline font-size="75%" vertical-align="super">32</fo:inline>-1].
  Scheme integers in that ranges are converted to and from C "<fo:inline font-size="10pt" font-family="monospace">unsigned int</fo:inline>".
</fo:block></fo:block><fo:block id="id2588609" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">byte</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Synonymous with <fo:inline font-size="10pt" font-family="monospace">int</fo:inline> in the current implementation.
</fo:block></fo:block><fo:block id="id2588634" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">short</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Synonymous with <fo:inline font-size="10pt" font-family="monospace">int</fo:inline> in the current implementation.
</fo:block></fo:block><fo:block id="id2588660" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">ushort</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Synonymous with <fo:inline font-size="10pt" font-family="monospace">unsigned</fo:inline> in the current implementation.
</fo:block></fo:block><fo:block id="id2588686" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">char</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Scheme ASCII characters are converted to and from C "<fo:inline font-size="10pt" font-family="monospace">char</fo:inline>".
</fo:block></fo:block><fo:block id="id2588711" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">uchar</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Scheme ASCII characters are converted to and from C "<fo:inline font-size="10pt" font-family="monospace">unsigned char</fo:inline>".
</fo:block></fo:block><fo:block id="id2588737" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">long</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Synonymous with <fo:inline font-size="10pt" font-family="monospace">int</fo:inline> in the current implementation.
</fo:block></fo:block><fo:block id="id2588763" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">ulong</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Synonymous with <fo:inline font-size="10pt" font-family="monospace">unsigned</fo:inline> in the current implementation.
</fo:block></fo:block><fo:block id="id2588789" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">longlong</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Exact integer values in the range [-2<fo:inline font-size="75%" vertical-align="super">63</fo:inline>,2<fo:inline font-size="75%" vertical-align="super">63</fo:inline>-1].
  Scheme integers in that range are converted
  to and from C "<fo:inline font-size="10pt" font-family="monospace">long long</fo:inline>".
</fo:block></fo:block><fo:block id="id2588822" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">ulonglong</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Exact integer values in the range [0,2<fo:inline font-size="75%" vertical-align="super">64</fo:inline>-1].
  Scheme integers in that range are converted
  to and from C "<fo:inline font-size="10pt" font-family="monospace">unsigned long long</fo:inline>".
</fo:block></fo:block><fo:block id="id2588853" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">size_t</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Synonymous with <fo:inline font-size="10pt" font-family="monospace">uint</fo:inline> in the current implementation.
</fo:block></fo:block><fo:block id="id2588879" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">float</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Scheme flonums are converted to and from C "<fo:inline font-size="10pt" font-family="monospace">float</fo:inline>".
  The conversion to <fo:inline font-size="10pt" font-family="monospace">float</fo:inline> is performed via
  a C <fo:inline font-size="10pt" font-family="monospace">(float)</fo:inline> cast from a C <fo:inline font-size="10pt" font-family="monospace">double</fo:inline>.
</fo:block></fo:block><fo:block id="id2588924" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">double</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Scheme flonums are converted to and from C "double".
</fo:block></fo:block><fo:block id="id2588944" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">bool</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Scheme objects are converted to C "<fo:inline font-size="10pt" font-family="monospace">int</fo:inline>";
  <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> is converted to 0, and all other objects to 1.
  In the reverse direction, 0 is converted to <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> and
  all other integers to <fo:inline font-size="10pt" font-family="monospace">#t</fo:inline>.
</fo:block></fo:block><fo:block id="id2588990" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">string</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  A Scheme string holding ASCII characters
  is <fo:inline font-style="italic">copied</fo:inline> into a NUL-terminated bytevector,
  passing a pointer to its first byte to the foreign procedure;
  <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> is converted to a C "<fo:inline font-size="10pt" font-family="monospace">(char*)0</fo:inline>" value.
  In the reverse direction, a pointer to a NUL-terminated sequence
  of bytes interpreted as ASCII characters is
  copied into a freshly allocated Scheme string; a NULL pointer is
  converted to <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>.
</fo:block></fo:block><fo:block id="id2589042" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">void</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  No return value.
  (Only used in return position for foreign functions;
  all Scheme procedures passed to the FFI are invoked in a context
  expecting one value.)
</fo:block></fo:block><fo:block id="id2589067" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">unsigned</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Synonymous with <fo:inline font-size="10pt" font-family="monospace">uint</fo:inline>; deprecated.
</fo:block></fo:block><fo:block id="id2589092" keep-together.within-column="always" keep-with-next.within-column="always" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline>
<fo:inline font-size="10pt" font-family="monospace">boxed</fo:inline>
</fo:inline></fo:block><fo:block margin-left="0.25in"><fo:block>
  Any heap-allocated data structure (pair,
  bytevector-like, vector-like, procedure) is converted to
  a C "<fo:inline font-size="10pt" font-family="monospace">void*</fo:inline>" to the first element of the structure. The
  value <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> is also acceptable. It is converted to a C "<fo:inline font-size="10pt" font-family="monospace">(void*)0</fo:inline>"
  value.
  (Only used in argument position for foreign functions; foreign
   functions are not expected to return direct references
   to heap-allocated values.)
</fo:block></fo:block></fo:block></fo:block><fo:block id="id2589139"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.3.2. Extending the Core Attribute Registry</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The public interface to many foreign libraries is written
in terms of types defined within that foreign library.
One can introduce new types to the Larceny FFI
by extending the core attribute entry table.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="ffi-add-attribute-core-entry!"/>
<fo:inline font-style="italic"> Procedure ffi-add-attribute-core-entry!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2589169"><!--ffi-add-attribute-core-entry!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(ffi-add-attribute-core-entry! <fo:inline font-style="italic">entry-name rep-sym marshal unmarshal</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link internal-destination="ffi-add-attribute-core-entry!"><fo:inline>ffi-add-attribute-core-entry!</fo:inline></fo:basic-link> extends the
internal registry with the new entry specified by its arguments.</fo:block><fo:list-block id="id2589204" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2589206" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-style="italic">entry-name</fo:inline> is a symbol (the symbolic type name being
introduced to the ffi).
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2589218" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-style="italic">rep-name</fo:inline> is a low-level type descriptor symbol, one of
<fo:inline font-size="10pt" font-family="monospace">signed32</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">unsigned32</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">signed64</fo:inline>, <fo:inline font-size="10pt" font-family="monospace">unsigned64</fo:inline>
(representing varieties of fixed width integers),
<fo:inline font-size="10pt" font-family="monospace">ieee32</fo:inline> (representing “floats”),
<fo:inline font-size="10pt" font-family="monospace">ieee64</fo:inline> (representing “doubles”), or
<fo:inline font-size="10pt" font-family="monospace">pointer</fo:inline> (representing “<fo:inline font-size="10pt" font-family="monospace">(void*)</fo:inline>” in C).
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2589280" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-style="italic">marshal</fo:inline> is a marshaling function that accepts a Scheme object and a symbol
(the name of the invoking procedure); it is responsible for checking
the Scheme object's validity and then producing a corresponding
instance of the low-level representation.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2589295" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-style="italic">unmarshal</fo:inline> is either <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> or an unmarshalling function that
accepts an instance of the low-level representation
and produces a corresponding Scheme object.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block id="id2589316"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.3.3. Attribute Type Constructors</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Core attributes suffice for linking to simple
functions.
Constructured FFI attributes express more complex
marshaling protocols</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold" keep-with-next.within-line="always" padding-end="1em">Arrow Type Constructors. </fo:inline>A structured FFI attribute
of the form <fo:inline font-size="10pt" font-family="monospace">(-&gt; (<fo:inline font-style="italic">s_1</fo:inline> … <fo:inline font-style="italic">s_n</fo:inline>) <fo:inline font-style="italic">s_r</fo:inline>)</fo:inline>
(called an <fo:inline font-style="italic">arrow type</fo:inline>)
allows passing functions from Scheme to C
and back again.  Each of the <fo:inline font-style="italic">s_1</fo:inline>, …, <fo:inline font-style="italic">s_n</fo:inline>, <fo:inline font-style="italic">s_r</fo:inline>
is an FFI attribute.
When an arrow type describes an input to a foreign
function, it marshals a Scheme procedure to a
C function pointer by generating glue code to hook the two together
and marshal values as described by the FFI attributes
within the arrow type.
Likewise, when an arrow type describes an output from a
foreign function, it marshals a C function pointer
to a Scheme procedure, again by generating glue code.
These two mappings naturally generalize to arbitrary nesting
of arrow types, so one can create callbacks that consume
callouts, return callouts that consume callbacks, and so on.</fo:block><fo:block id="id2589386" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The current implementation of arrow types introduces an
unnecessary space leak, because none of Larceny's current
garbage collectors attempt to reclaim some of the structure
allocated (in particular, the so-called trampolines)
when functions are marshaled via arrow types.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The FFI could be revised to reduce the leak
(e.g. it could keep a cache of generated trampolines and
reuse them, but currently do not do so).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Many foreign libraries have a structure where one only
sets up a fixed set of callbacks, and then all further
computation does not require arrow type marshaling.
This is one reason why fixing this problem
has been a low priority item for the Larceny development
team.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold" keep-with-next.within-line="always" padding-end="1em">Maybe Type Constructor. </fo:inline><fo:inline font-size="10pt" font-family="monospace">(maybe <fo:inline font-style="italic">t</fo:inline>)</fo:inline> captures the
pattern of passing <fo:inline font-size="10pt" font-family="monospace">NULL</fo:inline> in C and <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> in Scheme
to represent the absence of information.
The FFI attribute <fo:inline font-style="italic">t</fo:inline> within the maybe type
describes the typical information passed;
the constructed maybe type
marshals <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline> to the foreign null pointer or <fo:inline font-size="10pt" font-family="monospace">0</fo:inline> (as appropriate),
and otherwise applies the marshaling of <fo:inline font-style="italic">t</fo:inline>.
Likewise, it unmarshals the foreign
null pointer and <fo:inline font-size="10pt" font-family="monospace">0</fo:inline> to <fo:inline font-size="10pt" font-family="monospace">#f</fo:inline>, and otherwise applies the
unmarshaling of <fo:inline font-style="italic">t</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">(There are a few other built-in type constructors, such as
 the <fo:inline font-size="10pt" font-family="monospace">oneof</fo:inline> type constructor, but they
 are not as fully-developed as the two above, and are intended
 for use only for internal development for now.)</fo:block></fo:block><fo:block id="id2589507"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.3.4. void* Type Hierarchies</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Using the <fo:inline font-size="10pt" font-family="monospace">void*</fo:inline> attribute
wraps foreign addresses up in a Larceny record,
so that standard numeric
operations cannot be directly applied by accident.
The FFI uses two features of Larceny's record system:
the record type descriptor is a first class
value with an inspectable name, and
record types are extensible via single-inheritance.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold" keep-with-next.within-line="always" padding-end="1em">Basic Operations on <fo:inline font-size="10pt" font-family="monospace">void*</fo:inline>. </fo:inline>The FFI provides <fo:inline font-size="10pt" font-family="monospace">void*-rt</fo:inline>, a record type
descriptor with a single field (a wrapped address).
There is also a family of functions for dereferencing the
pointer within a <fo:inline font-size="10pt" font-family="monospace">void*-rt</fo:inline> and manipulating the
state it references.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="void*-&gt;address"/>
<fo:inline font-style="italic"> Procedure void*-&gt;address</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2589574"><!--void*->address--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(void*-&gt;address <fo:inline font-style="italic">x</fo:inline>)  =&gt; <fo:inline font-style="italic">number</fo:inline></fo:inline>
</fo:block>
Extracts the underlying address held in a <fo:inline font-size="10pt" font-family="monospace">void*</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="void*?"/>
<fo:inline font-style="italic"> Procedure void*?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2589617"><!--void*?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(void*? <fo:inline font-style="italic">x</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block>
Distinquishes <fo:inline font-size="10pt" font-family="monospace">void*</fo:inline>'s from other Scheme values.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="void*-byte-ref"/>
<fo:inline font-style="italic"> Procedure void*-byte-ref</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2589661"><!--void*-byte-ref--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(void*-byte-ref <fo:inline font-style="italic">x idx</fo:inline>)  =&gt; <fo:inline font-style="italic">number</fo:inline></fo:inline>
</fo:block>
Extracts byte at offset from address within <fo:inline font-style="italic">x</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="void*-byte-set!"/>
<fo:inline font-style="italic"> Procedure void*-byte-set!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2589704"><!--void*-byte-set!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(void*-byte-set! <fo:inline font-style="italic">x idx val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block>
Modifies byte at offset from address within <fo:inline font-style="italic">x</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="void*-word-ref"/>
<fo:inline font-style="italic"> Procedure void*-word-ref</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2589746"><!--void*-word-ref--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(void*-word-ref <fo:inline font-style="italic">x idx</fo:inline>)  =&gt; <fo:inline font-style="italic">number</fo:inline></fo:inline>
</fo:block>
Extracts word-sized integer at offset from address within <fo:inline font-style="italic">x</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="void*-word-set!"/>
<fo:inline font-style="italic"> Procedure void*-word-set!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2589788"><!--void*-word-set!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(void*-word-set! <fo:inline font-style="italic">x idx val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block>
Modifies word-sized integer at offset from address within <fo:inline font-style="italic">x</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="void*-void*-ref"/>
<fo:inline font-style="italic"> Procedure void*-void*-ref</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2589830"><!--void*-void*-ref--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(void*-void*-ref <fo:inline font-style="italic">x idx</fo:inline>)  =&gt; <fo:inline font-style="italic">void*</fo:inline></fo:inline>
</fo:block>
Extracts address (and wraps it in a <fo:inline font-size="10pt" font-family="monospace">void*</fo:inline>) at offset from address within <fo:inline font-style="italic">x</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="void*-void*-set!"/>
<fo:inline font-style="italic"> Procedure void*-void*-set!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2589878"><!--void*-void*-set!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(void*-void*-set! <fo:inline font-style="italic">x idx val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block>
Modifies address at offset from address within <fo:inline font-style="italic">x</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="void*-double-ref"/>
<fo:inline font-style="italic"> Procedure void*-double-ref</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2589920"><!--void*-double-ref--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(void*-double-ref <fo:inline font-style="italic">x idx</fo:inline>)  =&gt; <fo:inline font-style="italic">number</fo:inline></fo:inline>
</fo:block>
Extracts 64-bit flonum at offset from address within <fo:inline font-style="italic">x</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="void*-double-set!"/>
<fo:inline font-style="italic"> Procedure void*-double-set!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2589962"><!--void*-double-set!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(void*-double-set! <fo:inline font-style="italic">x idx val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block>
Modifies 64-bit flonum at offset from address within <fo:inline font-style="italic">x</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold" keep-with-next.within-line="always" padding-end="1em">Type Hierarchies. </fo:inline>Procedures for establishing type hierarchies are provided by the
<fo:inline font-size="10pt" font-family="monospace">lib/Standard/foreign-stdlib.sch</fo:inline> library; see
<fo:basic-link internal-destination="ffi-install-void*-subtype"><fo:inline>ffi-install-void*-subtype</fo:inline></fo:basic-link> and <fo:basic-link internal-destination="establish-void*-subhierarchy!"><fo:inline>establish-void*-subhierarchy!</fo:inline></fo:basic-link>.</fo:block></fo:block></fo:block><fo:block id="id2590022"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.19.4. Creating loadable modules</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You must first compile your C code and create one or more loadable object modules. These object modules may then be loaded into Larceny, and Scheme foreign functions may link to specific functions in the loaded module. Defining foreign functions in Scheme is covered in a later section.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The method for creating a loadable object module varies from platform to platform. In the following, assume you have to C source files file1.c and file2.c that define functions that you want to make available as foreign functions in Larceny.</fo:block><fo:block id="id2590043"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.4.1. SunOS 4</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Compile your source files and create a shared library. Using GCC, the command line might look like this:</fo:block><fo:block id="id2590054" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">gcc -fPIC -shared file1.c file2.c -o my-library.so</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The command creates my-library.so in the current directory. This library can now be loaded into Larceny using <fo:basic-link internal-destination="foreign-file"><fo:inline>foreign-file</fo:inline></fo:basic-link>. Any other shared libraries used by your library files should also be loaded into Larceny using <fo:basic-link internal-destination="foreign-file"><fo:inline>foreign-file</fo:inline></fo:basic-link> before any procedures are linked using <fo:basic-link internal-destination="foreign-procedure"><fo:inline>foreign-procedure</fo:inline></fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">By default, /lib/libc.so is made available to the dynamic linker and to the foreign function interface, so there is no need for you to load that library explicitly.</fo:block></fo:block><fo:block id="id2590097"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.4.2. SunOS 5</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Compile your source files and create a shared library, linking with all the necessary libraries. Using GCC, the command line might look like this:</fo:block><fo:block id="id2590109" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">gcc -fPIC -shared file1.c file2.c -lc -lm -lsocket -o my-library.so</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Now you can use foreign-file to load my-library.so into Larceny.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">By default, /lib/libc.so is made available to the foreign function interface, so there is no need for you to load that library explicitly.</fo:block></fo:block></fo:block><fo:block id="id2590130"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.19.5. The Interface</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="id2590136"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.5.1. Procedures</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="foreign-file"/>
<fo:inline font-style="italic"> Procedure foreign-file</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2590156"><!--foreign-file--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(foreign-file <fo:inline font-style="italic">filename</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link internal-destination="foreign-file"><fo:inline>foreign-file</fo:inline></fo:basic-link> loads the named object file into Larceny and makes it available for dynamic linking.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny uses the operating system provided dynamic linker to do dynamic linking. The operation of the dynamic linker varies from platform to platform:</fo:block><fo:list-block id="id2590194" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2590196" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
On some versions of SunOS 4, if the linker is given a file that does not exist, it will terminate the process. (Most likely this is a bug.) This means you should never call foreign-file with the name of a file that does not exist.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2590210" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
On SunOS 5, if a foreign file is given to foreign-file without a directory specification, then the dynamic linker will search its load path (the <fo:inline font-size="10pt" font-family="monospace">LD_LIBRARY_PATH</fo:inline> environment variable) for the file. Hence, a foreign file in the current directory should be "./file.so", not "file.so".
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="foreign-procedure"/>
<fo:inline font-style="italic"> Procedure foreign-procedure</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2590245"><!--foreign-procedure--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(foreign-procedure <fo:inline font-style="italic">name (arg-type …) return-type</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">FIXME: The interface to this function has been extended to support
hooking into Windows procedures that use the Pascal calling convention
instead of the C one.  The way to select which convention to use
should be documented.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a Scheme procedure <fo:inline font-style="italic">p</fo:inline> that calls the foreign procedure whose
name is <fo:inline font-style="italic">name</fo:inline>. When <fo:inline font-style="italic">p</fo:inline> is called, it will convert its parameters to
representations indicated by the <fo:inline font-style="italic">arg-type</fo:inline>s and invoke the foreign
procedure, passing the converted values as parameters. When the
foreign procedure returns, its return value is converted to a Scheme
value according to <fo:inline font-style="italic">return-type</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Types are described below.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The address of the foreign procedure is obtained by searching for <fo:inline font-style="italic">name</fo:inline> in the symbol tables of the foreign files that have been loaded with <fo:inline font-style="italic">foreign-file</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="foreign-null-pointer"/>
<fo:inline font-style="italic"> Procedure foreign-null-pointer</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2590337"><!--foreign-null-pointer--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(foreign-null-pointer <fo:inline font-style="italic"/>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Returns a foreign null pointer.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="foreign-null-pointer?"/>
<fo:inline font-style="italic"> Procedure foreign-null-pointer?</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2590377"><!--foreign-null-pointer?--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(foreign-null-pointer? <fo:inline font-style="italic">integer</fo:inline>)  =&gt; <fo:inline font-style="italic">boolean</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Tests whether its argument is a foreign null pointer.</fo:block></fo:block></fo:block><fo:block id="id2590405"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.19.6. Foreign Data Access</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="id2590411"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.6.1. Raw memory access</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The two primitives <fo:inline font-style="italic">peek-bytes</fo:inline> and <fo:inline font-style="italic">poke-bytes</fo:inline> are provided for reading and writing memory at specific addresses. These procedures are typically used for copying data from foreign data structures into Scheme bytevectors for subsequent decoding.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">(The use of <fo:inline font-style="italic">peek-bytes</fo:inline> and <fo:inline font-style="italic">poke-bytes</fo:inline> can often be avoided by keeping foreign data in a Scheme bytevector and passing the bytevector to a call-out using the <fo:inline font-weight="bold">boxed</fo:inline> parameter type. However, this technique is inappropriate if the foreign code retains a pointer to the Scheme datum, which may be moved by the garbage collector.)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="peek-bytes"/>
<fo:inline font-style="italic"> Procedure peek-bytes</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2590468"><!--peek-bytes--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(peek-bytes <fo:inline font-style="italic">addr bytevector count</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Addr</fo:inline> must be an exact nonnegative integer. <fo:inline font-style="italic">Count</fo:inline> must be a fixnum. The bytes in the range from <fo:inline font-style="italic">addr</fo:inline> through <fo:inline font-style="italic">addr+count-1</fo:inline> are copied into <fo:inline font-style="italic">bytevector</fo:inline>, which must be long enough to hold that many bytes.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If any address in the range is not an address accessible to the process, unpredictable things may happen. Typically, you'll get a segmentation fault. Larceny does not yet catch segmentation faults.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="poke-bytes"/>
<fo:inline font-style="italic"> Procedure poke-bytes</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2590534"><!--poke-bytes--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(poke-bytes <fo:inline font-style="italic">addr bytevector count</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Addr</fo:inline> must be an exact nonnegative integer. <fo:inline font-style="italic">Count</fo:inline> must be a fixnum. The <fo:inline font-style="italic">count</fo:inline> first bytes from <fo:inline font-style="italic">bytevector</fo:inline> are copied into memory in the range from <fo:inline font-style="italic">addr</fo:inline> through <fo:inline font-style="italic">addr+count-1</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If any address in the range is not an address accessible to the process, unpredictable things may happen. Typically, you'll get a segmentation fault. Larceny does not yet catch segmentation faults.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Also, it's possible to corrupt memory with <fo:inline font-style="italic">poke-bytes</fo:inline>. Don't do that.</fo:block></fo:block><fo:block id="id2590598"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.6.2. Foreign data sizes</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The following variables constants define the sizes of basic C data types:</fo:block><fo:list-block id="id2590609" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2590611" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-weight="bold">sizeof:short</fo:inline> The size of a "short int".
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2590624" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-weight="bold">sizeof:int</fo:inline> The size of an "int".
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2590637" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-weight="bold">sizeof:long</fo:inline> The size of a "long int".
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2590650" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-weight="bold">sizeof:pointer</fo:inline> The size of any pointer type.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block id="id2590666"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.6.3. Decoding foreign data</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Foreign data is visible to a Scheme program either as an object pointed to by a memory address (which is itself represented as an integer), or as a bytevector that contains the bytes of the foreign datum.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A number of utility procedures that make reading and writing data of common C primitive types have been written for both these kinds of foreign objects.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Bytevector accessor procedures</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%get16 <fo:inline font-style="italic">bv i</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%get16u <fo:inline font-style="italic">bv i</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%get32 <fo:inline font-style="italic">bv i</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%get32u <fo:inline font-style="italic">bv i</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%get-int <fo:inline font-style="italic">bv i</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%get-unsigned <fo:inline font-style="italic">bv i</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%get-short <fo:inline font-style="italic">bv i</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%get-ushort <fo:inline font-style="italic">bv i</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%get-long <fo:inline font-style="italic">bv i</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%get-ulong <fo:inline font-style="italic">bv i</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%get-pointer <fo:inline font-style="italic">bv i</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These procedures decode bytevectors that contain the bytes of foreign objects. In each case, <fo:inline font-style="italic">bv</fo:inline> is a bytevector and <fo:inline font-style="italic">i</fo:inline> is the offset of the first byte of a field in that bytevector. The field is fetched and returned as an integer (signed or unsigned as appropriate).</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Bytevector updater procedures</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%set16 <fo:inline font-style="italic">bv i val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%set16u <fo:inline font-style="italic">bv i val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%set32 <fo:inline font-style="italic">bv i val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%set32u <fo:inline font-style="italic">bv i val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%set-int <fo:inline font-style="italic">bv i val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%set-unsigned <fo:inline font-style="italic">bv i val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%set-short <fo:inline font-style="italic">bv i val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%set-ushort <fo:inline font-style="italic">bv i val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%set-long <fo:inline font-style="italic">bv i val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%set-ulong <fo:inline font-style="italic">bv i val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%set-pointer <fo:inline font-style="italic">bv i val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These procedures update bytevectors that contain the bytes of foreign objects. In each case, <fo:inline font-style="italic">bv</fo:inline> is a bytevector, <fo:inline font-style="italic">i</fo:inline> is an offset of the first byte of a field in that bytevector, and <fo:inline font-style="italic">val</fo:inline> is a value to be stored in that field. The values must be exact integers in a range implied by the data type.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Foreign-pointer accessor procedures</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek8 <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek8u <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek16 <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek16u <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek32 <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek32u <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek-int <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek-long <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek-unsigned <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek-ulong <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek-short <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek-ushort <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek-pointer <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%peek-string <fo:inline font-style="italic">addr</fo:inline>)  =&gt; <fo:inline font-style="italic">integer</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These procedures read raw memory. In each case, <fo:inline font-style="italic">addr</fo:inline> is an address, and the value stored at that address (the size of which is indicated by the name of the procedure) is fetched and returned as an integer.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">%Peek-string</fo:inline> expects to find a NUL-terminated string of 8-bit bytes at the given address. It is returned as a Scheme string.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Foreign-pointer updater procedures</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke8 <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke8u <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke16 <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke16u <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke32 <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke32u <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke-int <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke-long <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke-unsigned <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke-ulong <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke-short <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke-ushort <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(%poke-pointer <fo:inline font-style="italic">addr val</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These procedures update raw memory. In each case, <fo:inline font-style="italic">addr</fo:inline> is an address, and <fo:inline font-style="italic">val</fo:inline> is a value to be stored at that address.</fo:block></fo:block></fo:block><fo:block id="id2591417"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.19.7. Heap dumping and the FFI</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">If foreign functions are linked into Larceny using the FFI, and a
Larceny heap image is subsequently dumped (with
<fo:basic-link internal-destination="dump-interactive-heap"><fo:inline>dump-interactive-heap</fo:inline></fo:basic-link> or
<fo:basic-link internal-destination="dump-heap"><fo:inline>dump-heap</fo:inline></fo:basic-link>), then the foreign functions are not saved as
part of the heap image. When the heap image is subsequently loaded
into Larceny at startup, the FFI will attempt to re-link all the
foreign functions in the heap image.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">During the relinking phase, foreign files will again be loaded into Larceny, and Larceny's FFI will use the file names <fo:inline font-style="italic">as they were originally given to the FFI</fo:inline> when it tries to load the files. In particular, if relative pathnames were used, Larceny will not have converted them to absolute pathnames.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">An error during relinking will result in Larceny aborting with an error message and returning to the operating system. This is considered a feature.</fo:block></fo:block><fo:block id="id2591467"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.19.8. Examples</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="id2591472"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.8.1. Change directory</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This procedure uses the chdir() system call to set the process's current working directory. The string parameter type is used to pass a Scheme string to the C procedure.</fo:block><fo:block id="id2591484" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(define cd
  (let ((chdir (foreign-procedure "chdir" '(string) 'int)))
    (lambda (newdir)
      (if (not (zero? (chdir newdir)))
      (error "cd: " newdir " is not a valid directory name."))
      (unspecified))))</fo:block></fo:block><fo:block id="id2591500"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.8.2. Print Working Directory</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This procedure uses the getcwd() (get current working directory) system call to retrieve the name of the process's current working directory. A bytevector is created and passed in as a buffer in which to store the return value — a 0-terminated ASCII string. Then the FFI utility function ffi/asciiz-&gt;string is called to convert the bytevector to a string.</fo:block><fo:block id="id2591518" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(define pwd
  (let ((getcwd (foreign-procedure "getcwd" '(boxed int) 'int)))
    (lambda ()
      (let ((s (make-bytevector 1024)))
    (getcwd s 1024)
    (ffi/asciiz-&gt;string s)))))</fo:block></fo:block><fo:block id="id2591532"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.8.3. Quicksort</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="id2591538" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Warning</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">this example is bogus.  It is not safe to pass a collectable
object into a C procedure when the callback invocation might cause a
garbage collection, thus moving the object and invalidating the
address stored in the C machine context.</fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This demonstrates how to use a callback such as the comparator argument to qsort.
It is specified in the type signature using -&gt; as a type constructor.
(Note that one should probably use the built-in sort routines rather than call out
 like this; this example is for demonstrating callbacks, not how to sort.)</fo:block><fo:block id="id2591561" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(define qsort!
  (foreign-procedure "qsort" '(boxed ushort ushort (-&gt; (void* void*) int)) 'void))</fo:block><fo:block id="id2591572" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(let ((bv (list-&gt;vector '(40 10 30 20 1 2 3 4))))
  (qsort! bv 8 4
          (lambda (x y)
            (let ((x (/ (void*-word-ref x 0) 4))
                  (y (/ (void*-word-ref y 0) 4)))
              (- x y))))
  bv)</fo:block><fo:block id="id2591586" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">(let ((bv (list-&gt;bytevector '(40 10 30 20 1 2 3 4))))
  (qsort! bv 8 1
          (lambda (x y)
            (let ((x (void*-byte-ref x 0))
                  (y (void*-byte-ref y 0)))
              (- x y))))
  bv)</fo:block></fo:block><fo:block id="id2591601"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.8.4. Other examples</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Experimental directory contains several examples of use of the FFI. See in particular the files unix.sch (Unix system calls) and socket.sch (procedures for communicating over sockets).</fo:block></fo:block></fo:block><fo:block id="id2591616"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="17.28pt">10.19.9. Higher level layers</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The general foreign-function interface functionality described above
is powerful but awkward to use in practice.  A user might be tempted
to hard code values of offsets or constants that are compiler
dependent.  Also, the FFI will marshall some low-level values such
as strings or integers, but other values such as enumerations
which could be naturally mapped to sets of symbols are not marshalled
since the host environment does not provide the necessary type
information to the FFI.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This section documents a collection of libraries to mitigate these and
other problems.</fo:block><fo:block id="id2591643"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.9.1. foreign-ctools</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Foreign data access is performed by peeking at manually calculated
addresses, but in practice one often needs to inspect fields of C
structures, whose offsets are dependant on the application binary
interface (ABI) of the host environment.  Similarly, C programs often
use refer to values via constant macro definitions; since the values
of such names are not provided by the object code and Scheme programs
do not have a C preprocessor run on them prior to execution, it is
difficult to refer to the same value without encoding "magic numbers"
into the Scheme source code.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The foreign-ctools library is meant to mitigate problems like the two
described above.  It provides special forms for introducing global
definitions of values typically available at compile-time for a C
program.  The library assumes the presence of a C compiler (such as
<fo:inline font-style="italic">cc</fo:inline> on Unix systems or <fo:inline font-style="italic">cl.exe</fo:inline> on Windows systems).  The special
forms work by dynamically generating, compiling, and running C code at
expansion time to determine the desired values of structure offsets or
macro constants.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Here is a grammar for the <fo:inline font-size="10pt" font-family="monospace">define-c-info</fo:inline> form provided by
the <fo:inline font-size="10pt" font-family="monospace">foreign-ctools</fo:inline> library.</fo:block><fo:block id="id2591700" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">&lt;exp&gt;     ::= (define-c-info &lt;c-decl&gt; ... &lt;c-defn&gt; ...)

&lt;c-decl&gt;  ::= (compiler &lt;cc-spec&gt;)
           |  (path &lt;include-path&gt;)
           |  (include &lt;header&gt;)
           |  (include&lt;&gt; &lt;header&gt;)

&lt;cc-spec&gt; ::= cc | cl

&lt;c-defn&gt;  ::= (const &lt;id&gt; &lt;c-type&gt; &lt;c-expr&gt;)
           |  (sizeof &lt;id&gt; &lt;c-type-expr&gt;)
           |  (struct &lt;c-name&gt; &lt;field-clause&gt; ...)
           |  (fields &lt;c-name&gt; &lt;field-clause&gt; ...)
           |  (ifdefconst &lt;id&gt; &lt;c-type&gt; &lt;c-name&gt;)

&lt;c-type&gt;  ::= int | uint | long | ulong

&lt;include-path&gt;
          ::= &lt;string-literal&gt;

&lt;header&gt;  ::= &lt;string-literal&gt;

&lt;field-clause&gt;
          ::= (&lt;offset-id&gt; &lt;c-field&gt;)
           |  (&lt;offset-id&gt; &lt;c-field&gt; &lt;size-id&gt;)

&lt;c-expr&gt;  ::= &lt;string-literal&gt;

&lt;c-type-expr&gt;
          ::= &lt;string-literal&gt;

&lt;c-name&gt;  ::= &lt;string-literal&gt;

&lt;c-field&gt; ::= &lt;string-literal&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Syntax define-c-info</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace"> (define-c-info &lt;c-decl&gt; … &lt;c-defn&gt; …)</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">&lt;c-decl&gt;</fo:inline> clauses of <fo:inline font-size="10pt" font-family="monospace">define-c-info</fo:inline>
control how header files are processed.
The <fo:inline font-size="10pt" font-family="monospace">compiler</fo:inline> clause selects between <fo:inline font-size="10pt" font-family="monospace">cc</fo:inline>
(the default UNIX system compiler) and <fo:inline font-size="10pt" font-family="monospace">cl</fo:inline>
(the compiler included with Microsoft's Windows SDK).
The <fo:inline font-size="10pt" font-family="monospace">path</fo:inline> clause adds a directory to search when
looking for header files.
The <fo:inline font-size="10pt" font-family="monospace">include</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">include&lt;&gt;</fo:inline> clauses indicate
header files to include when executing the
<fo:inline font-size="10pt" font-family="monospace">&lt;c-defn&gt;</fo:inline> clauses;
the two variants correspond to the quoted and bracketed
forms of the C preprocessor's <fo:inline font-size="10pt" font-family="monospace">#include</fo:inline> directive.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">&lt;c-defn&gt;</fo:inline> clauses bind identifiers.
A <fo:inline font-size="10pt" font-family="monospace">(const <fo:inline font-style="italic">x</fo:inline> <fo:inline font-style="italic">t</fo:inline> "<fo:inline font-style="italic">ae</fo:inline>")</fo:inline> clause binds <fo:inline font-style="italic">x</fo:inline> to
the integer value of <fo:inline font-style="italic">ae</fo:inline> according to the C language;
<fo:inline font-style="italic">ae</fo:inline> can be any C arithmetic expression that evaluates
to a value of type <fo:inline font-style="italic">t</fo:inline>.
(The expected usage is for <fo:inline font-style="italic">ae</fo:inline> to be an
expression that the C preprocessor expands to an arithmetic expression.)</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The remaining clauses provide similar functionality:</fo:block><fo:list-block id="id2591877" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em"><fo:list-item id="id2591879" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace">(sizeof <fo:inline font-style="italic">x</fo:inline> "<fo:inline font-style="italic">te</fo:inline>")</fo:inline>
 binds <fo:inline font-style="italic">x</fo:inline> to the size occupied by values
 of type <fo:inline font-style="italic">te</fo:inline>, where <fo:inline font-style="italic">te</fo:inline> is any C type expression.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2591910" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace">(struct "<fo:inline font-style="italic">cn</fo:inline>" … (<fo:inline font-style="italic">x</fo:inline> "<fo:inline font-style="italic">cf</fo:inline>" <fo:inline font-style="italic">y</fo:inline>) …)</fo:inline>
 binds <fo:inline font-style="italic">x</fo:inline> to the offset from the start of a
 structure of type <fo:inline font-size="10pt" font-family="monospace">struct <fo:inline font-style="italic">cn</fo:inline></fo:inline> to its
 <fo:inline font-style="italic">cf</fo:inline> field, and binds <fo:inline font-style="italic">y</fo:inline>, if present, to the field's size.
 A <fo:inline font-size="10pt" font-family="monospace">fields</fo:inline> clause is similar, but it applies
 to structures of type <fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">cn</fo:inline></fo:inline> rather than <fo:inline font-size="10pt" font-family="monospace">struct <fo:inline font-style="italic">cn</fo:inline></fo:inline>.
</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item id="id2591981" space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>
<fo:inline font-size="10pt" font-family="monospace">(ifdefconst <fo:inline font-style="italic">x</fo:inline> <fo:inline font-style="italic">t</fo:inline> "<fo:inline font-style="italic">cn</fo:inline>")</fo:inline>
 binds <fo:inline font-style="italic">x</fo:inline> to the value of <fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">cn</fo:inline></fo:inline> if <fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">cn</fo:inline></fo:inline> is defined;
 <fo:inline font-style="italic">x</fo:inline> is otherwise bound to Larceny's unspecified value.
</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block></fo:block><fo:block id="id2592028"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.9.2. foreign-sugar</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:basic-link internal-destination="foreign-procedure"><fo:inline>foreign-procedure</fo:inline></fo:basic-link> function is sufficient to link in
dynamically loaded C procedures, but it can be annoying to
use when there are many procedures to define that all follow
a regular pattern where one could infer a mapping between
Scheme identifiers and C function names.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For example, some libraries follow a naming convention where a words
within a name are separated by underscores; such functions could be
immediately mapped to Scheme names where the underscores have been
replaced by dashes.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The foreign-sugar library provides a special form, <fo:inline font-size="10pt" font-family="monospace">define-foreign</fo:inline>,
which gives the user a syntax for defining foreign functions using
a syntax where one provides only the Scheme name, the argument types,
and the return type.  The <fo:inline font-size="10pt" font-family="monospace">define-foreign</fo:inline> form then attempts to
infer what C function the name was meant to refer to.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Syntax define-foreign</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace"> (define-foreign (name arg-type …) result-type)</fo:inline></fo:block><fo:block id="id2592098" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in"><fo:block keep-with-next.within-column="always" font-size="14pt" font-weight="bold" hyphenate="false">Note</fo:block><fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">There is other functionality provided allowing the user to
introduce new rules for inferring C function names, but they are
undocumented because they will probably have to change when we switch
to an R6RS macro expander.</fo:block></fo:block></fo:block></fo:block><fo:block id="id2592108"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.9.3. foreign-stdlib</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="stdlib/malloc"/>
<fo:inline font-style="italic"> Procedure stdlib/malloc</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2592130"><!--stdlib/malloc--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(stdlib/malloc <fo:inline font-style="italic">rtd</fo:inline> <fo:inline font-style="italic">[ctor]</fo:inline>)  =&gt; <fo:inline font-style="italic">procedure</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Given a record extension of <fo:inline font-style="italic">void*-rt</fo:inline>, returns an allocator that uses
the C <fo:inline font-size="10pt" font-family="monospace">malloc</fo:inline> procedure to allocate instances of such an object.
Note that the client is responsible for eventually freeing such
objects with <fo:basic-link internal-destination="stdlib/free"><fo:inline>stdlib/free</fo:inline></fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="stdlib/free"/>
<fo:inline font-style="italic"> Procedure stdlib/free</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2592195"><!--stdlib/free--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(stdlib/free <fo:inline font-style="italic">void*-obj</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Frees objects produced by allocators returned from <fo:basic-link internal-destination="stdlib/malloc"><fo:inline>stdlib/malloc</fo:inline></fo:basic-link>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="ffi-install-void*-subtype"/>
<fo:inline font-style="italic"> Procedure ffi-install-void*-subtype</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2592240"><!--ffi-install-void*-subtype--></fo:wrapper>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(ffi-install-void*-subtype <fo:inline font-style="italic">rtd</fo:inline>)  =&gt; <fo:inline font-style="italic">rtd</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(ffi-install-void*-subtype <fo:inline font-style="italic">string</fo:inline> <fo:inline font-style="italic">[parent-rtd]</fo:inline>)  =&gt; <fo:inline font-style="italic">rtd</fo:inline></fo:inline></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(ffi-install-void*-subtype <fo:inline font-style="italic">symbol</fo:inline> <fo:inline font-style="italic">[parent-rtd]</fo:inline>)  =&gt; <fo:inline font-style="italic">rtd</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link internal-destination="ffi-install-void*-subtype"><fo:inline>ffi-install-void*-subtype</fo:inline></fo:basic-link>
extends the core attribute registry with a new primitive
entry for <fo:inline font-style="italic">subtype</fo:inline>.
The <fo:inline font-style="italic">parent-rtd</fo:inline> argument should be a subtype of <fo:inline font-size="10pt" font-family="monospace">void*-rt</fo:inline>
and defaults to <fo:inline font-size="10pt" font-family="monospace">void*-rt</fo:inline>.
In the case of the <fo:inline font-style="italic">symbol</fo:inline> or <fo:inline font-style="italic">string</fo:inline> inputs, the
procedure constructs a new record type subtyping the <fo:inline font-style="italic">parent</fo:inline> argument.
In the case of the <fo:inline font-style="italic">rtd</fo:inline> input, the <fo:inline font-style="italic">rtd</fo:inline> record type
must extend <fo:inline font-size="10pt" font-family="monospace">void*-rt</fo:inline>.
<fo:basic-link internal-destination="ffi-install-void*-subtype"><fo:inline>ffi-install-void*-subtype</fo:inline></fo:basic-link> returns the subtype record type.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The returned record type represents a tagged wrapped C pointer,
allowing one to encode type hierarchies.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="establish-void*-subhierarchy!"/>
<fo:inline font-style="italic"> Procedure establish-void*-subhierarchy!</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2592384"><!--establish-void*-subhierarchy!--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(establish-void*-subhierarchy! <fo:inline font-style="italic">symbol-tree</fo:inline>)  =&gt; <fo:inline font-style="italic">unspecified</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:basic-link internal-destination="establish-void*-subhierarchy!"><fo:inline>establish-void*-subhierarchy!</fo:inline></fo:basic-link> is a convenience function
for constructing large object hierarchies.
It descends the <fo:inline font-style="italic">symbol-tree</fo:inline>,
creates a record type descriptor for each symbol
(where the root of the tree has the parent <fo:inline font-size="10pt" font-family="monospace">void*-rt</fo:inline>),
and invokes <fo:basic-link internal-destination="ffi-install-void*-subtype"><fo:inline>ffi-install-void*-subtype</fo:inline></fo:basic-link> on all
of the introduced types.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-style="italic">Type char*</fo:inline> extends <fo:inline font-style="italic">void*</fo:inline>
<fo:inline id="string-&gt;char*"/>
<fo:inline font-style="italic"> Procedure string-&gt;char*</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2592460"><!--string->char*--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(string-&gt;char* <fo:inline font-style="italic">string</fo:inline>)  =&gt; <fo:inline font-style="italic">char*</fo:inline></fo:inline>
</fo:block>
<fo:inline id="char*-strlen"/>
<fo:inline font-style="italic"> Procedure char*-strlen</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2592495"><!--char*-strlen--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(char*-strlen <fo:inline font-style="italic">char*</fo:inline>)  =&gt; <fo:inline font-style="italic">fixnum</fo:inline></fo:inline>
</fo:block>
<fo:inline id="char*-&gt;string"/>
<fo:inline font-style="italic"> Procedure char*-&gt;string</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2592532"><!--char*->string--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(char*-&gt;string <fo:inline font-style="italic">char*</fo:inline>)  =&gt; <fo:inline font-style="italic">string</fo:inline></fo:inline>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(char*-&gt;string <fo:inline font-style="italic">char* len</fo:inline>)  =&gt; <fo:inline font-style="italic">string</fo:inline></fo:inline></fo:block>
<fo:inline id="CallWithCharStar"/>
<fo:inline font-style="italic"> Procedure call-with-char*</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2592580"><!--call-with-char*--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(call-with-char* <fo:inline font-style="italic">string string-function</fo:inline>)  =&gt; <fo:inline font-style="italic">value</fo:inline></fo:inline>
</fo:block>
<fo:inline font-style="italic">Type char**</fo:inline> extends <fo:inline font-style="italic">void*</fo:inline>
<fo:inline id="CallWithCharStarStar"/>
<fo:inline font-style="italic"> Procedure call-with-char**</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2592623"><!--call-with-char**--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(call-with-char** <fo:inline font-style="italic">string-vector function</fo:inline>)  =&gt; <fo:inline font-style="italic">value</fo:inline></fo:inline>
</fo:block>
<fo:inline font-style="italic">Type int*</fo:inline> extends <fo:inline font-style="italic">void*</fo:inline>
<fo:inline id="CallWithIntStar"/>
<fo:inline font-style="italic"> Procedure call-with-int*</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2592666"><!--call-with-int*--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(call-with-int* <fo:inline font-style="italic">fixnum-vector function</fo:inline>)  =&gt; <fo:inline font-style="italic">value</fo:inline></fo:inline>
</fo:block>
<fo:inline font-style="italic">Type short*</fo:inline> extends <fo:inline font-style="italic">void*</fo:inline>
<fo:inline id="CallWithShortStar"/>
<fo:inline font-style="italic"> Procedure call-with-short*</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2592708"><!--call-with-short*--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(call-with-short* <fo:inline font-style="italic">fixnum-vector function</fo:inline>)  =&gt; <fo:inline font-style="italic">value</fo:inline></fo:inline>
</fo:block>
<fo:inline font-style="italic">Type double*</fo:inline> extends <fo:inline font-style="italic">void*</fo:inline>
<fo:inline id="CallWithDoubleStar"/>
<fo:inline font-style="italic"> Procedure call-with-double*</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2592750"><!--call-with-double*--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(call-with-double* <fo:inline font-style="italic">num-vector function</fo:inline>)  =&gt; <fo:inline font-style="italic">value</fo:inline></fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">FIXME: (There are other functions, but I want to test and document the
ones above first…)</fo:block></fo:block><fo:block id="id2592779"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.9.4. foreign-cstructs</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">foreign-cstructs</fo:inline> library provides a
more direct interface to C structures.
It provides the <fo:inline font-size="10pt" font-family="monospace">define-c-struct</fo:inline> special form.
This form is layered on top of <fo:inline font-size="10pt" font-family="monospace">define-c-info</fo:inline>;
the latter provides the structure field offsets
and sizes used to generate constructors
(which produce appropriately sized bytevectors,
not record instances).
The <fo:inline font-size="10pt" font-family="monospace">define-c-struct</fo:inline> form combines these
with marshaling and unmarshaling procedures to
provide high-level access to a structure.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The grammar for the <fo:inline font-size="10pt" font-family="monospace">define-c-struct</fo:inline> form is presented below.</fo:block><fo:block id="id2592834" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">&lt;exp&gt;    ::= (define-c-struct (&lt;struct-type&gt; &lt;ctor-id&gt; &lt;c-decl&gt; ...)
                &lt;field-clause&gt; ...)

&lt;field-clause&gt;
         ::= (&lt;c-field&gt; &lt;getter&gt;) | (&lt;c-field&gt; &lt;getter&gt; &lt;setter&gt;)

&lt;getter&gt; ::= (&lt;id&gt;) | (&lt;id&gt; &lt;unmarshal&gt;)

&lt;setter&gt; ::= (&lt;id&gt;) | (&lt;id&gt; &lt;marshal&gt;)

&lt;marshal&gt; ::= &lt;ffi-attr-symbol&gt; | &lt;marshal-proc-exp&gt;

&lt;unmarshal&gt; ::= &lt;ffi-attr-symbol&gt; | &lt;unmarshal-proc-exp&gt;

&lt;struct-type&gt; ::= &lt;string-literal&gt;</fo:block></fo:block><fo:block id="id2592855"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:block font-size="14.4pt">10.19.9.5. foreign-cenums</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This library provides the special forms
 <fo:inline font-size="10pt" font-family="monospace">define-c-enum</fo:inline> and <fo:inline font-size="10pt" font-family="monospace">define-c-enum-set</fo:inline>,
which associate the identifiers of
a C <fo:inline font-size="10pt" font-family="monospace">enum</fo:inline> type declaration
with the integer values they denote.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">define-c-enum</fo:inline> form describes enums
encoding a discriminated sum;
<fo:inline font-size="10pt" font-family="monospace">define-c-enum-set</fo:inline> describes bitmasks,
mapping them to R<fo:inline font-size="75%" vertical-align="super">6</fo:inline>RS enum-sets in Scheme.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">(define-c-enum <fo:inline font-style="italic">en</fo:inline> (&lt;c-decl&gt; …)  (<fo:inline font-style="italic">x</fo:inline> "<fo:inline font-style="italic">cn</fo:inline>") …)</fo:inline>
form adds the <fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">en</fo:inline></fo:inline> FFI attribute.
The attribute marshals each symbol <fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">x</fo:inline></fo:inline> to
the integer value that <fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">cn</fo:inline></fo:inline> denotes in C;
unmarshaling does the inverse translation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-size="10pt" font-family="monospace">(define-c-enum-set <fo:inline font-style="italic">ens</fo:inline> (&lt;c-decl&gt; …) (<fo:inline font-style="italic">x</fo:inline> "<fo:inline font-style="italic">cn</fo:inline>") …)</fo:inline>
form binds <fo:inline font-style="italic">ens</fo:inline> to an R<fo:inline font-size="75%" vertical-align="super">6</fo:inline>RS enum-set constructor
with universe resulting from
<fo:inline font-size="10pt" font-family="monospace">(make-enumeration '(<fo:inline font-style="italic">x</fo:inline> …))</fo:inline>; it also adds the <fo:inline font-size="10pt" font-family="monospace"><fo:inline font-style="italic">ens</fo:inline></fo:inline>
FFI attribute.  The attribute marshals an
enum-set <fo:inline font-style="italic">s</fo:inline> constructed by <fo:inline font-style="italic">ens</fo:inline>
to the corresponding bitmask in C (that is,
the integer one would get by logically or'ing
all <fo:inline font-style="italic">cn</fo:inline> such that the corresponding <fo:inline font-style="italic">x</fo:inline> is in <fo:inline font-style="italic">s</fo:inline>).
Unmarshaling attempts to do the inverse translation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The grammar for the two forms is presented below.</fo:block><fo:block id="id2593029" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">&lt;exp&gt; ::= (define-c-enum &lt;enum-id&gt; (&lt;c-decl&gt; ...)
            (&lt;id&gt; &lt;c-name&gt;) ...)

&lt;exp&gt; ::= (define-c-enum-set &lt;enum-id&gt; (&lt;c-decl&gt; ...)
            (&lt;id&gt; &lt;c-name&gt;) ...)

&lt;enum-id&gt; ::= &lt;id&gt;</fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="id2593047"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Debugging</fo:marker><fo:block font-size="24.8832pt">11. Debugging</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Larceny's debugging functionality is implemented in Scheme, using some
of Larceny's extensions for catching exceptions and inspecting the
continuation structure.</fo:block><fo:block id="id2593060"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Entering the debugger</fo:marker><fo:block font-size="20.736pt">11.1. Entering the debugger</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">When Larceny detects an error or a keyboard interrupt, or when it hits
a breakpoint, it signals the condition by printing a message on the
console. Larceny then enters the debugger, which signals its presence
with a short banner and the debugger prompt:</fo:block><fo:block id="id2593074" text-align="start" wrap-option="no-wrap" space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" font-size="10pt" font-family="monospace" background-color="#F0F0F0" border="0" bgcolor="#E0E0E0">Entering debugger; type "?" for help.
debug&gt;</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can also re-enter the debugger by evaluating (debug).</fo:block></fo:block><fo:block id="id2593090"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Debugger commands</fo:marker><fo:block font-size="20.736pt">11.2. Debugger commands</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The debugger is still in an immature state. The following commands are available (commands can be typed in upper or lower case):</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">B</fo:inline>     Print backtrace of continuation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">C</fo:inline>     Print source code of procedure, if available.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">D</fo:inline>     Move down to previous (earlier) activation record.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">E <fo:inline font-style="normal">n expr</fo:inline></fo:inline>      <fo:inline font-style="italic">Expr</fo:inline> is evaluated in the current
interaction environment and must evaluate to a procedure.
It is passed the contents of slot <fo:inline font-style="italic">n</fo:inline> from the current
activation record, and the result, if not unspecified,
is printed.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">E <fo:inline font-style="normal">(n1 … nk) expr</fo:inline></fo:inline>      <fo:inline font-style="italic">Expr</fo:inline> is evaluated in the current
interaction environment and must evaluate to a procedure. It is
passed the contents of slots <fo:inline font-style="italic">n1</fo:inline> through <fo:inline font-style="italic">nk</fo:inline> from the current
activation record, and the result, if not unspecified, is printed.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">I <fo:inline font-style="normal">n</fo:inline></fo:inline>      Inspect the procedure in slot <fo:inline font-style="italic">n</fo:inline> of the current
activation record.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">I @_</fo:inline>      Inspect the active procedure.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">Q</fo:inline>      Quit the debugger and abort the computation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">R</fo:inline>      Return from the debugger and continue the computation.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">S</fo:inline>      Summarize the contents of the current activation record.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">U</fo:inline>      Up to the next (later) activation record.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-weight="bold">X</fo:inline>      Examine the contents of the current activation record.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The <fo:inline font-weight="bold">B</fo:inline>, <fo:inline font-weight="bold">D</fo:inline>, and <fo:inline font-weight="bold">U</fo:inline> commands can be prefixed with a count, for example, 5 U moves up five activation records, and 10 B displays the next 10 activation records. The default for <fo:inline font-weight="bold">B</fo:inline> is to display all the activations; the default count for <fo:inline font-weight="bold">D</fo:inline> and <fo:inline font-weight="bold">U</fo:inline> is 1.</fo:block></fo:block><fo:block id="id2593290"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Breakpoints</fo:marker><fo:block font-size="20.736pt">11.3. Breakpoints</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can set breakpoints either in program text with the break primitive or interactively at the start of a procedure with the break-entry procedure. When Larceny reaches a breakpoint during execution, the program is suspended and the debugger is entered to allow you to inspect the program.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="larceny-break"/>
<fo:inline font-style="italic"> Procedure larceny-break</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2593319"><!--larceny-break--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(larceny-break <fo:inline font-style="italic"/>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Invokes the breakpoint handler.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="break-entry"/>
<fo:inline font-style="italic"> Procedure break-entry</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2593356"><!--break-entry--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(break-entry <fo:inline font-style="italic">procedure</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Set a breakpoint at the start of the <fo:inline font-style="italic">procedure</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="unbreak"/>
<fo:inline font-style="italic"> Procedure unbreak</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2593397"><!--unbreak--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(unbreak <fo:inline font-style="italic">procedure …</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(unbreak <fo:inline font-style="italic"/>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">In the first form, remove any breakpoint set by break-entry at the start of the <fo:inline font-style="italic">procedure_s. In the second form, remove all breakpoints set by _break-entry</fo:inline>.</fo:block></fo:block><fo:block id="id2593437"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Tracing</fo:marker><fo:block font-size="20.736pt">11.4. Tracing</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="trace-entry"/>
<fo:inline font-style="italic"> Procedure trace-entry</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2593458"><!--trace-entry--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(trace-entry <fo:inline font-style="italic">procedure</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Set a trace point on entry to the <fo:inline font-style="italic">procedure</fo:inline>, removing any other trace points on the procedure. When the <fo:inline font-style="italic">procedure</fo:inline> is entered, information about the call is printed on the console: the name of the procedure and the actual arguments.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="trace-exit"/>
<fo:inline font-style="italic"> Procedure trace-exit</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2593506"><!--trace-exit--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(trace-exit <fo:inline font-style="italic">procedure</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Set a trace point on exit from the <fo:inline font-style="italic">procedure</fo:inline>, removing any other trace points on the procedure. When the <fo:inline font-style="italic">procedure</fo:inline> returns, information about the return is printed on the console: the name of the procedure and the returned values.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Note that trace-exit destroys the tail recursion properties of the instrumented procedure. Where the <fo:inline font-style="italic">procedure</fo:inline> would normally "return" by tail-calling another procedure, the instrumented procedure will call the other procedure by a non-tail call and then return, at which point the procedure name and return values will be printed. Thus use of trace-exit may destroy the space properties of the program.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="trace"/>
<fo:inline font-style="italic"> Procedure trace</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2593568"><!--trace--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(trace <fo:inline font-style="italic">procedure</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Set trace points on <fo:inline font-style="italic">procedure</fo:inline> both at entry and exit.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="untrace"/>
<fo:inline font-style="italic"> Procedure untrace</fo:inline>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:wrapper id="id2593609"><!--untrace--></fo:wrapper>
<fo:inline font-size="10pt" font-family="monospace">(untrace <fo:inline font-style="italic">procedure …</fo:inline>) </fo:inline>
</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline font-size="10pt" font-family="monospace">(untrace <fo:inline font-style="italic"/>) </fo:inline></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The first form removes any trace points from the specified procedures.
The second form removes all untrace points.</fo:block></fo:block><fo:block id="id2593647"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Other functionality</fo:marker><fo:block font-size="20.736pt">11.5. Other functionality</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em"><fo:inline id="break-handler"/>
<fo:wrapper id="id2593662"><!--break-handler--></fo:wrapper>
<fo:inline font-style="italic">Parameter break-handler</fo:inline></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The value of break-handler is a procedure that is called when a breakpoint or tracepoint is encountered. The procedure takes two arguments: the procedure in which the breakpoint was set, and the byte offset within the procedure's code vector of the breakpoint.</fo:block></fo:block></fo:block><fo:block id="Standards"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Standards</fo:marker><fo:block font-size="24.8832pt">12. Standards</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block id="id2593694"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Scheme standards</fo:marker><fo:block font-size="20.736pt">12.1. Scheme standards</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">IEEE Standard 1178-1990,
"IEEE Standard for the Scheme Programming Language",
IEEE, 1991. ISBN 1-55937-125-0.
May be ordered from IEEE by calling 1-800-678-IEEE or 908-981-1393
or writing
IEEE Service Center, 445 Hoes Lane, P.O. Box 1331,
Piscataway, NJ 08855-1331, and using order number SH14209.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Richard Kelsey, William Clinger, and Jonathan Rees [editors].
<fo:basic-link external-destination="http://www.brics.dk/~hosc/11-1/">Revised^5 Report
on the Algorithmic Language Scheme</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://www.brics.dk/~hosc/11-1/">http://www.brics.dk/~hosc/11-1/</fo:basic-link>]</fo:inline>.
<fo:inline font-style="italic">Journal of Higher Order and Symbolic Computation</fo:inline>,
11(1), 1998, pages 7-105.
Also appears in <fo:inline font-style="italic">ACM SIGPLAN Notices</fo:inline> 33(9), September 1998.
Available online
<fo:basic-link external-destination="http://www.schemers.org/Documents/Standards/R5RS/">in various formats</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://www.schemers.org/Documents/Standards/R5RS/">http://www.schemers.org/Documents/Standards/R5RS/</fo:basic-link>]</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Michael Sperber, R Kent Dybvig, Matthew Flatt, and Anton van Straaten
[editors].
<fo:basic-link external-destination="http://www.r6rs.org/">Revised^6 Report
on the Algorithmic Language Scheme</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://www.r6rs.org/">http://www.r6rs.org/</fo:basic-link>]</fo:inline>.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">Various SchemePunks [editors].
<fo:basic-link external-destination="http://scheme-punks.org/wiki/index.php?title=Main_Page">ERR5RS</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://scheme-punks.org/wiki/index.php?title=Main_Page">http://scheme-punks.org/wiki/index.php?title=Main_Page</fo:basic-link>]</fo:inline>
is under construction.</fo:block></fo:block><fo:block id="id2593768"><fo:block><fo:block><fo:block margin-left="-12pt" font-family="sans-serif,Symbol,ZapfDingbats" keep-together.within-column="always"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="-12pt"><fo:marker marker-class-name="section.head.marker">Other relevant standards</fo:marker><fo:block font-size="20.736pt">12.2. Other relevant standards</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">IEEE Standard 754-1985,
"IEEE Standard for Binary Floating-Point Arithmetic",
IEEE, 1985.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">A
<fo:basic-link external-destination="http://en.wikipedia.org/wiki/IEEE_754r">revision of IEEE Std 754-1985</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://en.wikipedia.org/wiki/IEEE_754r">http://en.wikipedia.org/wiki/IEEE_754r</fo:basic-link>]</fo:inline>
has been underway since 2000.
The IEEE Microprocessor Standards Committee (MSC)
accepted a candidate draft on 9 October 2006.
The candidate draft 1.2.6 was approved by 79% of 70 votes,
which exceeded the required supermajority of 75%.
Because there were negative votes and several hundred comments,
however, a revised draft 1.3.0 was prepared and approved by
84% of 73 votes.
Since there were over a hundred comments on the
second candidate draft as well, a third candidate draft 1.4.0 was
prepared and another vote taken in April 2007.
After a total of eight ballots, with the last four being
approved by more than 90% of the voters, the Ballot Review
Committee decided in May 2008 that
<fo:basic-link external-destination="http://www.validlab.com/754R/">maximum possible timely
consensus has been obtained</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://www.validlab.com/754R/">http://www.validlab.com/754R/</fo:basic-link>]</fo:inline>, and the consensus draft was
submitted to IEEE-SA RevCom.
IEEE-754r was approved on 12 June 2008.</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The Unicode Consortium.
<fo:basic-link external-destination="http://www.unicode.org/">The Unicode 5.0 Standard</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="http://www.unicode.org/">http://www.unicode.org/</fo:basic-link>]</fo:inline>.
Addison-Wesley Professional, 2006.</fo:block></fo:block></fo:block><fo:block id="id2593831"><fo:block><fo:block><fo:block margin-left="0pt" font-size="24.8832pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold"><fo:block keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" hyphenate="false" text-align="center" start-indent="-12pt" span="inherit" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2">Index</fo:block></fo:block></fo:block></fo:block></fo:block><fo:block xmlns:rx="http://www.renderx.com/XSL/Extensions"><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">A</fo:block><fo:block start-indent="0pt"><fo:block>append!, <fo:basic-link internal-destination="id2580659"><fo:page-number-citation ref-id="id2580659"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">B</fo:block><fo:block start-indent="0pt"><fo:block>break-entry, <fo:basic-link internal-destination="id2593356"><fo:page-number-citation ref-id="id2593356"/></fo:basic-link></fo:block><fo:block>break-handler, <fo:basic-link internal-destination="id2593662"><fo:page-number-citation ref-id="id2593662"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">C</fo:block><fo:block start-indent="0pt"><fo:block>call-with-char*, <fo:basic-link internal-destination="id2592580"><fo:page-number-citation ref-id="id2592580"/></fo:basic-link></fo:block><fo:block>call-with-char**, <fo:basic-link internal-destination="id2592623"><fo:page-number-citation ref-id="id2592623"/></fo:basic-link></fo:block><fo:block>call-with-double*, <fo:basic-link internal-destination="id2592750"><fo:page-number-citation ref-id="id2592750"/></fo:basic-link></fo:block><fo:block>call-with-int*, <fo:basic-link internal-destination="id2592666"><fo:page-number-citation ref-id="id2592666"/></fo:basic-link></fo:block><fo:block>call-with-short*, <fo:basic-link internal-destination="id2592708"><fo:page-number-citation ref-id="id2592708"/></fo:basic-link></fo:block><fo:block>case-sensitive?, <fo:basic-link internal-destination="id2574871"><fo:page-number-citation ref-id="id2574871"/></fo:basic-link></fo:block><fo:block>char*-&gt;string, <fo:basic-link internal-destination="id2592532"><fo:page-number-citation ref-id="id2592532"/></fo:basic-link></fo:block><fo:block>char*-strlen, <fo:basic-link internal-destination="id2592495"><fo:page-number-citation ref-id="id2592495"/></fo:basic-link></fo:block><fo:block>close-open-files, <fo:basic-link internal-destination="id2582107"><fo:page-number-citation ref-id="id2582107"/></fo:basic-link></fo:block><fo:block>collect, <fo:basic-link internal-destination="id2586406"><fo:page-number-citation ref-id="id2586406"/></fo:basic-link></fo:block><fo:block>command-line-arguments, <fo:basic-link internal-destination="id2583101"><fo:page-number-citation ref-id="id2583101"/></fo:basic-link></fo:block><fo:block>compile-file, <fo:basic-link internal-destination="id2576259"><fo:page-number-citation ref-id="id2576259"/></fo:basic-link></fo:block><fo:block>compile-library, <fo:basic-link internal-destination="id2578989"><fo:page-number-citation ref-id="id2578989"/></fo:basic-link></fo:block><fo:block>compile-stale-libraries, <fo:basic-link internal-destination="id2579046"><fo:page-number-citation ref-id="id2579046"/></fo:basic-link></fo:block><fo:block>compiler-switches, <fo:basic-link internal-destination="id2579142"><fo:page-number-citation ref-id="id2579142"/></fo:basic-link></fo:block><fo:block>console-input-port, <fo:basic-link internal-destination="id2582142"><fo:page-number-citation ref-id="id2582142"/></fo:basic-link></fo:block><fo:block>console-input-port-factory, <fo:basic-link internal-destination="id2582248"><fo:page-number-citation ref-id="id2582248"/></fo:basic-link></fo:block><fo:block>console-output-port, <fo:basic-link internal-destination="id2582212"><fo:page-number-citation ref-id="id2582212"/></fo:basic-link></fo:block><fo:block>console-output-port-factory, <fo:basic-link internal-destination="id2582280"><fo:page-number-citation ref-id="id2582280"/></fo:basic-link></fo:block><fo:block>current-input-port, <fo:basic-link internal-destination="id2582312"><fo:page-number-citation ref-id="id2582312"/></fo:basic-link></fo:block><fo:block>current-output-port, <fo:basic-link internal-destination="id2582335"><fo:page-number-citation ref-id="id2582335"/></fo:basic-link></fo:block><fo:block>current-require-path, <fo:basic-link internal-destination="id2576002"><fo:page-number-citation ref-id="id2576002"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">D</fo:block><fo:block start-indent="0pt"><fo:block>delete-file, <fo:basic-link internal-destination="id2582364"><fo:page-number-citation ref-id="id2582364"/></fo:basic-link></fo:block><fo:block>display-memstats, <fo:basic-link internal-destination="id2587224"><fo:page-number-citation ref-id="id2587224"/></fo:basic-link></fo:block><fo:block>dump-heap, <fo:basic-link internal-destination="id2583144"><fo:page-number-citation ref-id="id2583144"/></fo:basic-link></fo:block><fo:block>dump-interactive-heap, <fo:basic-link internal-destination="id2583217"><fo:page-number-citation ref-id="id2583217"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">E</fo:block><fo:block start-indent="0pt"><fo:block>eof-object, <fo:basic-link internal-destination="id2582404"><fo:page-number-citation ref-id="id2582404"/></fo:basic-link></fo:block><fo:block>equal-hash, <fo:basic-link internal-destination="id2585437"><fo:page-number-citation ref-id="id2585437"/></fo:basic-link></fo:block><fo:block>establish-void*-subhierarchy!, <fo:basic-link internal-destination="id2592384"><fo:page-number-citation ref-id="id2592384"/></fo:basic-link></fo:block><fo:block>every?, <fo:basic-link internal-destination="id2580703"><fo:page-number-citation ref-id="id2580703"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">F</fo:block><fo:block start-indent="0pt"><fo:block>ffi-add-attribute-core-entry!, <fo:basic-link internal-destination="id2589169"><fo:page-number-citation ref-id="id2589169"/></fo:basic-link></fo:block><fo:block>ffi-install-void*-subtype, <fo:basic-link internal-destination="id2592240"><fo:page-number-citation ref-id="id2592240"/></fo:basic-link></fo:block><fo:block>file-exists?, <fo:basic-link internal-destination="id2582446"><fo:page-number-citation ref-id="id2582446"/></fo:basic-link></fo:block><fo:block>file-modification-time, <fo:basic-link internal-destination="id2582490"><fo:page-number-citation ref-id="id2582490"/></fo:basic-link></fo:block><fo:block>fixnum?, <fo:basic-link internal-destination="id2583445"><fo:page-number-citation ref-id="id2583445"/></fo:basic-link></fo:block><fo:block>flush-output-port, <fo:basic-link internal-destination="id2582557"><fo:page-number-citation ref-id="id2582557"/></fo:basic-link></fo:block><fo:block>foreign-file, <fo:basic-link internal-destination="id2590156"><fo:page-number-citation ref-id="id2590156"/></fo:basic-link></fo:block><fo:block>foreign-null-pointer, <fo:basic-link internal-destination="id2590337"><fo:page-number-citation ref-id="id2590337"/></fo:basic-link></fo:block><fo:block>foreign-null-pointer?, <fo:basic-link internal-destination="id2590377"><fo:page-number-citation ref-id="id2590377"/></fo:basic-link></fo:block><fo:block>foreign-procedure, <fo:basic-link internal-destination="id2590245"><fo:page-number-citation ref-id="id2590245"/></fo:basic-link></fo:block><fo:block>fx*, <fo:basic-link internal-destination="id2583613"><fo:page-number-citation ref-id="id2583613"/></fo:basic-link></fo:block><fo:block>fx+, <fo:basic-link internal-destination="id2583496"><fo:page-number-citation ref-id="id2583496"/></fo:basic-link></fo:block><fo:block>fx-, <fo:basic-link internal-destination="id2583538"><fo:page-number-citation ref-id="id2583538"/></fo:basic-link></fo:block><fo:block>fx&lt;, <fo:basic-link internal-destination="id2583708"><fo:page-number-citation ref-id="id2583708"/></fo:basic-link></fo:block><fo:block>fx&lt;=, <fo:basic-link internal-destination="id2583767"><fo:page-number-citation ref-id="id2583767"/></fo:basic-link></fo:block><fo:block>fx=, <fo:basic-link internal-destination="id2583656"><fo:page-number-citation ref-id="id2583656"/></fo:basic-link></fo:block><fo:block>fx&gt;, <fo:basic-link internal-destination="id2583825"><fo:page-number-citation ref-id="id2583825"/></fo:basic-link></fo:block><fo:block>fx&gt;=, <fo:basic-link internal-destination="id2583884"><fo:page-number-citation ref-id="id2583884"/></fo:basic-link></fo:block><fo:block>fxlogand, <fo:basic-link internal-destination="id2584098"><fo:page-number-citation ref-id="id2584098"/></fo:basic-link></fo:block><fo:block>fxlogior, <fo:basic-link internal-destination="id2584142"><fo:page-number-citation ref-id="id2584142"/></fo:basic-link></fo:block><fo:block>fxlognot, <fo:basic-link internal-destination="id2584185"><fo:page-number-citation ref-id="id2584185"/></fo:basic-link></fo:block><fo:block>fxlogxor, <fo:basic-link internal-destination="id2584228"><fo:page-number-citation ref-id="id2584228"/></fo:basic-link></fo:block><fo:block>fxlsh, <fo:basic-link internal-destination="id2584273"><fo:page-number-citation ref-id="id2584273"/></fo:basic-link></fo:block><fo:block>fxnegative?, <fo:basic-link internal-destination="id2583943"><fo:page-number-citation ref-id="id2583943"/></fo:basic-link></fo:block><fo:block>fxpositive?, <fo:basic-link internal-destination="id2583995"><fo:page-number-citation ref-id="id2583995"/></fo:basic-link></fo:block><fo:block>fxrsha, <fo:basic-link internal-destination="id2584404"><fo:page-number-citation ref-id="id2584404"/></fo:basic-link></fo:block><fo:block>fxrshl, <fo:basic-link internal-destination="id2584455"><fo:page-number-citation ref-id="id2584455"/></fo:basic-link></fo:block><fo:block>fxzero?, <fo:basic-link internal-destination="id2584047"><fo:page-number-citation ref-id="id2584047"/></fo:basic-link></fo:block><fo:block>fx—, <fo:basic-link internal-destination="id2583570"><fo:page-number-citation ref-id="id2583570"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">G</fo:block><fo:block start-indent="0pt"><fo:block>gc-counter, <fo:basic-link internal-destination="id2586531"><fo:page-number-citation ref-id="id2586531"/></fo:basic-link></fo:block><fo:block>gcctl, <fo:basic-link internal-destination="id2586645"><fo:page-number-citation ref-id="id2586645"/></fo:basic-link></fo:block><fo:block>gensym, <fo:basic-link internal-destination="id2586230"><fo:page-number-citation ref-id="id2586230"/></fo:basic-link></fo:block><fo:block>get-output-string, <fo:basic-link internal-destination="id2582610"><fo:page-number-citation ref-id="id2582610"/></fo:basic-link></fo:block><fo:block>getenv, <fo:basic-link internal-destination="id2583284"><fo:page-number-citation ref-id="id2583284"/></fo:basic-link></fo:block><fo:block>getprop, <fo:basic-link internal-destination="id2586118"><fo:page-number-citation ref-id="id2586118"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">H</fo:block><fo:block start-indent="0pt"><fo:block>hashtable-clear!, <fo:basic-link internal-destination="id2585174"><fo:page-number-citation ref-id="id2585174"/></fo:basic-link></fo:block><fo:block>hashtable-contains?, <fo:basic-link internal-destination="id2584915"><fo:page-number-citation ref-id="id2584915"/></fo:basic-link></fo:block><fo:block>hashtable-copy, <fo:basic-link internal-destination="id2585375"><fo:page-number-citation ref-id="id2585375"/></fo:basic-link></fo:block><fo:block>hashtable-fetch, <fo:basic-link internal-destination="id2584963"><fo:page-number-citation ref-id="id2584963"/></fo:basic-link></fo:block><fo:block>hashtable-for-each, <fo:basic-link internal-destination="id2585263"><fo:page-number-citation ref-id="id2585263"/></fo:basic-link></fo:block><fo:block>hashtable-get, <fo:basic-link internal-destination="id2585022"><fo:page-number-citation ref-id="id2585022"/></fo:basic-link></fo:block><fo:block>hashtable-map, <fo:basic-link internal-destination="id2585320"><fo:page-number-citation ref-id="id2585320"/></fo:basic-link></fo:block><fo:block>hashtable-put!, <fo:basic-link internal-destination="id2585070"><fo:page-number-citation ref-id="id2585070"/></fo:basic-link></fo:block><fo:block>hashtable-remove!, <fo:basic-link internal-destination="id2585126"><fo:page-number-citation ref-id="id2585126"/></fo:basic-link></fo:block><fo:block>hashtable-size, <fo:basic-link internal-destination="id2585218"><fo:page-number-citation ref-id="id2585218"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">L</fo:block><fo:block start-indent="0pt"><fo:block>larceny-break, <fo:basic-link internal-destination="id2593319"><fo:page-number-citation ref-id="id2593319"/></fo:basic-link></fo:block><fo:block>last-pair, <fo:basic-link internal-destination="id2580777"><fo:page-number-citation ref-id="id2580777"/></fo:basic-link></fo:block><fo:block>list-copy, <fo:basic-link internal-destination="id2580822"><fo:page-number-citation ref-id="id2580822"/></fo:basic-link></fo:block><fo:block>load, <fo:basic-link internal-destination="id2576370"><fo:page-number-citation ref-id="id2576370"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">M</fo:block><fo:block start-indent="0pt"><fo:block>major-gc-counter, <fo:basic-link internal-destination="id2586585"><fo:page-number-citation ref-id="id2586585"/></fo:basic-link></fo:block><fo:block>make-bytevector, <fo:basic-link internal-destination="id2579681"><fo:page-number-citation ref-id="id2579681"/></fo:basic-link></fo:block><fo:block>make-oldstyle-hashtable, <fo:basic-link internal-destination="id2584749"><fo:page-number-citation ref-id="id2584749"/></fo:basic-link></fo:block><fo:block>make-parameter, <fo:basic-link internal-destination="id2585677"><fo:page-number-citation ref-id="id2585677"/></fo:basic-link></fo:block><fo:block>make-record-type, <fo:basic-link internal-destination="id2581473"><fo:page-number-citation ref-id="id2581473"/></fo:basic-link></fo:block><fo:block>make-rtd, <fo:basic-link internal-destination="id2576481"><fo:page-number-citation ref-id="id2576481"/></fo:basic-link></fo:block><fo:block>memstats, <fo:basic-link internal-destination="id2587317"><fo:page-number-citation ref-id="id2587317"/></fo:basic-link></fo:block><fo:block>most-negative-fixnum, <fo:basic-link internal-destination="id2584365"><fo:page-number-citation ref-id="id2584365"/></fo:basic-link></fo:block><fo:block>most-positive-fixnum, <fo:basic-link internal-destination="id2584325"><fo:page-number-citation ref-id="id2584325"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">O</fo:block><fo:block start-indent="0pt"><fo:block>object-hash, <fo:basic-link internal-destination="id2585482"><fo:page-number-citation ref-id="id2585482"/></fo:basic-link></fo:block><fo:block>oblist, <fo:basic-link internal-destination="id2586275"><fo:page-number-citation ref-id="id2586275"/></fo:basic-link></fo:block><fo:block>oblist-set!, <fo:basic-link internal-destination="id2586314"><fo:page-number-citation ref-id="id2586314"/></fo:basic-link></fo:block><fo:block>open-input-string, <fo:basic-link internal-destination="id2582652"><fo:page-number-citation ref-id="id2582652"/></fo:basic-link></fo:block><fo:block>open-output-string, <fo:basic-link internal-destination="id2582700"><fo:page-number-citation ref-id="id2582700"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">P</fo:block><fo:block start-indent="0pt"><fo:block>peek-bytes, <fo:basic-link internal-destination="id2590468"><fo:page-number-citation ref-id="id2590468"/></fo:basic-link></fo:block><fo:block>poke-bytes, <fo:basic-link internal-destination="id2590534"><fo:page-number-citation ref-id="id2590534"/></fo:basic-link></fo:block><fo:block>port-name, <fo:basic-link internal-destination="id2582790"><fo:page-number-citation ref-id="id2582790"/></fo:basic-link></fo:block><fo:block>port-position, <fo:basic-link internal-destination="id2582831"><fo:page-number-citation ref-id="id2582831"/></fo:basic-link></fo:block><fo:block>port?, <fo:basic-link internal-destination="id2582749"><fo:page-number-citation ref-id="id2582749"/></fo:basic-link></fo:block><fo:block>procedure-arity, <fo:basic-link internal-destination="id2580240"><fo:page-number-citation ref-id="id2580240"/></fo:basic-link></fo:block><fo:block>procedure-copy, <fo:basic-link internal-destination="id2580158"><fo:page-number-citation ref-id="id2580158"/></fo:basic-link></fo:block><fo:block>procedure-documentation-string, <fo:basic-link internal-destination="id2580316"><fo:page-number-citation ref-id="id2580316"/></fo:basic-link></fo:block><fo:block>procedure-environment, <fo:basic-link internal-destination="id2580568"><fo:page-number-citation ref-id="id2580568"/></fo:basic-link></fo:block><fo:block>procedure-expression, <fo:basic-link internal-destination="id2580520"><fo:page-number-citation ref-id="id2580520"/></fo:basic-link></fo:block><fo:block>procedure-name, <fo:basic-link internal-destination="id2580362"><fo:page-number-citation ref-id="id2580362"/></fo:basic-link></fo:block><fo:block>procedure-source-file, <fo:basic-link internal-destination="id2580412"><fo:page-number-citation ref-id="id2580412"/></fo:basic-link></fo:block><fo:block>procedure-source-position, <fo:basic-link internal-destination="id2580459"><fo:page-number-citation ref-id="id2580459"/></fo:basic-link></fo:block><fo:block>putprop, <fo:basic-link internal-destination="id2586052"><fo:page-number-citation ref-id="id2586052"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">R</fo:block><fo:block start-indent="0pt"><fo:block>random, <fo:basic-link internal-destination="id2584643"><fo:page-number-citation ref-id="id2584643"/></fo:basic-link></fo:block><fo:block>read-larceny-weirdness?, <fo:basic-link internal-destination="id2574918"><fo:page-number-citation ref-id="id2574918"/></fo:basic-link></fo:block><fo:block>read-traditional-weirdness?, <fo:basic-link internal-destination="id2574973"><fo:page-number-citation ref-id="id2574973"/></fo:basic-link></fo:block><fo:block>record-accessor, <fo:basic-link internal-destination="id2581664"><fo:page-number-citation ref-id="id2581664"/></fo:basic-link></fo:block><fo:block>record-constructor, <fo:basic-link internal-destination="id2581559"><fo:page-number-citation ref-id="id2581559"/></fo:basic-link></fo:block><fo:block>record-predicate, <fo:basic-link internal-destination="id2581621"><fo:page-number-citation ref-id="id2581621"/></fo:basic-link></fo:block><fo:block>record-rtd, <fo:basic-link internal-destination="id2577076"><fo:page-number-citation ref-id="id2577076"/></fo:basic-link></fo:block><fo:block>record-type-descriptor, <fo:basic-link internal-destination="id2581823"><fo:page-number-citation ref-id="id2581823"/></fo:basic-link></fo:block><fo:block>record-type-extends?, <fo:basic-link internal-destination="id2582002"><fo:page-number-citation ref-id="id2582002"/></fo:basic-link></fo:block><fo:block>record-type-field-names, <fo:basic-link internal-destination="id2581909"><fo:page-number-citation ref-id="id2581909"/></fo:basic-link></fo:block><fo:block>record-type-name, <fo:basic-link internal-destination="id2581867"><fo:page-number-citation ref-id="id2581867"/></fo:basic-link></fo:block><fo:block>record-type-parent, <fo:basic-link internal-destination="id2581948"><fo:page-number-citation ref-id="id2581948"/></fo:basic-link></fo:block><fo:block>record-updater, <fo:basic-link internal-destination="id2581723"><fo:page-number-citation ref-id="id2581723"/></fo:basic-link></fo:block><fo:block>record?, <fo:basic-link internal-destination="id2577044"><fo:page-number-citation ref-id="id2577044"/></fo:basic-link></fo:block><fo:block>remove, <fo:basic-link internal-destination="id2580864"><fo:page-number-citation ref-id="id2580864"/></fo:basic-link></fo:block><fo:block>remove!, <fo:basic-link internal-destination="id2581034"><fo:page-number-citation ref-id="id2581034"/></fo:basic-link></fo:block><fo:block>remp, <fo:basic-link internal-destination="id2580956"><fo:page-number-citation ref-id="id2580956"/></fo:basic-link></fo:block><fo:block>remp!, <fo:basic-link internal-destination="id2581126"><fo:page-number-citation ref-id="id2581126"/></fo:basic-link></fo:block><fo:block>remprop, <fo:basic-link internal-destination="id2586173"><fo:page-number-citation ref-id="id2586173"/></fo:basic-link></fo:block><fo:block>remq, <fo:basic-link internal-destination="id2580895"><fo:page-number-citation ref-id="id2580895"/></fo:basic-link></fo:block><fo:block>remq!, <fo:basic-link internal-destination="id2581065"><fo:page-number-citation ref-id="id2581065"/></fo:basic-link></fo:block><fo:block>remv, <fo:basic-link internal-destination="id2580925"><fo:page-number-citation ref-id="id2580925"/></fo:basic-link></fo:block><fo:block>remv!, <fo:basic-link internal-destination="id2581095"><fo:page-number-citation ref-id="id2581095"/></fo:basic-link></fo:block><fo:block>rename-file, <fo:basic-link internal-destination="id2582872"><fo:page-number-citation ref-id="id2582872"/></fo:basic-link></fo:block><fo:block>require, <fo:basic-link internal-destination="id2575939"><fo:page-number-citation ref-id="id2575939"/></fo:basic-link></fo:block><fo:block>reset-output-string, <fo:basic-link internal-destination="id2582928"><fo:page-number-citation ref-id="id2582928"/></fo:basic-link></fo:block><fo:block>reverse!, <fo:basic-link internal-destination="id2581186"><fo:page-number-citation ref-id="id2581186"/></fo:basic-link></fo:block><fo:block>rtd-accessor, <fo:basic-link internal-destination="id2576908"><fo:page-number-citation ref-id="id2576908"/></fo:basic-link></fo:block><fo:block>rtd-all-field-names, <fo:basic-link internal-destination="id2577232"><fo:page-number-citation ref-id="id2577232"/></fo:basic-link></fo:block><fo:block>rtd-constructor, <fo:basic-link internal-destination="id2576754"><fo:page-number-citation ref-id="id2576754"/></fo:basic-link></fo:block><fo:block>rtd-field-mutable?, <fo:basic-link internal-destination="id2577291"><fo:page-number-citation ref-id="id2577291"/></fo:basic-link></fo:block><fo:block>rtd-field-names, <fo:basic-link internal-destination="id2577185"><fo:page-number-citation ref-id="id2577185"/></fo:basic-link></fo:block><fo:block>rtd-mutator, <fo:basic-link internal-destination="id2576966"><fo:page-number-citation ref-id="id2576966"/></fo:basic-link></fo:block><fo:block>rtd-name, <fo:basic-link internal-destination="id2577110"><fo:page-number-citation ref-id="id2577110"/></fo:basic-link></fo:block><fo:block>rtd-parent, <fo:basic-link internal-destination="id2577147"><fo:page-number-citation ref-id="id2577147"/></fo:basic-link></fo:block><fo:block>rtd-predicate, <fo:basic-link internal-destination="id2576870"><fo:page-number-citation ref-id="id2576870"/></fo:basic-link></fo:block><fo:block>rtd-printer, <fo:basic-link internal-destination="id2579487"><fo:page-number-citation ref-id="id2579487"/></fo:basic-link></fo:block><fo:block>rtd-printer-set!, <fo:basic-link internal-destination="id2579526"><fo:page-number-citation ref-id="id2579526"/></fo:basic-link></fo:block><fo:block>rtd?, <fo:basic-link internal-destination="id2576708"><fo:page-number-citation ref-id="id2576708"/></fo:basic-link></fo:block><fo:block>run-benchmark, <fo:basic-link internal-destination="id2587432"><fo:page-number-citation ref-id="id2587432"/></fo:basic-link></fo:block><fo:block>run-with-stats, <fo:basic-link internal-destination="id2587369"><fo:page-number-citation ref-id="id2587369"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">S</fo:block><fo:block start-indent="0pt"><fo:block>some?, <fo:basic-link internal-destination="id2581227"><fo:page-number-citation ref-id="id2581227"/></fo:basic-link></fo:block><fo:block>sro, <fo:basic-link internal-destination="id2586888"><fo:page-number-citation ref-id="id2586888"/></fo:basic-link></fo:block><fo:block>stats-dump-off, <fo:basic-link internal-destination="id2587098"><fo:page-number-citation ref-id="id2587098"/></fo:basic-link></fo:block><fo:block>stats-dump-on, <fo:basic-link internal-destination="id2587026"><fo:page-number-citation ref-id="id2587026"/></fo:basic-link></fo:block><fo:block>stdlib/free, <fo:basic-link internal-destination="id2592195"><fo:page-number-citation ref-id="id2592195"/></fo:basic-link></fo:block><fo:block>stdlib/malloc, <fo:basic-link internal-destination="id2592130"><fo:page-number-citation ref-id="id2592130"/></fo:basic-link></fo:block><fo:block>string-&gt;char*, <fo:basic-link internal-destination="id2592460"><fo:page-number-citation ref-id="id2592460"/></fo:basic-link></fo:block><fo:block>string-hash, <fo:basic-link internal-destination="id2585555"><fo:page-number-citation ref-id="id2585555"/></fo:basic-link></fo:block><fo:block>symbol-hash, <fo:basic-link internal-destination="id2585599"><fo:page-number-citation ref-id="id2585599"/></fo:basic-link></fo:block><fo:block>system, <fo:basic-link internal-destination="id2583337"><fo:page-number-citation ref-id="id2583337"/></fo:basic-link></fo:block><fo:block>system-features, <fo:basic-link internal-destination="id2587149"><fo:page-number-citation ref-id="id2587149"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">T</fo:block><fo:block start-indent="0pt"><fo:block>trace, <fo:basic-link internal-destination="id2593568"><fo:page-number-citation ref-id="id2593568"/></fo:basic-link></fo:block><fo:block>trace-entry, <fo:basic-link internal-destination="id2593458"><fo:page-number-citation ref-id="id2593458"/></fo:basic-link></fo:block><fo:block>trace-exit, <fo:basic-link internal-destination="id2593506"><fo:page-number-citation ref-id="id2593506"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">U</fo:block><fo:block start-indent="0pt"><fo:block>unbreak, <fo:basic-link internal-destination="id2593397"><fo:page-number-citation ref-id="id2593397"/></fo:basic-link></fo:block><fo:block>untrace, <fo:basic-link internal-destination="id2593609"><fo:page-number-citation ref-id="id2593609"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">V</fo:block><fo:block start-indent="0pt"><fo:block>vector-copy, <fo:basic-link internal-destination="id2579979"><fo:page-number-citation ref-id="id2579979"/></fo:basic-link></fo:block><fo:block>void*-&gt;address, <fo:basic-link internal-destination="id2589574"><fo:page-number-citation ref-id="id2589574"/></fo:basic-link></fo:block><fo:block>void*-byte-ref, <fo:basic-link internal-destination="id2589661"><fo:page-number-citation ref-id="id2589661"/></fo:basic-link></fo:block><fo:block>void*-byte-set!, <fo:basic-link internal-destination="id2589704"><fo:page-number-citation ref-id="id2589704"/></fo:basic-link></fo:block><fo:block>void*-double-ref, <fo:basic-link internal-destination="id2589920"><fo:page-number-citation ref-id="id2589920"/></fo:basic-link></fo:block><fo:block>void*-double-set!, <fo:basic-link internal-destination="id2589962"><fo:page-number-citation ref-id="id2589962"/></fo:basic-link></fo:block><fo:block>void*-void*-ref, <fo:basic-link internal-destination="id2589830"><fo:page-number-citation ref-id="id2589830"/></fo:basic-link></fo:block><fo:block>void*-void*-set!, <fo:basic-link internal-destination="id2589878"><fo:page-number-citation ref-id="id2589878"/></fo:basic-link></fo:block><fo:block>void*-word-ref, <fo:basic-link internal-destination="id2589746"><fo:page-number-citation ref-id="id2589746"/></fo:basic-link></fo:block><fo:block>void*-word-set!, <fo:basic-link internal-destination="id2589788"><fo:page-number-citation ref-id="id2589788"/></fo:basic-link></fo:block><fo:block>void*?, <fo:basic-link internal-destination="id2589617"><fo:page-number-citation ref-id="id2589617"/></fo:basic-link></fo:block></fo:block></fo:block><fo:block><fo:block margin-left="0pt" font-size="14.4pt" font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="12pt" space-before.minimum="12pt * 0.8" space-before.maximum="12pt * 1.2" start-indent="0pt">W</fo:block><fo:block start-indent="0pt"><fo:block>with-input-from-port, <fo:basic-link internal-destination="id2582979"><fo:page-number-citation ref-id="id2582979"/></fo:basic-link></fo:block><fo:block>with-output-to-port, <fo:basic-link internal-destination="id2583036"><fo:page-number-citation ref-id="id2583036"/></fo:basic-link></fo:block></fo:block></fo:block></fo:block></fo:flow></fo:page-sequence></fo:root>
